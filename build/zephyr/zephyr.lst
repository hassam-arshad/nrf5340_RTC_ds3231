
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	98 1d 00 20 ad 1f 00 00 fb 5b 00 00 81 1f 00 00     ... .....[......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	81 1f 00 00 81 1f 00 00 81 1f 00 00 81 1f 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	35 1c 00 00 81 1f 00 00 00 00 00 00 dd 1b 00 00     5...............
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	81 1f 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
			switch (*fmt) {
  c0:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
  d0:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
  e0:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
  f0:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
 100:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
 110:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
				align = VA_STACK_ALIGN(void *);
 120:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
			switch (*fmt) {
 130:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
 140:	b5 1c 00 00 b5 1c 00 00 b5 1c 00 00 b5 1c 00 00     ................
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	b5 1c 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__data_size+0x10>
     156:	b94a      	cbnz	r2, 16c <__data_size+0x10>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x40>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x38>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x3c>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x24>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x24>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x34>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x24>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x74>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x74>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x2a>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x46>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x74>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x34>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x34>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <set_date_time>:
Date 01–31
Month 01–12
Year 00–99
*/
void set_date_time(uint8_t * dateTime)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
     426:	b089      	sub	sp, #36	; 0x24
     428:	ae01      	add	r6, sp, #4
     42a:	4635      	mov	r5, r6
     42c:	1e44      	subs	r4, r0, #1
     42e:	1d81      	adds	r1, r0, #6
	int ret;
    // Convert decimal values to BCD before writing to the DS3231
    uint8_t bcdDateTime[7];
    for (int i = 0; i < 7; i++) {
        bcdDateTime[i] = decimal_to_bcd(dateTime[i]);
     430:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     434:	f005 fa3c 	bl	58b0 <decimal_to_bcd>
    for (int i = 0; i < 7; i++) {
     438:	428c      	cmp	r4, r1
        bcdDateTime[i] = decimal_to_bcd(dateTime[i]);
     43a:	f805 0b01 	strb.w	r0, [r5], #1
    for (int i = 0; i < 7; i++) {
     43e:	d1f7      	bne.n	430 <set_date_time+0xc>
    }

    // Set the date and time
    uint8_t regAddresses[7] = {SECOND_REG, MINUTE_REG, HOUR_REG, DAY_OF_WEEK_REG, DATE_REG, MONTH_REG, YEAR_REG};
    for (int i = 0; i < 7; i++) {
     440:	2500      	movs	r5, #0
    uint8_t regAddresses[7] = {SECOND_REG, MINUTE_REG, HOUR_REG, DAY_OF_WEEK_REG, DATE_REG, MONTH_REG, YEAR_REG};
     442:	4b17      	ldr	r3, [pc, #92]	; (4a0 <set_date_time+0x7c>)
     444:	ac03      	add	r4, sp, #12
     446:	6818      	ldr	r0, [r3, #0]
     448:	889a      	ldrh	r2, [r3, #4]
     44a:	799b      	ldrb	r3, [r3, #6]
     44c:	9003      	str	r0, [sp, #12]
     44e:	f88d 3012 	strb.w	r3, [sp, #18]
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	int res =  api->transfer(dev, msgs, num_msgs, addr);
     452:	4b14      	ldr	r3, [pc, #80]	; (4a4 <set_date_time+0x80>)
     454:	f8ad 2010 	strh.w	r2, [sp, #16]
     458:	689f      	ldr	r7, [r3, #8]
        uint8_t data[2] = {regAddresses[i], bcdDateTime[i]};	// first byte of data is reg address and second is data
     45a:	f814 3b01 	ldrb.w	r3, [r4], #1
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
     45e:	f8cd d014 	str.w	sp, [sp, #20]
     462:	f88d 3000 	strb.w	r3, [sp]
     466:	f816 3b01 	ldrb.w	r3, [r6], #1
     46a:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
     46e:	2302      	movs	r3, #2
     470:	9306      	str	r3, [sp, #24]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     472:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     476:	2368      	movs	r3, #104	; 0x68
     478:	2201      	movs	r2, #1
     47a:	480a      	ldr	r0, [pc, #40]	; (4a4 <set_date_time+0x80>)
     47c:	f8d7 c008 	ldr.w	ip, [r7, #8]
     480:	a905      	add	r1, sp, #20
     482:	47e0      	blx	ip
        ret = i2c_write_dt(&dev_i2c, data, sizeof(data));
        if (ret != 0) {
     484:	b138      	cbz	r0, 496 <set_date_time+0x72>
            printk("Failed to write to I2C device address %x at Reg. %x \n", dev_i2c.addr, data[0]);
     486:	2168      	movs	r1, #104	; 0x68
     488:	f89d 2000 	ldrb.w	r2, [sp]
     48c:	4806      	ldr	r0, [pc, #24]	; (4a8 <set_date_time+0x84>)
     48e:	f005 fa23 	bl	58d8 <printk>
            return;
        }
    }
}
     492:	b009      	add	sp, #36	; 0x24
     494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < 7; i++) {
     496:	3501      	adds	r5, #1
     498:	2d07      	cmp	r5, #7
     49a:	d1de      	bne.n	45a <set_date_time+0x36>
     49c:	e7f9      	b.n	492 <set_date_time+0x6e>
     49e:	bf00      	nop
     4a0:	00006af0 	.word	0x00006af0
     4a4:	00006814 	.word	0x00006814
     4a8:	00006d3c 	.word	0x00006d3c

000004ac <get_date_time>:

void get_date_time(uint8_t *dateTime) {
     4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    
	int ret;

    uint8_t regAddresses[7] = {SECOND_REG, MINUTE_REG, HOUR_REG, DAY_OF_WEEK_REG, DATE_REG, MONTH_REG, YEAR_REG};
    for (int i = 0; i < 7; i++) {
     4ae:	2400      	movs	r4, #0
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
	msg[0].len = num_write;
     4b0:	2701      	movs	r7, #1
    uint8_t regAddresses[7] = {SECOND_REG, MINUTE_REG, HOUR_REG, DAY_OF_WEEK_REG, DATE_REG, MONTH_REG, YEAR_REG};
     4b2:	4b1d      	ldr	r3, [pc, #116]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
void get_date_time(uint8_t *dateTime) {
     4b4:	4606      	mov	r6, r0
    uint8_t regAddresses[7] = {SECOND_REG, MINUTE_REG, HOUR_REG, DAY_OF_WEEK_REG, DATE_REG, MONTH_REG, YEAR_REG};
     4b6:	889a      	ldrh	r2, [r3, #4]
     4b8:	6818      	ldr	r0, [r3, #0]
     4ba:	799b      	ldrb	r3, [r3, #6]
void get_date_time(uint8_t *dateTime) {
     4bc:	b089      	sub	sp, #36	; 0x24
    uint8_t regAddresses[7] = {SECOND_REG, MINUTE_REG, HOUR_REG, DAY_OF_WEEK_REG, DATE_REG, MONTH_REG, YEAR_REG};
     4be:	f88d 3006 	strb.w	r3, [sp, #6]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     4c2:	4b1a      	ldr	r3, [pc, #104]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4c4:	9000      	str	r0, [sp, #0]
     4c6:	689d      	ldr	r5, [r3, #8]
     4c8:	f8ad 2004 	strh.w	r2, [sp, #4]
        ret = i2c_write_read_dt(&dev_i2c, &regAddresses[i], 1, &dateTime[i], 1);
     4cc:	eb0d 0304 	add.w	r3, sp, r4
	msg[0].len = num_write;
     4d0:	e9cd 3702 	strd	r3, r7, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
     4d4:	2300      	movs	r3, #0
     4d6:	f88d 3010 	strb.w	r3, [sp, #16]
     4da:	19a3      	adds	r3, r4, r6

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
     4dc:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     4e0:	2307      	movs	r3, #7
     4e2:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     4e6:	2368      	movs	r3, #104	; 0x68
     4e8:	2202      	movs	r2, #2
     4ea:	4810      	ldr	r0, [pc, #64]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4ec:	f8d5 c008 	ldr.w	ip, [r5, #8]
     4f0:	a902      	add	r1, sp, #8
     4f2:	47e0      	blx	ip
        if (ret != 0) {
     4f4:	b158      	cbz	r0, 50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
            printk("Failed to write/read I2C device address %x at Reg. %x \r\n", dev_i2c.addr, regAddresses[i]);
     4f6:	f104 0320 	add.w	r3, r4, #32
     4fa:	eb0d 0403 	add.w	r4, sp, r3
     4fe:	2168      	movs	r1, #104	; 0x68
     500:	f814 2c20 	ldrb.w	r2, [r4, #-32]
     504:	480a      	ldr	r0, [pc, #40]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     506:	f005 f9e7 	bl	58d8 <printk>

    // Convert BCD values to decimal after reading from the DS3231
    for (int i = 0; i < 7; i++) {
        dateTime[i] = bcd_to_decimal(dateTime[i]);
    }
}
     50a:	b009      	add	sp, #36	; 0x24
     50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int i = 0; i < 7; i++) {
     50e:	3401      	adds	r4, #1
     510:	2c07      	cmp	r4, #7
     512:	d1db      	bne.n	4cc <get_date_time+0x20>
     514:	1e71      	subs	r1, r6, #1
     516:	3606      	adds	r6, #6
        dateTime[i] = bcd_to_decimal(dateTime[i]);
     518:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     51c:	f005 f9d1 	bl	58c2 <bcd_to_decimal>
    for (int i = 0; i < 7; i++) {
     520:	42b1      	cmp	r1, r6
        dateTime[i] = bcd_to_decimal(dateTime[i]);
     522:	7008      	strb	r0, [r1, #0]
    for (int i = 0; i < 7; i++) {
     524:	d1f8      	bne.n	518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
     526:	e7f0      	b.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
     528:	00006af0 	.word	0x00006af0
     52c:	00006814 	.word	0x00006814
     530:	00006d72 	.word	0x00006d72

00000534 <main>:

void main(void)
{
     534:	b530      	push	{r4, r5, lr}
     536:	b089      	sub	sp, #36	; 0x24
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     538:	4c1f      	ldr	r4, [pc, #124]	; (5b8 <main+0x84>)
     53a:	4620      	mov	r0, r4
     53c:	f005 ffa1 	bl	6482 <z_device_is_ready>

	int ret;

/* STEP 7 - Retrieve the API-specific device structure and make sure that the device is ready to use  */
	if (!device_is_ready(dev_i2c.bus)) {
     540:	b930      	cbnz	r0, 550 <main+0x1c>
		printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     542:	6821      	ldr	r1, [r4, #0]
     544:	481d      	ldr	r0, [pc, #116]	; (5bc <main+0x88>)
               currentDateTime[2], currentDateTime[1], currentDateTime[0],
               currentDateTime[4], currentDateTime[5], currentDateTime[6]);

		k_msleep(SLEEP_TIME_MS);
	}
}
     546:	b009      	add	sp, #36	; 0x24
     548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     54c:	f005 b9c4 	b.w	58d8 <printk>
	setDateTime[1] = 59;
     550:	233b      	movs	r3, #59	; 0x3b
	uint8_t setDateTime[7] = {0};
     552:	2400      	movs	r4, #0
     554:	9404      	str	r4, [sp, #16]
	setDateTime[1] = 59;
     556:	f88d 3011 	strb.w	r3, [sp, #17]
	setDateTime[2] = 23;
     55a:	f240 7317 	movw	r3, #1815	; 0x717
     55e:	f8ad 3012 	strh.w	r3, [sp, #18]
	setDateTime[4] = 28;
     562:	f44f 7307 	mov.w	r3, #540	; 0x21c
     566:	f8ad 3014 	strh.w	r3, [sp, #20]
	setDateTime[6] = 23;
     56a:	2317      	movs	r3, #23
	set_date_time(setDateTime);
     56c:	a804      	add	r0, sp, #16
	setDateTime[6] = 23;
     56e:	f88d 3016 	strb.w	r3, [sp, #22]
	set_date_time(setDateTime);
     572:	f7ff ff57 	bl	424 <set_date_time>
        printk("%02d:%02d:%02d %02d/%02d/%02d\n",
     576:	4d12      	ldr	r5, [pc, #72]	; (5c0 <main+0x8c>)
		get_date_time(currentDateTime);
     578:	a806      	add	r0, sp, #24
		uint8_t currentDateTime[7] = {0};
     57a:	9406      	str	r4, [sp, #24]
     57c:	f8ad 401c 	strh.w	r4, [sp, #28]
     580:	f88d 401e 	strb.w	r4, [sp, #30]
		get_date_time(currentDateTime);
     584:	f7ff ff92 	bl	4ac <get_date_time>
        printk("%02d:%02d:%02d %02d/%02d/%02d\n",
     588:	f89d 301e 	ldrb.w	r3, [sp, #30]
     58c:	4628      	mov	r0, r5
     58e:	9302      	str	r3, [sp, #8]
     590:	f89d 301d 	ldrb.w	r3, [sp, #29]
     594:	f89d 2019 	ldrb.w	r2, [sp, #25]
     598:	9301      	str	r3, [sp, #4]
     59a:	f89d 301c 	ldrb.w	r3, [sp, #28]
     59e:	f89d 101a 	ldrb.w	r1, [sp, #26]
     5a2:	9300      	str	r3, [sp, #0]
     5a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
     5a8:	f005 f996 	bl	58d8 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     5ac:	2100      	movs	r1, #0
     5ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     5b2:	f004 fe0b 	bl	51cc <z_impl_k_sleep>
	while (1) {
     5b6:	e7df      	b.n	578 <main+0x44>
     5b8:	00006814 	.word	0x00006814
     5bc:	00006dab 	.word	0x00006dab
     5c0:	00006dc6 	.word	0x00006dc6

000005c4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     5c4:	4b01      	ldr	r3, [pc, #4]	; (5cc <char_out+0x8>)
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	4718      	bx	r3
     5ca:	bf00      	nop
     5cc:	20000000 	.word	0x20000000

000005d0 <__printk_hook_install>:
	_char_out = fn;
     5d0:	4b01      	ldr	r3, [pc, #4]	; (5d8 <__printk_hook_install+0x8>)
     5d2:	6018      	str	r0, [r3, #0]
}
     5d4:	4770      	bx	lr
     5d6:	bf00      	nop
     5d8:	20000000 	.word	0x20000000

000005dc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     5dc:	b507      	push	{r0, r1, r2, lr}
     5de:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     5e0:	2100      	movs	r1, #0
     5e2:	4602      	mov	r2, r0
     5e4:	9100      	str	r1, [sp, #0]
     5e6:	4803      	ldr	r0, [pc, #12]	; (5f4 <vprintk+0x18>)
     5e8:	f000 f914 	bl	814 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     5ec:	b003      	add	sp, #12
     5ee:	f85d fb04 	ldr.w	pc, [sp], #4
     5f2:	bf00      	nop
     5f4:	000005c5 	.word	0x000005c5

000005f8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5fc:	8b05      	ldrh	r5, [r0, #24]
{
     5fe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     600:	0728      	lsls	r0, r5, #28
{
     602:	4690      	mov	r8, r2
	if (processing) {
     604:	d411      	bmi.n	62a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     606:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     608:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     60c:	f040 80cd 	bne.w	7aa <process_event+0x1b2>
			evt = process_recheck(mgr);
     610:	4620      	mov	r0, r4
     612:	f005 f978 	bl	5906 <process_recheck>
		}

		if (evt == EVT_NOP) {
     616:	b178      	cbz	r0, 638 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     618:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     61a:	8b21      	ldrh	r1, [r4, #24]
     61c:	2804      	cmp	r0, #4
     61e:	d811      	bhi.n	644 <process_event+0x4c>
     620:	e8df f000 	tbb	[pc, r0]
     624:	856d10c3 	.word	0x856d10c3
     628:	95          	.byte	0x95
     629:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     62a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     62c:	bf0c      	ite	eq
     62e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     632:	f045 0520 	orrne.w	r5, r5, #32
     636:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     638:	f388 8811 	msr	BASEPRI, r8
     63c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     644:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     648:	45aa      	cmp	sl, r5
     64a:	f000 80a6 	beq.w	79a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     64e:	2700      	movs	r7, #0
     650:	46b9      	mov	r9, r7
     652:	463e      	mov	r6, r7
     654:	68a3      	ldr	r3, [r4, #8]
     656:	2b00      	cmp	r3, #0
     658:	f000 80bd 	beq.w	7d6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     65c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     660:	8321      	strh	r1, [r4, #24]
     662:	f388 8811 	msr	BASEPRI, r8
     666:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     66a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     66c:	2900      	cmp	r1, #0
     66e:	f000 80bb 	beq.w	7e8 <process_event+0x1f0>
	return node->next;
     672:	680d      	ldr	r5, [r1, #0]
     674:	2900      	cmp	r1, #0
     676:	f000 80b7 	beq.w	7e8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     67a:	4633      	mov	r3, r6
     67c:	4652      	mov	r2, sl
     67e:	4620      	mov	r0, r4
     680:	f8d1 8004 	ldr.w	r8, [r1, #4]
     684:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     686:	2d00      	cmp	r5, #0
     688:	d076      	beq.n	778 <process_event+0x180>
     68a:	682b      	ldr	r3, [r5, #0]
     68c:	4629      	mov	r1, r5
     68e:	461d      	mov	r5, r3
     690:	e7f0      	b.n	674 <process_event+0x7c>
     692:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     696:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     698:	2a01      	cmp	r2, #1
     69a:	d81b      	bhi.n	6d4 <process_event+0xdc>
	list->head = NULL;
     69c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     69e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     6a2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     6a4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a6:	b289      	uxth	r1, r1
	list->tail = NULL;
     6a8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     6ac:	d109      	bne.n	6c2 <process_event+0xca>
     6ae:	463b      	mov	r3, r7
     6b0:	e003      	b.n	6ba <process_event+0xc2>
				mgr->refs += 1U;
     6b2:	8b62      	ldrh	r2, [r4, #26]
     6b4:	3201      	adds	r2, #1
     6b6:	8362      	strh	r2, [r4, #26]
	return node->next;
     6b8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6ba:	2b00      	cmp	r3, #0
     6bc:	d1f9      	bne.n	6b2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6be:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     6c2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6c4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6c6:	f005 f91e 	bl	5906 <process_recheck>
     6ca:	2800      	cmp	r0, #0
     6cc:	d07b      	beq.n	7c6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6ce:	f041 0120 	orr.w	r1, r1, #32
     6d2:	e077      	b.n	7c4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     6d4:	2b04      	cmp	r3, #4
     6d6:	d10a      	bne.n	6ee <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d8:	f021 0107 	bic.w	r1, r1, #7
     6dc:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     6de:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6e2:	f005 f910 	bl	5906 <process_recheck>
     6e6:	b110      	cbz	r0, 6ee <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6e8:	f041 0120 	orr.w	r1, r1, #32
     6ec:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6ee:	8b21      	ldrh	r1, [r4, #24]
     6f0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     6f4:	45aa      	cmp	sl, r5
     6f6:	d050      	beq.n	79a <process_event+0x1a2>
     6f8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     6fa:	46b9      	mov	r9, r7
     6fc:	e7aa      	b.n	654 <process_event+0x5c>
			transit = mgr->transitions->start;
     6fe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     700:	f021 0107 	bic.w	r1, r1, #7
     704:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     708:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     70a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     70e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     710:	d12d      	bne.n	76e <process_event+0x176>
		    || (transit != NULL)) {
     712:	f1b9 0f00 	cmp.w	r9, #0
     716:	d040      	beq.n	79a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     718:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     71c:	8321      	strh	r1, [r4, #24]
     71e:	f388 8811 	msr	BASEPRI, r8
     722:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     726:	4620      	mov	r0, r4
     728:	4939      	ldr	r1, [pc, #228]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     72a:	47c8      	blx	r9
     72c:	e029      	b.n	782 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     72e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     732:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     734:	f041 0104 	orr.w	r1, r1, #4
     738:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     73a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     73c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     740:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     742:	d0e6      	beq.n	712 <process_event+0x11a>
     744:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     746:	f04f 0a04 	mov.w	sl, #4
		res = 0;
     74a:	463e      	mov	r6, r7
     74c:	e782      	b.n	654 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     74e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     752:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     754:	f041 0105 	orr.w	r1, r1, #5
     758:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     75a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     75c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     760:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     762:	d0d6      	beq.n	712 <process_event+0x11a>
     764:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     766:	f04f 0a05 	mov.w	sl, #5
		res = 0;
     76a:	463e      	mov	r6, r7
     76c:	e772      	b.n	654 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     76e:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     770:	f04f 0a06 	mov.w	sl, #6
		res = 0;
     774:	463e      	mov	r6, r7
     776:	e76d      	b.n	654 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     778:	462b      	mov	r3, r5
     77a:	e787      	b.n	68c <process_event+0x94>
			if (transit != NULL) {
     77c:	f1b9 0f00 	cmp.w	r9, #0
     780:	d1d1      	bne.n	726 <process_event+0x12e>
	__asm__ volatile(
     782:	f04f 0320 	mov.w	r3, #32
     786:	f3ef 8811 	mrs	r8, BASEPRI
     78a:	f383 8812 	msr	BASEPRI_MAX, r3
     78e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     792:	8b23      	ldrh	r3, [r4, #24]
     794:	f023 0308 	bic.w	r3, r3, #8
     798:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     79a:	8b25      	ldrh	r5, [r4, #24]
     79c:	06ea      	lsls	r2, r5, #27
     79e:	d52e      	bpl.n	7fe <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     7a0:	f025 0310 	bic.w	r3, r5, #16
     7a4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     7a6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     7aa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7ac:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     7ae:	2e00      	cmp	r6, #0
     7b0:	f6bf af6f 	bge.w	692 <process_event+0x9a>
	list->head = NULL;
     7b4:	2300      	movs	r3, #0
		*clients = mgr->clients;
     7b6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     7b8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7bc:	f021 0107 	bic.w	r1, r1, #7
     7c0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     7c4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     7c6:	8b21      	ldrh	r1, [r4, #24]
     7c8:	f04f 0900 	mov.w	r9, #0
     7cc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     7d0:	45aa      	cmp	sl, r5
     7d2:	f47f af3f 	bne.w	654 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     7d6:	2f00      	cmp	r7, #0
     7d8:	d09b      	beq.n	712 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     7da:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     7de:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     7e0:	f388 8811 	msr	BASEPRI, r8
     7e4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     7e8:	2f00      	cmp	r7, #0
     7ea:	d0c7      	beq.n	77c <process_event+0x184>
	return node->next;
     7ec:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     7ee:	4639      	mov	r1, r7
     7f0:	4633      	mov	r3, r6
     7f2:	4652      	mov	r2, sl
     7f4:	4620      	mov	r0, r4
     7f6:	f005 f8b2 	bl	595e <notify_one>
	list->head = node;
     7fa:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     7fc:	e7f4      	b.n	7e8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     7fe:	06ab      	lsls	r3, r5, #26
     800:	f57f af1a 	bpl.w	638 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     804:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     808:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     80a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     80e:	e6ff      	b.n	610 <process_event+0x18>
     810:	0000598b 	.word	0x0000598b

00000814 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     818:	4682      	mov	sl, r0
     81a:	4616      	mov	r6, r2
     81c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     81e:	2500      	movs	r5, #0
{
     820:	b09f      	sub	sp, #124	; 0x7c
     822:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     824:	7830      	ldrb	r0, [r6, #0]
     826:	b910      	cbnz	r0, 82e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     828:	4628      	mov	r0, r5
     82a:	f000 bd89 	b.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
			OUTC(*fp++);
     82e:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
     830:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     832:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
     834:	d006      	beq.n	844 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     836:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
     838:	47d0      	blx	sl
     83a:	2800      	cmp	r0, #0
     83c:	f2c0 8580 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
     840:	3501      	adds	r5, #1
		if (bps == NULL) {
     842:	e22b      	b.n	c9c <z_cbvprintf_impl+0x488>
		} state = {
     844:	2218      	movs	r2, #24
     846:	2100      	movs	r1, #0
     848:	a810      	add	r0, sp, #64	; 0x40
     84a:	f005 fa2c 	bl	5ca6 <memset>
	if (*sp == '%') {
     84e:	7873      	ldrb	r3, [r6, #1]
     850:	2b25      	cmp	r3, #37	; 0x25
     852:	d07d      	beq.n	950 <z_cbvprintf_impl+0x13c>
     854:	2300      	movs	r3, #0
     856:	4698      	mov	r8, r3
     858:	469e      	mov	lr, r3
     85a:	469c      	mov	ip, r3
     85c:	461f      	mov	r7, r3
     85e:	1c70      	adds	r0, r6, #1
     860:	4601      	mov	r1, r0
		switch (*sp) {
     862:	f810 2b01 	ldrb.w	r2, [r0], #1
     866:	2a2b      	cmp	r2, #43	; 0x2b
     868:	f000 80a1 	beq.w	9ae <z_cbvprintf_impl+0x19a>
     86c:	f200 8098 	bhi.w	9a0 <z_cbvprintf_impl+0x18c>
     870:	2a20      	cmp	r2, #32
     872:	f000 809f 	beq.w	9b4 <z_cbvprintf_impl+0x1a0>
     876:	2a23      	cmp	r2, #35	; 0x23
     878:	f000 809f 	beq.w	9ba <z_cbvprintf_impl+0x1a6>
     87c:	b12b      	cbz	r3, 88a <z_cbvprintf_impl+0x76>
     87e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     886:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     88a:	f1b8 0f00 	cmp.w	r8, #0
     88e:	d005      	beq.n	89c <z_cbvprintf_impl+0x88>
     890:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     894:	f043 0320 	orr.w	r3, r3, #32
     898:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     89c:	f1be 0f00 	cmp.w	lr, #0
     8a0:	d005      	beq.n	8ae <z_cbvprintf_impl+0x9a>
     8a2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     8a6:	f043 0310 	orr.w	r3, r3, #16
     8aa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     8ae:	f1bc 0f00 	cmp.w	ip, #0
     8b2:	d005      	beq.n	8c0 <z_cbvprintf_impl+0xac>
     8b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     8b8:	f043 0308 	orr.w	r3, r3, #8
     8bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     8c0:	b12f      	cbz	r7, 8ce <z_cbvprintf_impl+0xba>
     8c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     8c6:	f043 0304 	orr.w	r3, r3, #4
     8ca:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
     8ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     8d2:	f003 0044 	and.w	r0, r3, #68	; 0x44
     8d6:	2844      	cmp	r0, #68	; 0x44
     8d8:	d103      	bne.n	8e2 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
     8da:	f36f 1386 	bfc	r3, #6, #1
     8de:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
     8e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     8e6:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     8ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     8f0:	d17f      	bne.n	9f2 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
     8f2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
     8f6:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     8f8:	f042 0201 	orr.w	r2, r2, #1
     8fc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
     900:	781a      	ldrb	r2, [r3, #0]
     902:	2a2e      	cmp	r2, #46	; 0x2e
     904:	bf0c      	ite	eq
     906:	2101      	moveq	r1, #1
     908:	2100      	movne	r1, #0
     90a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     90e:	f361 0241 	bfi	r2, r1, #1, #1
     912:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
     916:	d178      	bne.n	a0a <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
     918:	785a      	ldrb	r2, [r3, #1]
     91a:	2a2a      	cmp	r2, #42	; 0x2a
     91c:	d06e      	beq.n	9fc <z_cbvprintf_impl+0x1e8>
	size_t val = 0;
     91e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     920:	f04f 0c0a 	mov.w	ip, #10
	++sp;
     924:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     926:	4619      	mov	r1, r3
     928:	f811 0b01 	ldrb.w	r0, [r1], #1
     92c:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     930:	2f09      	cmp	r7, #9
     932:	f240 80af 	bls.w	a94 <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
     936:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
     93a:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
     93c:	f3c1 0040 	ubfx	r0, r1, #1, #1
     940:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     944:	460a      	mov	r2, r1
     946:	f360 0241 	bfi	r2, r0, #1, #1
     94a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     94e:	e05c      	b.n	a0a <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
     950:	1cb2      	adds	r2, r6, #2
     952:	9206      	str	r2, [sp, #24]
     954:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
     958:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     95c:	07df      	lsls	r7, r3, #31
     95e:	f140 8154 	bpl.w	c0a <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
     962:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
     966:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
     968:	9204      	str	r2, [sp, #16]
			if (width < 0) {
     96a:	da08      	bge.n	97e <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
     96c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     970:	f042 0204 	orr.w	r2, r2, #4
     974:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
     978:	9a04      	ldr	r2, [sp, #16]
     97a:	4252      	negs	r2, r2
		int width = -1;
     97c:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
     97e:	0758      	lsls	r0, r3, #29
     980:	f140 814b 	bpl.w	c1a <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
     984:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
     988:	2f00      	cmp	r7, #0
     98a:	f280 814a 	bge.w	c22 <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
     98e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     992:	f36f 0341 	bfc	r3, #1, #1
     996:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
     99a:	f04f 37ff 	mov.w	r7, #4294967295
     99e:	e140      	b.n	c22 <z_cbvprintf_impl+0x40e>
		switch (*sp) {
     9a0:	2a2d      	cmp	r2, #45	; 0x2d
     9a2:	d00d      	beq.n	9c0 <z_cbvprintf_impl+0x1ac>
     9a4:	2a30      	cmp	r2, #48	; 0x30
     9a6:	f47f af69 	bne.w	87c <z_cbvprintf_impl+0x68>
     9aa:	2301      	movs	r3, #1
	} while (loop);
     9ac:	e758      	b.n	860 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
     9ae:	f04f 0c01 	mov.w	ip, #1
     9b2:	e755      	b.n	860 <z_cbvprintf_impl+0x4c>
     9b4:	f04f 0e01 	mov.w	lr, #1
     9b8:	e752      	b.n	860 <z_cbvprintf_impl+0x4c>
     9ba:	f04f 0801 	mov.w	r8, #1
     9be:	e74f      	b.n	860 <z_cbvprintf_impl+0x4c>
     9c0:	2701      	movs	r7, #1
     9c2:	e74d      	b.n	860 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
     9c4:	4603      	mov	r3, r0
     9c6:	fb0e 7202 	mla	r2, lr, r2, r7
     9ca:	3a30      	subs	r2, #48	; 0x30
     9cc:	4618      	mov	r0, r3
     9ce:	f810 7b01 	ldrb.w	r7, [r0], #1
     9d2:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     9d6:	f1bc 0f09 	cmp.w	ip, #9
     9da:	d9f3      	bls.n	9c4 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
     9dc:	4299      	cmp	r1, r3
     9de:	d08f      	beq.n	900 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
     9e0:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
     9e4:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
     9e6:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     9e8:	f362 0141 	bfi	r1, r2, #1, #1
     9ec:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
     9f0:	e786      	b.n	900 <z_cbvprintf_impl+0xec>
     9f2:	460b      	mov	r3, r1
	size_t val = 0;
     9f4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     9f6:	f04f 0e0a 	mov.w	lr, #10
     9fa:	e7e7      	b.n	9cc <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
     9fc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
     a00:	3302      	adds	r3, #2
		conv->prec_star = true;
     a02:	f042 0204 	orr.w	r2, r2, #4
     a06:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
     a0a:	781a      	ldrb	r2, [r3, #0]
     a0c:	2a6c      	cmp	r2, #108	; 0x6c
     a0e:	d061      	beq.n	ad4 <z_cbvprintf_impl+0x2c0>
     a10:	d845      	bhi.n	a9e <z_cbvprintf_impl+0x28a>
     a12:	2a68      	cmp	r2, #104	; 0x68
     a14:	d04b      	beq.n	aae <z_cbvprintf_impl+0x29a>
     a16:	2a6a      	cmp	r2, #106	; 0x6a
     a18:	d065      	beq.n	ae6 <z_cbvprintf_impl+0x2d2>
     a1a:	2a4c      	cmp	r2, #76	; 0x4c
     a1c:	d06b      	beq.n	af6 <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
     a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
     a22:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     a24:	9306      	str	r3, [sp, #24]
     a26:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
     a2a:	f200 80ad 	bhi.w	b88 <z_cbvprintf_impl+0x374>
     a2e:	2a6d      	cmp	r2, #109	; 0x6d
     a30:	d86e      	bhi.n	b10 <z_cbvprintf_impl+0x2fc>
     a32:	2a69      	cmp	r2, #105	; 0x69
     a34:	f200 80a8 	bhi.w	b88 <z_cbvprintf_impl+0x374>
     a38:	2a57      	cmp	r2, #87	; 0x57
     a3a:	f200 8088 	bhi.w	b4e <z_cbvprintf_impl+0x33a>
     a3e:	2a41      	cmp	r2, #65	; 0x41
     a40:	d004      	beq.n	a4c <z_cbvprintf_impl+0x238>
     a42:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
     a46:	2b02      	cmp	r3, #2
     a48:	f200 809e 	bhi.w	b88 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
     a4c:	2104      	movs	r1, #4
     a4e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
     a52:	f002 02df 	and.w	r2, r2, #223	; 0xdf
     a56:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
     a5a:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
     a5e:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
     a62:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
     a66:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
     a6a:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
     a6e:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
     a70:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		conv->specifier_a = (conv->specifier == 'a')
     a74:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
     a78:	b2cb      	uxtb	r3, r1
     a7a:	f100 80c4 	bmi.w	c06 <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
     a7e:	f003 0278 	and.w	r2, r3, #120	; 0x78
     a82:	2a18      	cmp	r2, #24
     a84:	f040 80ae 	bne.w	be4 <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
     a88:	f36f 03c6 	bfc	r3, #3, #4
     a8c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
     a90:	2300      	movs	r3, #0
     a92:	e09d      	b.n	bd0 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
     a94:	fb0c 0202 	mla	r2, ip, r2, r0
     a98:	460b      	mov	r3, r1
     a9a:	3a30      	subs	r2, #48	; 0x30
     a9c:	e743      	b.n	926 <z_cbvprintf_impl+0x112>
	switch (*sp) {
     a9e:	2a74      	cmp	r2, #116	; 0x74
     aa0:	d025      	beq.n	aee <z_cbvprintf_impl+0x2da>
     aa2:	2a7a      	cmp	r2, #122	; 0x7a
     aa4:	d1bb      	bne.n	a1e <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
     aa6:	2106      	movs	r1, #6
     aa8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     aac:	e00c      	b.n	ac8 <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
     aae:	785a      	ldrb	r2, [r3, #1]
     ab0:	2a68      	cmp	r2, #104	; 0x68
     ab2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     ab6:	d106      	bne.n	ac6 <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
     ab8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     aba:	f361 02c6 	bfi	r2, r1, #3, #4
     abe:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
     ac2:	3302      	adds	r3, #2
     ac4:	e7ab      	b.n	a1e <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
     ac6:	2102      	movs	r1, #2
     ac8:	f361 02c6 	bfi	r2, r1, #3, #4
     acc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
     ad0:	3301      	adds	r3, #1
     ad2:	e7a4      	b.n	a1e <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
     ad4:	785a      	ldrb	r2, [r3, #1]
     ad6:	2a6c      	cmp	r2, #108	; 0x6c
     ad8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     adc:	d101      	bne.n	ae2 <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
     ade:	2104      	movs	r1, #4
     ae0:	e7eb      	b.n	aba <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
     ae2:	2103      	movs	r1, #3
     ae4:	e7f0      	b.n	ac8 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
     ae6:	2105      	movs	r1, #5
     ae8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     aec:	e7ec      	b.n	ac8 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
     aee:	2107      	movs	r1, #7
     af0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     af4:	e7e8      	b.n	ac8 <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
     af6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
     afa:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     afe:	f022 0202 	bic.w	r2, r2, #2
     b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     b06:	f042 0202 	orr.w	r2, r2, #2
     b0a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
     b0e:	e7df      	b.n	ad0 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
     b10:	3a6e      	subs	r2, #110	; 0x6e
     b12:	b2d3      	uxtb	r3, r2
     b14:	2201      	movs	r2, #1
     b16:	409a      	lsls	r2, r3
     b18:	f240 4382 	movw	r3, #1154	; 0x482
     b1c:	421a      	tst	r2, r3
     b1e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     b22:	d138      	bne.n	b96 <z_cbvprintf_impl+0x382>
     b24:	f012 0f24 	tst.w	r2, #36	; 0x24
     b28:	d160      	bne.n	bec <z_cbvprintf_impl+0x3d8>
     b2a:	07d1      	lsls	r1, r2, #31
     b2c:	d52c      	bpl.n	b88 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
     b2e:	2103      	movs	r1, #3
     b30:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     b34:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b38:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     b3c:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b40:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
     b44:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     b48:	eb43 030c 	adc.w	r3, r3, ip
     b4c:	e040      	b.n	bd0 <z_cbvprintf_impl+0x3bc>
     b4e:	2001      	movs	r0, #1
	switch (conv->specifier) {
     b50:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     b54:	b2c9      	uxtb	r1, r1
     b56:	fa00 f101 	lsl.w	r1, r0, r1
     b5a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     b5e:	f47f af75 	bne.w	a4c <z_cbvprintf_impl+0x238>
     b62:	f640 0301 	movw	r3, #2049	; 0x801
     b66:	4219      	tst	r1, r3
     b68:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     b6c:	d119      	bne.n	ba2 <z_cbvprintf_impl+0x38e>
     b6e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     b72:	d009      	beq.n	b88 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
     b74:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     b78:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b7c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b80:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     b82:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     b86:	d183      	bne.n	a90 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
     b88:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     b8c:	f043 0301 	orr.w	r3, r3, #1
     b90:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
     b94:	e77c      	b.n	a90 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
     b96:	2102      	movs	r1, #2
     b98:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     b9c:	f361 0202 	bfi	r2, r1, #0, #3
     ba0:	e7ec      	b.n	b7c <z_cbvprintf_impl+0x368>
     ba2:	2002      	movs	r0, #2
     ba4:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     ba8:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     bac:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     bb0:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     bb2:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
     bb6:	bf02      	ittt	eq
     bb8:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
     bbc:	f041 0101 	orreq.w	r1, r1, #1
     bc0:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
     bc4:	2a63      	cmp	r2, #99	; 0x63
     bc6:	f47f af63 	bne.w	a90 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
     bca:	3b00      	subs	r3, #0
     bcc:	bf18      	it	ne
     bce:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     bd0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     bd4:	f3c2 0140 	ubfx	r1, r2, #1, #1
     bd8:	430b      	orrs	r3, r1
     bda:	f363 0241 	bfi	r2, r3, #1, #1
     bde:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     be2:	e6b9      	b.n	958 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
     be4:	f013 0f38 	tst.w	r3, #56	; 0x38
     be8:	d1ce      	bne.n	b88 <z_cbvprintf_impl+0x374>
     bea:	e751      	b.n	a90 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
     bec:	2103      	movs	r1, #3
     bee:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     bf2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     bf6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     bfa:	bf14      	ite	ne
     bfc:	2301      	movne	r3, #1
     bfe:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     c00:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     c04:	e7e4      	b.n	bd0 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
     c06:	2301      	movs	r3, #1
     c08:	e7e2      	b.n	bd0 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
     c0a:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
     c0e:	2a00      	cmp	r2, #0
		int width = -1;
     c10:	bfac      	ite	ge
     c12:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
     c16:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
     c18:	e6b0      	b.n	97c <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
     c1a:	0799      	lsls	r1, r3, #30
     c1c:	f57f aebd 	bpl.w	99a <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
     c20:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
     c22:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     c24:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
     c28:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     c2c:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
     c30:	f003 0207 	and.w	r2, r3, #7
     c34:	2a04      	cmp	r2, #4
     c36:	d107      	bne.n	c48 <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
     c38:	078a      	lsls	r2, r1, #30
     c3a:	d405      	bmi.n	c48 <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
     c3c:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
     c40:	2a00      	cmp	r2, #0
     c42:	bfac      	ite	ge
     c44:	2706      	movge	r7, #6
     c46:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
     c48:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     c4c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     c4e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     c52:	d133      	bne.n	cbc <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
     c54:	1ecb      	subs	r3, r1, #3
     c56:	2b04      	cmp	r3, #4
     c58:	d804      	bhi.n	c64 <z_cbvprintf_impl+0x450>
     c5a:	e8df f003 	tbb	[pc, r3]
     c5e:	4621      	.short	0x4621
     c60:	2146      	.short	0x2146
     c62:	21          	.byte	0x21
     c63:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     c64:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     c66:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     c68:	ea4f 72e3 	mov.w	r2, r3, asr #31
     c6c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     c70:	d11c      	bne.n	cac <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
     c72:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
     c76:	17da      	asrs	r2, r3, #31
     c78:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
     c7c:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     c7e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     c82:	9307      	str	r3, [sp, #28]
     c84:	079b      	lsls	r3, r3, #30
     c86:	d050      	beq.n	d2a <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
     c88:	4632      	mov	r2, r6
     c8a:	4650      	mov	r0, sl
     c8c:	9b06      	ldr	r3, [sp, #24]
     c8e:	9903      	ldr	r1, [sp, #12]
     c90:	f004 ff87 	bl	5ba2 <outs>
     c94:	2800      	cmp	r0, #0
     c96:	f2c0 8353 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
     c9a:	4405      	add	r5, r0
			continue;
     c9c:	9e06      	ldr	r6, [sp, #24]
     c9e:	e5c1      	b.n	824 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ca0:	f854 3b04 	ldr.w	r3, [r4], #4
     ca4:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     ca6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
     caa:	e7e8      	b.n	c7e <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
     cac:	2902      	cmp	r1, #2
     cae:	d1e5      	bne.n	c7c <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
     cb0:	b21a      	sxth	r2, r3
     cb2:	f343 33c0 	sbfx	r3, r3, #15, #1
     cb6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     cba:	e7df      	b.n	c7c <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
     cbc:	2b02      	cmp	r3, #2
     cbe:	d124      	bne.n	d0a <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
     cc0:	1ecb      	subs	r3, r1, #3
     cc2:	2b04      	cmp	r3, #4
     cc4:	d804      	bhi.n	cd0 <z_cbvprintf_impl+0x4bc>
     cc6:	e8df f003 	tbb	[pc, r3]
     cca:	1018      	.short	0x1018
     ccc:	1810      	.short	0x1810
     cce:	18          	.byte	0x18
     ccf:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     cd0:	2901      	cmp	r1, #1
     cd2:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
     cd6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     cda:	d014      	beq.n	d06 <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
     cdc:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     cde:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
     ce2:	d1cc      	bne.n	c7e <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
     ce4:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     ce6:	9310      	str	r3, [sp, #64]	; 0x40
     ce8:	e7c9      	b.n	c7e <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
     cea:	3407      	adds	r4, #7
     cec:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     cf0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     cf4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     cf8:	e7c1      	b.n	c7e <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
     cfa:	f854 3b04 	ldr.w	r3, [r4], #4
     cfe:	9310      	str	r3, [sp, #64]	; 0x40
     d00:	2300      	movs	r3, #0
     d02:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
     d04:	e7bb      	b.n	c7e <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
     d06:	b2db      	uxtb	r3, r3
     d08:	e7cd      	b.n	ca6 <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
     d0a:	2b04      	cmp	r3, #4
     d0c:	d108      	bne.n	d20 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
     d0e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     d10:	f024 0407 	bic.w	r4, r4, #7
     d14:	e9d4 2300 	ldrd	r2, r3, [r4]
     d18:	3408      	adds	r4, #8
     d1a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
     d1e:	e7ae      	b.n	c7e <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     d20:	2b03      	cmp	r3, #3
     d22:	d1ac      	bne.n	c7e <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
     d24:	f854 3b04 	ldr.w	r3, [r4], #4
     d28:	e7dd      	b.n	ce6 <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
     d2a:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
     d2e:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
     d32:	d8b3      	bhi.n	c9c <z_cbvprintf_impl+0x488>
     d34:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
     d38:	d849      	bhi.n	dce <z_cbvprintf_impl+0x5ba>
     d3a:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
     d3e:	f000 8091 	beq.w	e64 <z_cbvprintf_impl+0x650>
     d42:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
     d46:	d9a9      	bls.n	c9c <z_cbvprintf_impl+0x488>
     d48:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
     d4c:	d003      	beq.n	d56 <z_cbvprintf_impl+0x542>
     d4e:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
     d52:	2a02      	cmp	r2, #2
     d54:	d8a2      	bhi.n	c9c <z_cbvprintf_impl+0x488>
	} u = {
     d56:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
     d5a:	2a00      	cmp	r2, #0
     d5c:	f2c0 8136 	blt.w	fcc <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
     d60:	9b07      	ldr	r3, [sp, #28]
     d62:	0718      	lsls	r0, r3, #28
     d64:	f100 8135 	bmi.w	fd2 <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
     d68:	f3c3 1900 	ubfx	r9, r3, #4, #1
     d6c:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     d70:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
     d74:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
     d78:	2800      	cmp	r0, #0
     d7a:	f040 812d 	bne.w	fd8 <z_cbvprintf_impl+0x7c4>
     d7e:	ea51 0602 	orrs.w	r6, r1, r2
     d82:	bf14      	ite	ne
     d84:	2601      	movne	r6, #1
     d86:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
     d88:	02d2      	lsls	r2, r2, #11
     d8a:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
     d8e:	02c9      	lsls	r1, r1, #11
		c = 'f';
     d90:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
     d94:	ea40 0e01 	orr.w	lr, r0, r1
     d98:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
     d9c:	bf08      	it	eq
     d9e:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
     da2:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
     da6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
     daa:	f000 8198 	beq.w	10de <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xde>
		if (is_subnormal) {
     dae:	2e00      	cmp	r6, #0
     db0:	f040 8144 	bne.w	103c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3c>
		fract |= BIT_63;
     db4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
     db6:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
     dba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     dbe:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     dc0:	2000      	movs	r0, #0
     dc2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
     dc6:	4606      	mov	r6, r0
		fract *= 5U;
     dc8:	f04f 0c05 	mov.w	ip, #5
     dcc:	e150      	b.n	1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>
		switch (conv->specifier) {
     dce:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
     dd2:	2a20      	cmp	r2, #32
     dd4:	f63f af62 	bhi.w	c9c <z_cbvprintf_impl+0x488>
     dd8:	a001      	add	r0, pc, #4	; (adr r0, de0 <z_cbvprintf_impl+0x5cc>)
     dda:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
     dde:	bf00      	nop
     de0:	00000f6b 	.word	0x00000f6b
     de4:	00000c9d 	.word	0x00000c9d
     de8:	00000c9d 	.word	0x00000c9d
     dec:	00000c9d 	.word	0x00000c9d
     df0:	00000c9d 	.word	0x00000c9d
     df4:	00000c9d 	.word	0x00000c9d
     df8:	00000c9d 	.word	0x00000c9d
     dfc:	00000c9d 	.word	0x00000c9d
     e00:	00000c9d 	.word	0x00000c9d
     e04:	00000d57 	.word	0x00000d57
     e08:	00000c9d 	.word	0x00000c9d
     e0c:	00000eef 	.word	0x00000eef
     e10:	00000f03 	.word	0x00000f03
     e14:	00000d57 	.word	0x00000d57
     e18:	00000d57 	.word	0x00000d57
     e1c:	00000d57 	.word	0x00000d57
     e20:	00000c9d 	.word	0x00000c9d
     e24:	00000f03 	.word	0x00000f03
     e28:	00000c9d 	.word	0x00000c9d
     e2c:	00000c9d 	.word	0x00000c9d
     e30:	00000c9d 	.word	0x00000c9d
     e34:	00000c9d 	.word	0x00000c9d
     e38:	00000fa5 	.word	0x00000fa5
     e3c:	00000f6b 	.word	0x00000f6b
     e40:	00000f71 	.word	0x00000f71
     e44:	00000c9d 	.word	0x00000c9d
     e48:	00000c9d 	.word	0x00000c9d
     e4c:	00000e6b 	.word	0x00000e6b
     e50:	00000c9d 	.word	0x00000c9d
     e54:	00000f6b 	.word	0x00000f6b
     e58:	00000c9d 	.word	0x00000c9d
     e5c:	00000c9d 	.word	0x00000c9d
     e60:	00000f6b 	.word	0x00000f6b
			OUTC('%');
     e64:	4658      	mov	r0, fp
     e66:	9903      	ldr	r1, [sp, #12]
     e68:	e4e6      	b.n	838 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
     e6a:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
     e6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
     e6e:	db3a      	blt.n	ee6 <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
     e70:	4639      	mov	r1, r7
     e72:	4630      	mov	r0, r6
     e74:	f004 ff03 	bl	5c7e <strnlen>
			bpe = bps + len;
     e78:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
     e7a:	2e00      	cmp	r6, #0
     e7c:	f43f af0e 	beq.w	c9c <z_cbvprintf_impl+0x488>
		char sign = 0;
     e80:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
     e84:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     e88:	f013 0210 	ands.w	r2, r3, #16
     e8c:	9205      	str	r2, [sp, #20]
     e8e:	f000 824c 	beq.w	132a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x32a>
			nj_len += 2U;
     e92:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     e94:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
     e98:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
     e9c:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
     e9e:	bf18      	it	ne
     ea0:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
     ea2:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
     ea4:	bf18      	it	ne
     ea6:	18c0      	addne	r0, r0, r3
		if (width > 0) {
     ea8:	9b04      	ldr	r3, [sp, #16]
		nj_len += conv->pad0_value;
     eaa:	f8cd 801c 	str.w	r8, [sp, #28]
		if (width > 0) {
     eae:	2b00      	cmp	r3, #0
     eb0:	f340 8256 	ble.w	1360 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x360>
			if (!conv->flag_dash) {
     eb4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
     eb8:	1a1b      	subs	r3, r3, r0
     eba:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
     ebc:	0753      	lsls	r3, r2, #29
     ebe:	f3c2 0b80 	ubfx	fp, r2, #2, #1
     ec2:	f100 824d 	bmi.w	1360 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x360>
				if (conv->flag_zero) {
     ec6:	0650      	lsls	r0, r2, #25
     ec8:	f140 823d 	bpl.w	1346 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x346>
					if (sign != 0) {
     ecc:	f1b9 0f00 	cmp.w	r9, #0
     ed0:	d007      	beq.n	ee2 <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
     ed2:	4648      	mov	r0, r9
     ed4:	9903      	ldr	r1, [sp, #12]
     ed6:	47d0      	blx	sl
     ed8:	2800      	cmp	r0, #0
     eda:	f2c0 8231 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
						sign = 0;
     ede:	46d9      	mov	r9, fp
						OUTC(sign);
     ee0:	3501      	adds	r5, #1
					pad = '0';
     ee2:	2230      	movs	r2, #48	; 0x30
     ee4:	e230      	b.n	1348 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x348>
				len = strlen(bps);
     ee6:	4630      	mov	r0, r6
     ee8:	f004 fec2 	bl	5c70 <strlen>
     eec:	e7c4      	b.n	e78 <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     eee:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
     ef0:	f04f 0900 	mov.w	r9, #0
		size_t nj_len = (bpe - bps);
     ef4:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ef6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			bpe = buf + 1;
     efa:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
     efe:	ae17      	add	r6, sp, #92	; 0x5c
     f00:	e7c0      	b.n	e84 <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
     f02:	9b07      	ldr	r3, [sp, #28]
     f04:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
     f06:	bf54      	ite	pl
     f08:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
     f0c:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
     f10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
     f14:	bf58      	it	pl
     f16:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
     f1a:	2b00      	cmp	r3, #0
     f1c:	da06      	bge.n	f2c <z_cbvprintf_impl+0x718>
				sign = '-';
     f1e:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     f22:	4252      	negs	r2, r2
     f24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f28:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
     f2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
     f30:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     f34:	9300      	str	r3, [sp, #0]
     f36:	aa12      	add	r2, sp, #72	; 0x48
     f38:	ab17      	add	r3, sp, #92	; 0x5c
     f3a:	f004 fdec 	bl	5b16 <encode_uint>
     f3e:	4606      	mov	r6, r0
			if (precision >= 0) {
     f40:	2f00      	cmp	r7, #0
     f42:	db0c      	blt.n	f5e <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
     f44:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
     f48:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     f4c:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
     f4e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     f52:	429f      	cmp	r7, r3
				conv->flag_zero = false;
     f54:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
     f58:	d901      	bls.n	f5e <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
     f5a:	1afb      	subs	r3, r7, r3
     f5c:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
     f5e:	2e00      	cmp	r6, #0
     f60:	f43f ae9c 	beq.w	c9c <z_cbvprintf_impl+0x488>
     f64:	f10d 0775 	add.w	r7, sp, #117	; 0x75
     f68:	e056      	b.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
		switch (conv->specifier) {
     f6a:	f04f 0900 	mov.w	r9, #0
     f6e:	e7dd      	b.n	f2c <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
     f70:	9810      	ldr	r0, [sp, #64]	; 0x40
     f72:	2800      	cmp	r0, #0
     f74:	f000 81d4 	beq.w	1320 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x320>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f78:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     f7c:	9300      	str	r3, [sp, #0]
     f7e:	2100      	movs	r1, #0
     f80:	ab17      	add	r3, sp, #92	; 0x5c
     f82:	aa12      	add	r2, sp, #72	; 0x48
     f84:	f004 fdc7 	bl	5b16 <encode_uint>
				conv->altform_0c = true;
     f88:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f8c:	4606      	mov	r6, r0
				conv->altform_0c = true;
     f8e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     f92:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     f96:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     f9a:	f04f 0900 	mov.w	r9, #0
				conv->altform_0c = true;
     f9e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
     fa2:	e7cd      	b.n	f40 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
     fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
     fa6:	2907      	cmp	r1, #7
     fa8:	f63f ae78 	bhi.w	c9c <z_cbvprintf_impl+0x488>
     fac:	e8df f001 	tbb	[pc, r1]
     fb0:	0c06040c 	.word	0x0c06040c
     fb4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     fb8:	701d      	strb	r5, [r3, #0]
		break;
     fba:	e66f      	b.n	c9c <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
     fbc:	801d      	strh	r5, [r3, #0]
		break;
     fbe:	e66d      	b.n	c9c <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
     fc0:	17ea      	asrs	r2, r5, #31
     fc2:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     fc6:	e669      	b.n	c9c <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     fc8:	601d      	str	r5, [r3, #0]
		break;
     fca:	e667      	b.n	c9c <z_cbvprintf_impl+0x488>
		*sign = '-';
     fcc:	f04f 092d 	mov.w	r9, #45	; 0x2d
     fd0:	e6ce      	b.n	d70 <z_cbvprintf_impl+0x55c>
		*sign = '+';
     fd2:	f04f 092b 	mov.w	r9, #43	; 0x2b
     fd6:	e6cb      	b.n	d70 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
     fd8:	f240 76ff 	movw	r6, #2047	; 0x7ff
     fdc:	42b0      	cmp	r0, r6
     fde:	d12a      	bne.n	1036 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x36>
		if (fract == 0) {
     fe0:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
     fe2:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
     fe6:	d11e      	bne.n	1026 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x26>
			if (isupper((unsigned char)c) != 0) {
     fe8:	2b1a      	cmp	r3, #26
     fea:	bf35      	itete	cc
     fec:	2349      	movcc	r3, #73	; 0x49
     fee:	2369      	movcs	r3, #105	; 0x69
     ff0:	214e      	movcc	r1, #78	; 0x4e
     ff2:	216e      	movcs	r1, #110	; 0x6e
     ff4:	bf34      	ite	cc
     ff6:	2246      	movcc	r2, #70	; 0x46
     ff8:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
     ffa:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
     ffe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    1002:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    1006:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    100a:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    100e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    1012:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    1016:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    1018:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    101a:	f1b9 0f00 	cmp.w	r9, #0
    101e:	f43f af31 	beq.w	e84 <z_cbvprintf_impl+0x670>
			nj_len += 1U;
    1022:	3001      	adds	r0, #1
    1024:	e72e      	b.n	e84 <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c) != 0) {
    1026:	2b19      	cmp	r3, #25
    1028:	bf8b      	itete	hi
    102a:	236e      	movhi	r3, #110	; 0x6e
    102c:	234e      	movls	r3, #78	; 0x4e
    102e:	2161      	movhi	r1, #97	; 0x61
    1030:	2141      	movls	r1, #65	; 0x41
    1032:	461a      	mov	r2, r3
    1034:	e7e1      	b.n	ffa <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    1036:	2600      	movs	r6, #0
    1038:	e6a6      	b.n	d88 <z_cbvprintf_impl+0x574>
				expo--;
    103a:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    103c:	1849      	adds	r1, r1, r1
    103e:	4152      	adcs	r2, r2
    1040:	2a00      	cmp	r2, #0
    1042:	dafa      	bge.n	103a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3a>
    1044:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    1048:	e6b4      	b.n	db4 <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
    104a:	0849      	lsrs	r1, r1, #1
    104c:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    1050:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1052:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    1056:	4640      	mov	r0, r8
			expo++;
    1058:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    105c:	d2f5      	bcs.n	104a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a>
		expo++;
    105e:	f100 0802 	add.w	r8, r0, #2
		decexp--;
    1062:	2001      	movs	r0, #1
		fract *= 5U;
    1064:	fb0c fe02 	mul.w	lr, ip, r2
    1068:	fba1 120c 	umull	r1, r2, r1, ip
		decexp--;
    106c:	3e01      	subs	r6, #1
		fract *= 5U;
    106e:	4472      	add	r2, lr
	while (expo < -2) {
    1070:	f118 0f02 	cmn.w	r8, #2
    1074:	dbe9      	blt.n	104a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a>
    1076:	b108      	cbz	r0, 107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>
    1078:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
		fract += 2;
    107c:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    1080:	f1b8 0f00 	cmp.w	r8, #0
    1084:	dc2e      	bgt.n	10e4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe4>
	fract >>= (4 - expo);
    1086:	f1c8 0004 	rsb	r0, r8, #4
    108a:	f108 081c 	add.w	r8, r8, #28
    108e:	f1a0 0c20 	sub.w	ip, r0, #32
    1092:	40c2      	lsrs	r2, r0
    1094:	fa21 f300 	lsr.w	r3, r1, r0
    1098:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    109c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    10a0:	ea42 0208 	orr.w	r2, r2, r8
    10a4:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    10a8:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    10aa:	ea42 020c 	orr.w	r2, r2, ip
    10ae:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    10b0:	d138      	bne.n	1124 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x124>
		if (decexp < (-4 + 1) || decexp > precision) {
    10b2:	1cf3      	adds	r3, r6, #3
    10b4:	db01      	blt.n	10ba <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xba>
    10b6:	42b7      	cmp	r7, r6
    10b8:	da2a      	bge.n	1110 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x110>
			c += 'e' - 'g';  /* e or E */
    10ba:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    10be:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    10c0:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    10c4:	dd7d      	ble.n	11c2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c2>
		if (!conv->flag_hash && (precision > 0)) {
    10c6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
    10ca:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    10cc:	0680      	lsls	r0, r0, #26
    10ce:	d478      	bmi.n	11c2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c2>
    10d0:	1e3b      	subs	r3, r7, #0
    10d2:	bf18      	it	ne
    10d4:	2301      	movne	r3, #1
	bool prune_zero = false;
    10d6:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    10d8:	f107 0801 	add.w	r8, r7, #1
    10dc:	e02c      	b.n	1138 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x138>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    10de:	f04f 0800 	mov.w	r8, #0
    10e2:	e66d      	b.n	dc0 <z_cbvprintf_impl+0x5ac>
		fract += 2;
    10e4:	3202      	adds	r2, #2
    10e6:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    10ea:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
    10ec:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    10f0:	3601      	adds	r6, #1
		fract += 2;
    10f2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    10f6:	f004 fcdf 	bl	5ab8 <_ldiv5>
		decexp++;
    10fa:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
			fract <<= 1;
    10fe:	1892      	adds	r2, r2, r2
    1100:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    1102:	2900      	cmp	r1, #0
			expo--;
    1104:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
    1108:	daf9      	bge.n	10fe <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xfe>
    110a:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    110e:	e7b5      	b.n	107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>
		if (!conv->flag_hash && (precision > 0)) {
    1110:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
			precision -= decexp;
    1114:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    1116:	0699      	lsls	r1, r3, #26
    1118:	d451      	bmi.n	11be <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1be>
    111a:	1e3b      	subs	r3, r7, #0
    111c:	bf18      	it	ne
    111e:	2301      	movne	r3, #1
	bool prune_zero = false;
    1120:	9305      	str	r3, [sp, #20]
    1122:	e004      	b.n	112e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12e>
    1124:	2300      	movs	r3, #0
	if (c == 'f') {
    1126:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    112a:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    112c:	d1d4      	bne.n	10d8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xd8>
		if (decimals < 0) {
    112e:	eb17 0806 	adds.w	r8, r7, r6
    1132:	f04f 0b66 	mov.w	fp, #102	; 0x66
    1136:	d446      	bmi.n	11c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c6>
	if (decimals > 16) {
    1138:	f1b8 0f10 	cmp.w	r8, #16
    113c:	bfa8      	it	ge
    113e:	f04f 0810 	movge.w	r8, #16
    1142:	2010      	movs	r0, #16
	uint64_t round = BIT64(59); /* 0.5 */
    1144:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1148:	900b      	str	r0, [sp, #44]	; 0x2c
    114a:	2000      	movs	r0, #0
    114c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    1150:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    1154:	f1b8 0f00 	cmp.w	r8, #0
    1158:	d138      	bne.n	11cc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1cc>
	fract += round;
    115a:	9908      	ldr	r1, [sp, #32]
    115c:	1812      	adds	r2, r2, r0
    115e:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    1162:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    1166:	d23f      	bcs.n	11e8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1e8>
	fract += round;
    1168:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    116c:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    116e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    1172:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    1176:	f040 80b2 	bne.w	12de <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2de>
		if (decexp > 0) {
    117a:	2e00      	cmp	r6, #0
    117c:	dc3f      	bgt.n	11fe <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1fe>
			*buf++ = '0';
    117e:	2130      	movs	r1, #48	; 0x30
    1180:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    1184:	2a00      	cmp	r2, #0
    1186:	d163      	bne.n	1250 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x250>
    1188:	2f00      	cmp	r7, #0
    118a:	f340 81a8 	ble.w	14de <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4de>
			*buf++ = '.';
    118e:	222e      	movs	r2, #46	; 0x2e
    1190:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    1194:	b186      	cbz	r6, 11b8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b8>
			conv->pad0_value = -decexp;
    1196:	4272      	negs	r2, r6
    1198:	42ba      	cmp	r2, r7
    119a:	bfa8      	it	ge
    119c:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    119e:	2a00      	cmp	r2, #0
    11a0:	9213      	str	r2, [sp, #76]	; 0x4c
			precision -= conv->pad0_value;
    11a2:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    11a6:	bfd4      	ite	le
    11a8:	2200      	movle	r2, #0
    11aa:	2201      	movgt	r2, #1
    11ac:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    11b0:	f362 1145 	bfi	r1, r2, #5, #1
    11b4:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    11b8:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    11bc:	e037      	b.n	122e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x22e>
	bool prune_zero = false;
    11be:	2300      	movs	r3, #0
    11c0:	e7ae      	b.n	1120 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x120>
    11c2:	2300      	movs	r3, #0
    11c4:	e787      	b.n	10d6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xd6>
			decimals = 0;
    11c6:	f04f 0800 	mov.w	r8, #0
    11ca:	e7ba      	b.n	1142 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x142>
	*v >>= 1;
    11cc:	0840      	lsrs	r0, r0, #1
    11ce:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    11d2:	085b      	lsrs	r3, r3, #1
    11d4:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    11d8:	a80e      	add	r0, sp, #56	; 0x38
    11da:	9209      	str	r2, [sp, #36]	; 0x24
    11dc:	f108 38ff 	add.w	r8, r8, #4294967295
    11e0:	f004 fc6a 	bl	5ab8 <_ldiv5>
    11e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    11e6:	e7b3      	b.n	1150 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x150>
	*v >>= 1;
    11e8:	0852      	lsrs	r2, r2, #1
    11ea:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    11ee:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    11f0:	0849      	lsrs	r1, r1, #1
    11f2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    11f6:	3601      	adds	r6, #1
	_ldiv5(v);
    11f8:	f004 fc5e 	bl	5ab8 <_ldiv5>
		decexp++;
    11fc:	e7b6      	b.n	116c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16c>
	char *buf = bps;
    11fe:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    1202:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1204:	2900      	cmp	r1, #0
    1206:	dd09      	ble.n	121c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21c>
				*buf++ = _get_digit(&fract, &digit_count);
    1208:	a90b      	add	r1, sp, #44	; 0x2c
    120a:	a80c      	add	r0, sp, #48	; 0x30
    120c:	9207      	str	r2, [sp, #28]
    120e:	f004 fc6b 	bl	5ae8 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1212:	3e01      	subs	r6, #1
    1214:	9a07      	ldr	r2, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
    1216:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    121a:	d1f2      	bne.n	1202 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x202>
			conv->pad0_value = decexp;
    121c:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    121e:	b99a      	cbnz	r2, 1248 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x248>
    1220:	2f00      	cmp	r7, #0
    1222:	f340 815a 	ble.w	14da <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4da>
			*buf++ = '.';
    1226:	212e      	movs	r1, #46	; 0x2e
    1228:	f808 1b01 	strb.w	r1, [r8], #1
    122c:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    122e:	2f00      	cmp	r7, #0
    1230:	dd17      	ble.n	1262 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x262>
    1232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1234:	2a00      	cmp	r2, #0
    1236:	dd14      	ble.n	1262 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x262>
		*buf++ = _get_digit(&fract, &digit_count);
    1238:	a90b      	add	r1, sp, #44	; 0x2c
    123a:	a80c      	add	r0, sp, #48	; 0x30
    123c:	f004 fc54 	bl	5ae8 <_get_digit>
		precision--;
    1240:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    1242:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    1246:	e7f2      	b.n	122e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x22e>
			*buf++ = '.';
    1248:	222e      	movs	r2, #46	; 0x2e
    124a:	f808 2b01 	strb.w	r2, [r8], #1
    124e:	e7ed      	b.n	122c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x22c>
    1250:	222e      	movs	r2, #46	; 0x2e
    1252:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    1256:	2e00      	cmp	r6, #0
    1258:	d0ae      	beq.n	11b8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b8>
    125a:	2f00      	cmp	r7, #0
    125c:	dc9b      	bgt.n	1196 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x196>
			*buf++ = '.';
    125e:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    1262:	9b05      	ldr	r3, [sp, #20]
    1264:	2b00      	cmp	r3, #0
    1266:	d14e      	bne.n	1306 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x306>
	conv->pad0_pre_exp = precision;
    1268:	9714      	str	r7, [sp, #80]	; 0x50
    126a:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    126c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    1270:	2a45      	cmp	r2, #69	; 0x45
    1272:	d123      	bne.n	12bc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2bc>
		if (decexp < 0) {
    1274:	2e00      	cmp	r6, #0
			decexp = -decexp;
    1276:	bfba      	itte	lt
    1278:	4276      	neglt	r6, r6
			*buf++ = '-';
    127a:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    127c:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    127e:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    1280:	bfc8      	it	gt
    1282:	2164      	movgt	r1, #100	; 0x64
    1284:	707b      	strb	r3, [r7, #1]
    1286:	bfc4      	itt	gt
    1288:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
    128c:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    1290:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    1294:	bfc8      	it	gt
    1296:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    129a:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = '-';
    129e:	bfd2      	itee	le
    12a0:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    12a2:	1cfa      	addgt	r2, r7, #3
    12a4:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    12a6:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    12aa:	4617      	mov	r7, r2
    12ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    12b0:	fb01 6313 	mls	r3, r1, r3, r6
    12b4:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    12b6:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    12ba:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    12bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    12be:	2b00      	cmp	r3, #0
    12c0:	dc2c      	bgt.n	131c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x31c>
    12c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    12c4:	2b00      	cmp	r3, #0
    12c6:	bfd4      	ite	le
    12c8:	2300      	movle	r3, #0
    12ca:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    12cc:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    12d0:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    12d4:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    12d6:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    12da:	703b      	strb	r3, [r7, #0]
	return bps;
    12dc:	e69b      	b.n	1016 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16>
		*buf = _get_digit(&fract, &digit_count);
    12de:	a90b      	add	r1, sp, #44	; 0x2c
    12e0:	a80c      	add	r0, sp, #48	; 0x30
    12e2:	9207      	str	r2, [sp, #28]
    12e4:	f004 fc00 	bl	5ae8 <_get_digit>
		if (*buf++ != '0') {
    12e8:	9a07      	ldr	r2, [sp, #28]
    12ea:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    12ec:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
    12f0:	bf18      	it	ne
    12f2:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    12f6:	b912      	cbnz	r2, 12fe <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2fe>
    12f8:	2f00      	cmp	r7, #0
    12fa:	f340 80f0 	ble.w	14de <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4de>
			*buf++ = '.';
    12fe:	222e      	movs	r2, #46	; 0x2e
    1300:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    1304:	e758      	b.n	11b8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b8>
		while (*--buf == '0') {
    1306:	4647      	mov	r7, r8
    1308:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    130c:	f108 38ff 	add.w	r8, r8, #4294967295
    1310:	2a30      	cmp	r2, #48	; 0x30
    1312:	d0f8      	beq.n	1306 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x306>
    1314:	2a2e      	cmp	r2, #46	; 0x2e
    1316:	bf08      	it	eq
    1318:	4647      	moveq	r7, r8
    131a:	e7a7      	b.n	126c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x26c>
		|| (conv->pad0_pre_exp > 0);
    131c:	2301      	movs	r3, #1
    131e:	e7d5      	b.n	12cc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2cc>
			bpe = bps + 5;
    1320:	4f70      	ldr	r7, [pc, #448]	; (14e4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4e4>)
		char sign = 0;
    1322:	4681      	mov	r9, r0
			bps = "(nil)";
    1324:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    1326:	2005      	movs	r0, #5
    1328:	e5ac      	b.n	e84 <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
    132a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    132c:	bf48      	it	mi
    132e:	3001      	addmi	r0, #1
    1330:	e5b0      	b.n	e94 <z_cbvprintf_impl+0x680>
					OUTC(pad);
    1332:	4610      	mov	r0, r2
    1334:	9209      	str	r2, [sp, #36]	; 0x24
    1336:	9903      	ldr	r1, [sp, #12]
    1338:	47d0      	blx	sl
    133a:	2800      	cmp	r0, #0
    133c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    133e:	da05      	bge.n	134c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34c>
#undef OUTS
#undef OUTC
}
    1340:	b01f      	add	sp, #124	; 0x7c
    1342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1346:	2220      	movs	r2, #32
					pad = '0';
    1348:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    134c:	4659      	mov	r1, fp
    134e:	2900      	cmp	r1, #0
    1350:	f10b 3bff 	add.w	fp, fp, #4294967295
    1354:	dced      	bgt.n	1332 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x332>
    1356:	9b04      	ldr	r3, [sp, #16]
    1358:	f8cd b010 	str.w	fp, [sp, #16]
    135c:	442b      	add	r3, r5
    135e:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    1360:	f1b9 0f00 	cmp.w	r9, #0
    1364:	d005      	beq.n	1372 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x372>
			OUTC(sign);
    1366:	4648      	mov	r0, r9
    1368:	9903      	ldr	r1, [sp, #12]
    136a:	47d0      	blx	sl
    136c:	2800      	cmp	r0, #0
    136e:	dbe7      	blt.n	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
    1370:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1372:	9b08      	ldr	r3, [sp, #32]
    1374:	2b00      	cmp	r3, #0
    1376:	d075      	beq.n	1464 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x464>
			if (conv->specifier_a) {
    1378:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    137c:	2b00      	cmp	r3, #0
    137e:	db28      	blt.n	13d2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3d2>
    1380:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
    1382:	f89b 0000 	ldrb.w	r0, [fp]
    1386:	46d9      	mov	r9, fp
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1388:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    138c:	2b09      	cmp	r3, #9
    138e:	f10b 0b01 	add.w	fp, fp, #1
    1392:	d93f      	bls.n	1414 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x414>
				if (!conv->pad_postdp) {
    1394:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1398:	1bae      	subs	r6, r5, r6
    139a:	0699      	lsls	r1, r3, #26
    139c:	444e      	add	r6, r9
    139e:	d407      	bmi.n	13b0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3b0>
					while (pad_len-- > 0) {
    13a0:	4642      	mov	r2, r8
    13a2:	2a00      	cmp	r2, #0
    13a4:	f108 38ff 	add.w	r8, r8, #4294967295
    13a8:	dc39      	bgt.n	141e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x41e>
    13aa:	9b07      	ldr	r3, [sp, #28]
    13ac:	4433      	add	r3, r6
    13ae:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    13b0:	f899 0000 	ldrb.w	r0, [r9]
    13b4:	282e      	cmp	r0, #46	; 0x2e
    13b6:	d10a      	bne.n	13ce <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3ce>
					OUTC(*cp++);
    13b8:	9903      	ldr	r1, [sp, #12]
    13ba:	47d0      	blx	sl
						OUTC('0');
    13bc:	2800      	cmp	r0, #0
    13be:	dbbf      	blt.n	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
					while (pad_len-- > 0) {
    13c0:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    13c4:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    13c8:	dc2f      	bgt.n	142a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x42a>
					OUTC(*cp++);
    13ca:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    13ce:	464d      	mov	r5, r9
    13d0:	e035      	b.n	143e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x43e>
    13d2:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    13d4:	f899 0000 	ldrb.w	r0, [r9]
    13d8:	46c8      	mov	r8, r9
    13da:	2870      	cmp	r0, #112	; 0x70
    13dc:	f109 0901 	add.w	r9, r9, #1
    13e0:	d113      	bne.n	140a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x40a>
    13e2:	1bae      	subs	r6, r5, r6
    13e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
    13e6:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    13e8:	4435      	add	r5, r6
    13ea:	1bab      	subs	r3, r5, r6
    13ec:	2b00      	cmp	r3, #0
    13ee:	dc31      	bgt.n	1454 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x454>
			OUTS(cp, bpe);
    13f0:	463b      	mov	r3, r7
    13f2:	4642      	mov	r2, r8
    13f4:	4650      	mov	r0, sl
    13f6:	9903      	ldr	r1, [sp, #12]
    13f8:	f004 fbd3 	bl	5ba2 <outs>
    13fc:	2800      	cmp	r0, #0
    13fe:	db9f      	blt.n	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
    1400:	4430      	add	r0, r6
    1402:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    1404:	4605      	mov	r5, r0
    1406:	4406      	add	r6, r0
    1408:	e062      	b.n	14d0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4d0>
					OUTC(*cp++);
    140a:	9903      	ldr	r1, [sp, #12]
    140c:	47d0      	blx	sl
    140e:	2800      	cmp	r0, #0
    1410:	dae0      	bge.n	13d4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3d4>
    1412:	e795      	b.n	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
					OUTC(*cp++);
    1414:	9903      	ldr	r1, [sp, #12]
    1416:	47d0      	blx	sl
    1418:	2800      	cmp	r0, #0
    141a:	dab2      	bge.n	1382 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x382>
    141c:	e790      	b.n	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
						OUTC('0');
    141e:	2030      	movs	r0, #48	; 0x30
    1420:	9903      	ldr	r1, [sp, #12]
    1422:	47d0      	blx	sl
    1424:	2800      	cmp	r0, #0
    1426:	dabb      	bge.n	13a0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3a0>
    1428:	e78a      	b.n	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
						OUTC('0');
    142a:	2030      	movs	r0, #48	; 0x30
    142c:	9903      	ldr	r1, [sp, #12]
    142e:	47d0      	blx	sl
    1430:	f108 38ff 	add.w	r8, r8, #4294967295
    1434:	e7c2      	b.n	13bc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3bc>
					OUTC(*cp++);
    1436:	9903      	ldr	r1, [sp, #12]
    1438:	47d0      	blx	sl
    143a:	2800      	cmp	r0, #0
    143c:	db80      	blt.n	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
				while (isdigit((unsigned char)*cp) != 0) {
    143e:	7828      	ldrb	r0, [r5, #0]
    1440:	46a8      	mov	r8, r5
    1442:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1446:	2b09      	cmp	r3, #9
    1448:	f105 0501 	add.w	r5, r5, #1
    144c:	d9f3      	bls.n	1436 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x436>
    144e:	eba6 0609 	sub.w	r6, r6, r9
    1452:	e7c7      	b.n	13e4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3e4>
				OUTC('0');
    1454:	2030      	movs	r0, #48	; 0x30
    1456:	9903      	ldr	r1, [sp, #12]
    1458:	47d0      	blx	sl
    145a:	2800      	cmp	r0, #0
    145c:	f6ff af70 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
    1460:	3601      	adds	r6, #1
    1462:	e7c2      	b.n	13ea <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3ea>
			if (conv->altform_0c | conv->altform_0) {
    1464:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1468:	06da      	lsls	r2, r3, #27
    146a:	d401      	bmi.n	1470 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x470>
    146c:	071b      	lsls	r3, r3, #28
    146e:	d506      	bpl.n	147e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x47e>
				OUTC('0');
    1470:	2030      	movs	r0, #48	; 0x30
    1472:	9903      	ldr	r1, [sp, #12]
    1474:	47d0      	blx	sl
    1476:	2800      	cmp	r0, #0
    1478:	f6ff af62 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
    147c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    147e:	9b05      	ldr	r3, [sp, #20]
    1480:	b13b      	cbz	r3, 1492 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x492>
				OUTC(conv->specifier);
    1482:	9903      	ldr	r1, [sp, #12]
    1484:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    1488:	47d0      	blx	sl
    148a:	2800      	cmp	r0, #0
    148c:	f6ff af58 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
    1490:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1492:	44a8      	add	r8, r5
    1494:	e006      	b.n	14a4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a4>
				OUTC('0');
    1496:	2030      	movs	r0, #48	; 0x30
    1498:	9903      	ldr	r1, [sp, #12]
    149a:	47d0      	blx	sl
    149c:	2800      	cmp	r0, #0
    149e:	f6ff af4f 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
    14a2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    14a4:	eba8 0305 	sub.w	r3, r8, r5
    14a8:	2b00      	cmp	r3, #0
    14aa:	dcf4      	bgt.n	1496 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x496>
			OUTS(bps, bpe);
    14ac:	463b      	mov	r3, r7
    14ae:	4632      	mov	r2, r6
    14b0:	4650      	mov	r0, sl
    14b2:	9903      	ldr	r1, [sp, #12]
    14b4:	f004 fb75 	bl	5ba2 <outs>
    14b8:	2800      	cmp	r0, #0
    14ba:	f6ff af41 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
    14be:	4428      	add	r0, r5
    14c0:	e79f      	b.n	1402 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x402>
			OUTC(' ');
    14c2:	2020      	movs	r0, #32
    14c4:	9903      	ldr	r1, [sp, #12]
    14c6:	47d0      	blx	sl
    14c8:	2800      	cmp	r0, #0
    14ca:	f6ff af39 	blt.w	1340 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x340>
    14ce:	3501      	adds	r5, #1
		while (width > 0) {
    14d0:	1b73      	subs	r3, r6, r5
    14d2:	2b00      	cmp	r3, #0
    14d4:	dcf5      	bgt.n	14c2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4c2>
    14d6:	f7ff bbe1 	b.w	c9c <z_cbvprintf_impl+0x488>
			decexp = 0;
    14da:	4616      	mov	r6, r2
    14dc:	e6c1      	b.n	1262 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x262>
		if (*buf++ != '0') {
    14de:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    14e2:	e6be      	b.n	1262 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x262>
    14e4:	00006dfb 	.word	0x00006dfb

000014e8 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    14e8:	4604      	mov	r4, r0
    14ea:	b508      	push	{r3, lr}
	__asm__ volatile(
    14ec:	f04f 0220 	mov.w	r2, #32
    14f0:	f3ef 8311 	mrs	r3, BASEPRI
    14f4:	f382 8812 	msr	BASEPRI_MAX, r2
    14f8:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    14fc:	f001 ffc2 	bl	3484 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    1500:	4620      	mov	r0, r4
    1502:	f000 fd83 	bl	200c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1506:	4803      	ldr	r0, [pc, #12]	; (1514 <sys_reboot+0x2c>)
    1508:	f004 f9e6 	bl	58d8 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    150c:	f000 fac0 	bl	1a90 <arch_cpu_idle>
    1510:	e7fc      	b.n	150c <sys_reboot+0x24>
    1512:	bf00      	nop
    1514:	00006dfc 	.word	0x00006dfc

00001518 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1518:	4b05      	ldr	r3, [pc, #20]	; (1530 <nrf_gpio_pin_control_select.constprop.0+0x18>)
    151a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    151e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1522:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1526:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    152a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    152e:	4770      	bx	lr
    1530:	50842500 	.word	0x50842500

00001534 <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
    1534:	b510      	push	{r4, lr}
    1536:	f04f 0320 	mov.w	r3, #32
    153a:	f3ef 8411 	mrs	r4, BASEPRI
    153e:	f383 8812 	msr	BASEPRI_MAX, r3
    1542:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1546:	2201      	movs	r2, #1
    1548:	4b0c      	ldr	r3, [pc, #48]	; (157c <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    154a:	490d      	ldr	r1, [pc, #52]	; (1580 <nordicsemi_nrf53_init+0x4c>)
    154c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    1550:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1552:	2000      	movs	r0, #0
    1554:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
    1558:	f7ff ffde 	bl	1518 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    155c:	4610      	mov	r0, r2
    155e:	f7ff ffdb 	bl	1518 <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1562:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1566:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    156a:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
    156e:	f384 8811 	msr	BASEPRI, r4
    1572:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1576:	2000      	movs	r0, #0
    1578:	bd10      	pop	{r4, pc}
    157a:	bf00      	nop
    157c:	50001000 	.word	0x50001000
    1580:	50004000 	.word	0x50004000

00001584 <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1584:	2305      	movs	r3, #5
{
    1586:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1588:	4d14      	ldr	r5, [pc, #80]	; (15dc <z_arm_on_enter_cpu_idle+0x58>)
    158a:	4e15      	ldr	r6, [pc, #84]	; (15e0 <z_arm_on_enter_cpu_idle+0x5c>)
    158c:	782c      	ldrb	r4, [r5, #0]
    158e:	3401      	adds	r4, #1
    1590:	fbb4 f3f3 	udiv	r3, r4, r3
    1594:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1598:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    159a:	f004 fd38 	bl	600e <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    159e:	4a11      	ldr	r2, [pc, #68]	; (15e4 <z_arm_on_enter_cpu_idle+0x60>)
    15a0:	7813      	ldrb	r3, [r2, #0]
    15a2:	b123      	cbz	r3, 15ae <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    15a4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    15a8:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    15aa:	2807      	cmp	r0, #7
    15ac:	d914      	bls.n	15d8 <z_arm_on_enter_cpu_idle+0x54>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    15ae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    15b2:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    15b6:	b141      	cbz	r1, 15ca <z_arm_on_enter_cpu_idle+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    15b8:	2100      	movs	r1, #0
    15ba:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    15be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    15c2:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    15c4:	b90c      	cbnz	r4, 15ca <z_arm_on_enter_cpu_idle+0x46>
			timestamps_filled = true;
    15c6:	2301      	movs	r3, #1
    15c8:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    15ca:	782c      	ldrb	r4, [r5, #0]
    15cc:	f004 fd1f 	bl	600e <sys_clock_cycle_get_32>
    15d0:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    15d4:	2001      	movs	r0, #1
}
    15d6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    15d8:	2000      	movs	r0, #0
    15da:	e7fc      	b.n	15d6 <z_arm_on_enter_cpu_idle+0x52>
    15dc:	20000c2d 	.word	0x20000c2d
    15e0:	200002f8 	.word	0x200002f8
    15e4:	20000c2c 	.word	0x20000c2c

000015e8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    15e8:	b148      	cbz	r0, 15fe <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    15ea:	4b05      	ldr	r3, [pc, #20]	; (1600 <arch_busy_wait+0x18>)
    15ec:	4a05      	ldr	r2, [pc, #20]	; (1604 <arch_busy_wait+0x1c>)
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    15f4:	4358      	muls	r0, r3
    15f6:	4b04      	ldr	r3, [pc, #16]	; (1608 <arch_busy_wait+0x20>)
    15f8:	f043 0301 	orr.w	r3, r3, #1
    15fc:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    15fe:	4770      	bx	lr
    1600:	20000070 	.word	0x20000070
    1604:	000f4240 	.word	0x000f4240
    1608:	00006b00 	.word	0x00006b00

0000160c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    160c:	2806      	cmp	r0, #6
    160e:	d107      	bne.n	1620 <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1610:	2201      	movs	r2, #1
    1612:	4b04      	ldr	r3, [pc, #16]	; (1624 <pm_state_set+0x18>)
    1614:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1618:	f3bf 8f4f 	dsb	sy
        __WFE();
    161c:	bf20      	wfe
    while (true)
    161e:	e7fd      	b.n	161c <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    1620:	4770      	bx	lr
    1622:	bf00      	nop
    1624:	50004000 	.word	0x50004000

00001628 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1628:	f001 bf56 	b.w	34d8 <SystemInit>

0000162c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    162c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1630:	4605      	mov	r5, r0
	__asm__ volatile(
    1632:	f04f 0320 	mov.w	r3, #32
    1636:	f3ef 8611 	mrs	r6, BASEPRI
    163a:	f383 8812 	msr	BASEPRI_MAX, r3
    163e:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1642:	f04f 090c 	mov.w	r9, #12
	return list->head;
    1646:	4b0d      	ldr	r3, [pc, #52]	; (167c <pm_state_notify+0x50>)
    1648:	4f0d      	ldr	r7, [pc, #52]	; (1680 <pm_state_notify+0x54>)
    164a:	681c      	ldr	r4, [r3, #0]
    164c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1684 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1650:	b92c      	cbnz	r4, 165e <pm_state_notify+0x32>
	__asm__ volatile(
    1652:	f386 8811 	msr	BASEPRI, r6
    1656:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    165a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    165e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1662:	2d00      	cmp	r5, #0
    1664:	bf18      	it	ne
    1666:	4613      	movne	r3, r2
		if (callback) {
    1668:	b12b      	cbz	r3, 1676 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    166a:	f898 2010 	ldrb.w	r2, [r8, #16]
    166e:	fb09 f202 	mul.w	r2, r9, r2
    1672:	5cb8      	ldrb	r0, [r7, r2]
    1674:	4798      	blx	r3
	return node->next;
    1676:	6824      	ldr	r4, [r4, #0]
    1678:	e7ea      	b.n	1650 <pm_state_notify+0x24>
    167a:	bf00      	nop
    167c:	20000324 	.word	0x20000324
    1680:	20000318 	.word	0x20000318
    1684:	20000a20 	.word	0x20000a20

00001688 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1688:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    168a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    168c:	4b16      	ldr	r3, [pc, #88]	; (16e8 <pm_system_resume+0x60>)
    168e:	7c1c      	ldrb	r4, [r3, #16]
    1690:	f004 031f 	and.w	r3, r4, #31
    1694:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1696:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1698:	4b14      	ldr	r3, [pc, #80]	; (16ec <pm_system_resume+0x64>)
    169a:	0961      	lsrs	r1, r4, #5
    169c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    16a0:	e8d3 1fef 	ldaex	r1, [r3]
    16a4:	ea01 0500 	and.w	r5, r1, r0
    16a8:	e8c3 5fe6 	stlex	r6, r5, [r3]
    16ac:	2e00      	cmp	r6, #0
    16ae:	d1f7      	bne.n	16a0 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    16b0:	420a      	tst	r2, r1
    16b2:	d013      	beq.n	16dc <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    16b4:	4b0e      	ldr	r3, [pc, #56]	; (16f0 <pm_system_resume+0x68>)
    16b6:	4d0f      	ldr	r5, [pc, #60]	; (16f4 <pm_system_resume+0x6c>)
    16b8:	b18b      	cbz	r3, 16de <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    16ba:	230c      	movs	r3, #12
    16bc:	4363      	muls	r3, r4
    16be:	18ea      	adds	r2, r5, r3
    16c0:	7851      	ldrb	r1, [r2, #1]
    16c2:	5ce8      	ldrb	r0, [r5, r3]
    16c4:	f004 fa85 	bl	5bd2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    16c8:	2000      	movs	r0, #0
    16ca:	f7ff ffaf 	bl	162c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    16ce:	230c      	movs	r3, #12
    16d0:	435c      	muls	r4, r3
    16d2:	2300      	movs	r3, #0
    16d4:	192a      	adds	r2, r5, r4
    16d6:	512b      	str	r3, [r5, r4]
    16d8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    16dc:	bd70      	pop	{r4, r5, r6, pc}
    16de:	f383 8811 	msr	BASEPRI, r3
    16e2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    16e6:	e7ef      	b.n	16c8 <pm_system_resume+0x40>
    16e8:	20000a20 	.word	0x20000a20
    16ec:	2000032c 	.word	0x2000032c
    16f0:	00005bd3 	.word	0x00005bd3
    16f4:	20000318 	.word	0x20000318

000016f8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    16f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    16fc:	4b32      	ldr	r3, [pc, #200]	; (17c8 <pm_system_suspend+0xd0>)
{
    16fe:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    1700:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    1702:	f04f 0320 	mov.w	r3, #32
    1706:	f3ef 8811 	mrs	r8, BASEPRI
    170a:	f383 8812 	msr	BASEPRI_MAX, r3
    170e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1712:	240c      	movs	r4, #12
    1714:	436c      	muls	r4, r5
    1716:	4b2d      	ldr	r3, [pc, #180]	; (17cc <pm_system_suspend+0xd4>)
    1718:	4e2d      	ldr	r6, [pc, #180]	; (17d0 <pm_system_suspend+0xd8>)
    171a:	5d19      	ldrb	r1, [r3, r4]
    171c:	191a      	adds	r2, r3, r4
    171e:	2900      	cmp	r1, #0
    1720:	d047      	beq.n	17b2 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1722:	ca07      	ldmia	r2, {r0, r1, r2}
    1724:	eb06 0c04 	add.w	ip, r6, r4
    1728:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    172c:	2200      	movs	r2, #0
    172e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1730:	f388 8811 	msr	BASEPRI, r8
    1734:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1738:	230c      	movs	r3, #12
    173a:	436b      	muls	r3, r5
    173c:	5cf0      	ldrb	r0, [r6, r3]
    173e:	18f2      	adds	r2, r6, r3
    1740:	b3a8      	cbz	r0, 17ae <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1742:	1c7b      	adds	r3, r7, #1
    1744:	d010      	beq.n	1768 <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1746:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    174a:	2100      	movs	r1, #0
    174c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1750:	4c20      	ldr	r4, [pc, #128]	; (17d4 <pm_system_suspend+0xdc>)
    1752:	2300      	movs	r3, #0
    1754:	fbec 4100 	umlal	r4, r1, ip, r0
    1758:	4a1f      	ldr	r2, [pc, #124]	; (17d8 <pm_system_suspend+0xe0>)
    175a:	4620      	mov	r0, r4
    175c:	f7fe fcfa 	bl	154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    1760:	2101      	movs	r1, #1
    1762:	1a38      	subs	r0, r7, r0
    1764:	f001 fe52 	bl	340c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1768:	f003 fc76 	bl	5058 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    176c:	2001      	movs	r0, #1
    176e:	f7ff ff5d 	bl	162c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1772:	4b1a      	ldr	r3, [pc, #104]	; (17dc <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1774:	096a      	lsrs	r2, r5, #5
    1776:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    177a:	2201      	movs	r2, #1
    177c:	f005 011f 	and.w	r1, r5, #31
    1780:	408a      	lsls	r2, r1
    1782:	e8d3 0fef 	ldaex	r0, [r3]
    1786:	4310      	orrs	r0, r2
    1788:	e8c3 0fe1 	stlex	r1, r0, [r3]
    178c:	2900      	cmp	r1, #0
    178e:	d1f8      	bne.n	1782 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    1790:	4b13      	ldr	r3, [pc, #76]	; (17e0 <pm_system_suspend+0xe8>)
    1792:	b13b      	cbz	r3, 17a4 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    1794:	230c      	movs	r3, #12
    1796:	fb03 f005 	mul.w	r0, r3, r5
    179a:	1833      	adds	r3, r6, r0
    179c:	7859      	ldrb	r1, [r3, #1]
    179e:	5c30      	ldrb	r0, [r6, r0]
    17a0:	f7ff ff34 	bl	160c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    17a4:	f7ff ff70 	bl	1688 <pm_system_resume>
	k_sched_unlock();
    17a8:	f003 fc6a 	bl	5080 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    17ac:	2001      	movs	r0, #1
}
    17ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    17b2:	4601      	mov	r1, r0
    17b4:	4628      	mov	r0, r5
    17b6:	f000 f815 	bl	17e4 <pm_policy_next_state>
		if (info != NULL) {
    17ba:	2800      	cmp	r0, #0
    17bc:	d0b8      	beq.n	1730 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    17be:	c807      	ldmia	r0, {r0, r1, r2}
    17c0:	4434      	add	r4, r6
    17c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    17c6:	e7b3      	b.n	1730 <pm_system_suspend+0x38>
    17c8:	20000a20 	.word	0x20000a20
    17cc:	2000030c 	.word	0x2000030c
    17d0:	20000318 	.word	0x20000318
    17d4:	000f423f 	.word	0x000f423f
    17d8:	000f4240 	.word	0x000f4240
    17dc:	2000032c 	.word	0x2000032c
    17e0:	0000160d 	.word	0x0000160d

000017e4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    17e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17e8:	b085      	sub	sp, #20
    17ea:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    17ec:	a903      	add	r1, sp, #12
    17ee:	f000 f843 	bl	1878 <pm_state_cpu_get_all>
    17f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    17f6:	4604      	mov	r4, r0
    17f8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    17fc:	4b1b      	ldr	r3, [pc, #108]	; (186c <pm_policy_next_state+0x88>)
    17fe:	9d03      	ldr	r5, [sp, #12]
    1800:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1804:	1e43      	subs	r3, r0, #1
    1806:	b21b      	sxth	r3, r3
    1808:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    180c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1870 <pm_policy_next_state+0x8c>
    1810:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1814:	b924      	cbnz	r4, 1820 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    1816:	46a1      	mov	r9, r4
}
    1818:	4648      	mov	r0, r9
    181a:	b005      	add	sp, #20
    181c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1820:	46c4      	mov	ip, r8
    1822:	4659      	mov	r1, fp
    1824:	6868      	ldr	r0, [r5, #4]
    1826:	2300      	movs	r3, #0
    1828:	fbe0 c107 	umlal	ip, r1, r0, r7
    182c:	4a11      	ldr	r2, [pc, #68]	; (1874 <pm_policy_next_state+0x90>)
    182e:	4660      	mov	r0, ip
    1830:	f7fe fc90 	bl	154 <__aeabi_uldivmod>
    1834:	46c4      	mov	ip, r8
    1836:	4659      	mov	r1, fp
    1838:	9001      	str	r0, [sp, #4]
    183a:	68a8      	ldr	r0, [r5, #8]
    183c:	2300      	movs	r3, #0
    183e:	fbe0 c107 	umlal	ip, r1, r0, r7
    1842:	4a0c      	ldr	r2, [pc, #48]	; (1874 <pm_policy_next_state+0x90>)
    1844:	4660      	mov	r0, ip
    1846:	f7fe fc85 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    184a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    184e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1850:	d001      	beq.n	1856 <pm_policy_next_state+0x72>
    1852:	4582      	cmp	sl, r0
    1854:	d905      	bls.n	1862 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1856:	1c73      	adds	r3, r6, #1
    1858:	d0de      	beq.n	1818 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    185a:	9b01      	ldr	r3, [sp, #4]
    185c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    185e:	42b0      	cmp	r0, r6
    1860:	d9da      	bls.n	1818 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1862:	3c01      	subs	r4, #1
    1864:	b2a4      	uxth	r4, r4
    1866:	3d0c      	subs	r5, #12
    1868:	e7d4      	b.n	1814 <pm_policy_next_state+0x30>
    186a:	bf00      	nop
    186c:	20000004 	.word	0x20000004
    1870:	000f423f 	.word	0x000f423f
    1874:	000f4240 	.word	0x000f4240

00001878 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1878:	b908      	cbnz	r0, 187e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    187a:	4b02      	ldr	r3, [pc, #8]	; (1884 <pm_state_cpu_get_all+0xc>)
    187c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    187e:	2000      	movs	r0, #0
    1880:	4770      	bx	lr
    1882:	bf00      	nop
    1884:	00006b08 	.word	0x00006b08

00001888 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1888:	4801      	ldr	r0, [pc, #4]	; (1890 <nrf_cc3xx_platform_abort_init+0x8>)
    188a:	f003 becf 	b.w	562c <nrf_cc3xx_platform_set_abort>
    188e:	bf00      	nop
    1890:	00006b08 	.word	0x00006b08

00001894 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1894:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1896:	4604      	mov	r4, r0
    1898:	b918      	cbnz	r0, 18a2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    189a:	4b0f      	ldr	r3, [pc, #60]	; (18d8 <mutex_free_platform+0x44>)
    189c:	480f      	ldr	r0, [pc, #60]	; (18dc <mutex_free_platform+0x48>)
    189e:	685b      	ldr	r3, [r3, #4]
    18a0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    18a2:	6861      	ldr	r1, [r4, #4]
    18a4:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    18a8:	d00f      	beq.n	18ca <mutex_free_platform+0x36>
    18aa:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    18ae:	d00c      	beq.n	18ca <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    18b0:	4d0b      	ldr	r5, [pc, #44]	; (18e0 <mutex_free_platform+0x4c>)
    18b2:	42a9      	cmp	r1, r5
    18b4:	d009      	beq.n	18ca <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    18b6:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    18ba:	d007      	beq.n	18cc <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    18bc:	4621      	mov	r1, r4
    18be:	4809      	ldr	r0, [pc, #36]	; (18e4 <mutex_free_platform+0x50>)
    18c0:	f004 fe2d 	bl	651e <k_mem_slab_free>
        mutex->mutex = NULL;
    18c4:	2300      	movs	r3, #0
    18c6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    18c8:	6065      	str	r5, [r4, #4]
}
    18ca:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    18cc:	2214      	movs	r2, #20
    18ce:	6820      	ldr	r0, [r4, #0]
    18d0:	f004 f9e9 	bl	5ca6 <memset>
    18d4:	e7f8      	b.n	18c8 <mutex_free_platform+0x34>
    18d6:	bf00      	nop
    18d8:	200000fc 	.word	0x200000fc
    18dc:	00006e2c 	.word	0x00006e2c
    18e0:	a95c5f2c 	.word	0xa95c5f2c
    18e4:	20000830 	.word	0x20000830

000018e8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    18e8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    18ea:	b360      	cbz	r0, 1946 <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    18ec:	6843      	ldr	r3, [r0, #4]
    18ee:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    18f2:	d00e      	beq.n	1912 <mutex_lock_platform+0x2a>
    18f4:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    18f8:	d018      	beq.n	192c <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    18fa:	4a14      	ldr	r2, [pc, #80]	; (194c <mutex_lock_platform+0x64>)
    18fc:	4293      	cmp	r3, r2
    18fe:	d020      	beq.n	1942 <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1900:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1902:	f04f 32ff 	mov.w	r2, #4294967295
    1906:	f04f 33ff 	mov.w	r3, #4294967295
    190a:	f003 f89f 	bl	4a4c <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    190e:	b158      	cbz	r0, 1928 <mutex_lock_platform+0x40>
    1910:	e015      	b.n	193e <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1912:	2201      	movs	r2, #1
    1914:	6803      	ldr	r3, [r0, #0]
    1916:	e8d3 1fef 	ldaex	r1, [r3]
    191a:	2900      	cmp	r1, #0
    191c:	d103      	bne.n	1926 <mutex_lock_platform+0x3e>
    191e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1922:	2800      	cmp	r0, #0
    1924:	d1f7      	bne.n	1916 <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1926:	d10a      	bne.n	193e <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    1928:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    192a:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    192c:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    192e:	4a08      	ldr	r2, [pc, #32]	; (1950 <mutex_lock_platform+0x68>)
    1930:	781b      	ldrb	r3, [r3, #0]
    1932:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    193a:	2b00      	cmp	r3, #0
    193c:	d0f4      	beq.n	1928 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    193e:	4805      	ldr	r0, [pc, #20]	; (1954 <mutex_lock_platform+0x6c>)
    1940:	e7f3      	b.n	192a <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1942:	4805      	ldr	r0, [pc, #20]	; (1958 <mutex_lock_platform+0x70>)
    1944:	e7f1      	b.n	192a <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1946:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    194a:	e7ee      	b.n	192a <mutex_lock_platform+0x42>
    194c:	a95c5f2c 	.word	0xa95c5f2c
    1950:	50030000 	.word	0x50030000
    1954:	ffff8fe9 	.word	0xffff8fe9
    1958:	ffff8fea 	.word	0xffff8fea

0000195c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    195c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    195e:	b320      	cbz	r0, 19aa <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1960:	6843      	ldr	r3, [r0, #4]
    1962:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1966:	d009      	beq.n	197c <mutex_unlock_platform+0x20>
    1968:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    196c:	d013      	beq.n	1996 <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    196e:	4a11      	ldr	r2, [pc, #68]	; (19b4 <mutex_unlock_platform+0x58>)
    1970:	4293      	cmp	r3, r2
    1972:	d01d      	beq.n	19b0 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1974:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1976:	f003 f8e3 	bl	4b40 <z_impl_k_mutex_unlock>
    197a:	e014      	b.n	19a6 <mutex_unlock_platform+0x4a>
    197c:	2200      	movs	r2, #0
    197e:	6803      	ldr	r3, [r0, #0]
    1980:	e8d3 1fef 	ldaex	r1, [r3]
    1984:	2901      	cmp	r1, #1
    1986:	d103      	bne.n	1990 <mutex_unlock_platform+0x34>
    1988:	e8c3 2fe0 	stlex	r0, r2, [r3]
    198c:	2800      	cmp	r0, #0
    198e:	d1f7      	bne.n	1980 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1990:	d009      	beq.n	19a6 <mutex_unlock_platform+0x4a>
    1992:	4809      	ldr	r0, [pc, #36]	; (19b8 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1994:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1996:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    1998:	6803      	ldr	r3, [r0, #0]
    199a:	4a08      	ldr	r2, [pc, #32]	; (19bc <mutex_unlock_platform+0x60>)
    199c:	781b      	ldrb	r3, [r3, #0]
    199e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    19a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    19a6:	2000      	movs	r0, #0
    19a8:	e7f4      	b.n	1994 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    19aa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    19ae:	e7f1      	b.n	1994 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    19b0:	4803      	ldr	r0, [pc, #12]	; (19c0 <mutex_unlock_platform+0x64>)
    19b2:	e7ef      	b.n	1994 <mutex_unlock_platform+0x38>
    19b4:	a95c5f2c 	.word	0xa95c5f2c
    19b8:	ffff8fe9 	.word	0xffff8fe9
    19bc:	50030000 	.word	0x50030000
    19c0:	ffff8fea 	.word	0xffff8fea

000019c4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    19c4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    19c6:	4604      	mov	r4, r0
    19c8:	b918      	cbnz	r0, 19d2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    19ca:	4b1d      	ldr	r3, [pc, #116]	; (1a40 <mutex_init_platform+0x7c>)
    19cc:	481d      	ldr	r0, [pc, #116]	; (1a44 <mutex_init_platform+0x80>)
    19ce:	685b      	ldr	r3, [r3, #4]
    19d0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    19d2:	6863      	ldr	r3, [r4, #4]
    19d4:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    19d8:	d02f      	beq.n	1a3a <mutex_init_platform+0x76>
    19da:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    19de:	d02c      	beq.n	1a3a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    19e0:	4a19      	ldr	r2, [pc, #100]	; (1a48 <mutex_init_platform+0x84>)
    19e2:	4293      	cmp	r3, r2
    19e4:	d119      	bne.n	1a1a <mutex_init_platform+0x56>
    19e6:	6823      	ldr	r3, [r4, #0]
    19e8:	bb03      	cbnz	r3, 1a2c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    19ea:	f04f 32ff 	mov.w	r2, #4294967295
    19ee:	f04f 33ff 	mov.w	r3, #4294967295
    19f2:	4621      	mov	r1, r4
    19f4:	4815      	ldr	r0, [pc, #84]	; (1a4c <mutex_init_platform+0x88>)
    19f6:	f002 ff53 	bl	48a0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    19fa:	b908      	cbnz	r0, 1a00 <mutex_init_platform+0x3c>
    19fc:	6823      	ldr	r3, [r4, #0]
    19fe:	b91b      	cbnz	r3, 1a08 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    1a00:	4b0f      	ldr	r3, [pc, #60]	; (1a40 <mutex_init_platform+0x7c>)
    1a02:	4813      	ldr	r0, [pc, #76]	; (1a50 <mutex_init_platform+0x8c>)
    1a04:	685b      	ldr	r3, [r3, #4]
    1a06:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1a08:	2214      	movs	r2, #20
    1a0a:	2100      	movs	r1, #0
    1a0c:	6820      	ldr	r0, [r4, #0]
    1a0e:	f004 f94a 	bl	5ca6 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1a12:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    1a16:	6063      	str	r3, [r4, #4]
    1a18:	e008      	b.n	1a2c <mutex_init_platform+0x68>
    switch(flags){
    1a1a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1a1e:	d80d      	bhi.n	1a3c <mutex_init_platform+0x78>
    1a20:	2b3a      	cmp	r3, #58	; 0x3a
    1a22:	d003      	beq.n	1a2c <mutex_init_platform+0x68>
    1a24:	f640 62ba 	movw	r2, #3770	; 0xeba
    1a28:	4293      	cmp	r3, r2
    1a2a:	d1de      	bne.n	19ea <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1a2c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1a2e:	f004 fdb4 	bl	659a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1a32:	6863      	ldr	r3, [r4, #4]
    1a34:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    1a38:	6063      	str	r3, [r4, #4]
}
    1a3a:	bd10      	pop	{r4, pc}
    switch(flags){
    1a3c:	4a05      	ldr	r2, [pc, #20]	; (1a54 <mutex_init_platform+0x90>)
    1a3e:	e7f3      	b.n	1a28 <mutex_init_platform+0x64>
    1a40:	200000fc 	.word	0x200000fc
    1a44:	00006e2c 	.word	0x00006e2c
    1a48:	a95c5f2c 	.word	0xa95c5f2c
    1a4c:	20000830 	.word	0x20000830
    1a50:	00006e52 	.word	0x00006e52
    1a54:	3a00003a 	.word	0x3a00003a

00001a58 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1a58:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1a5a:	4906      	ldr	r1, [pc, #24]	; (1a74 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1a5c:	2340      	movs	r3, #64	; 0x40
    1a5e:	2214      	movs	r2, #20
    1a60:	4805      	ldr	r0, [pc, #20]	; (1a78 <nrf_cc3xx_platform_mutex_init+0x20>)
    1a62:	f004 fd4e 	bl	6502 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1a6a:	4904      	ldr	r1, [pc, #16]	; (1a7c <nrf_cc3xx_platform_mutex_init+0x24>)
    1a6c:	4804      	ldr	r0, [pc, #16]	; (1a80 <nrf_cc3xx_platform_mutex_init+0x28>)
    1a6e:	f003 be4f 	b.w	5710 <nrf_cc3xx_platform_set_mutexes>
    1a72:	bf00      	nop
    1a74:	20000330 	.word	0x20000330
    1a78:	20000830 	.word	0x20000830
    1a7c:	00006b10 	.word	0x00006b10
    1a80:	00006b24 	.word	0x00006b24

00001a84 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1a84:	4901      	ldr	r1, [pc, #4]	; (1a8c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1a86:	2210      	movs	r2, #16
	str	r2, [r1]
    1a88:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1a8a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1a8c:	e000ed10 	.word	0xe000ed10

00001a90 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1a90:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1a92:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1a94:	f380 8811 	msr	BASEPRI, r0
	isb
    1a98:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1a9c:	b501      	push	{r0, lr}
    1a9e:	f7ff fd71 	bl	1584 <z_arm_on_enter_cpu_idle>
    1aa2:	2800      	cmp	r0, #0
    1aa4:	d002      	beq.n	1aac <_skip_0>
    1aa6:	f3bf 8f4f 	dsb	sy
    1aaa:	bf30      	wfi

00001aac <_skip_0>:
    1aac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1ab0:	b662      	cpsie	i
	isb
    1ab2:	f3bf 8f6f 	isb	sy

	bx	lr
    1ab6:	4770      	bx	lr

00001ab8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1ab8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1aba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1abc:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1ac0:	b501      	push	{r0, lr}
    1ac2:	f7ff fd5f 	bl	1584 <z_arm_on_enter_cpu_idle>
    1ac6:	2800      	cmp	r0, #0
    1ac8:	d002      	beq.n	1ad0 <_skip_1>
    1aca:	f3bf 8f4f 	dsb	sy
    1ace:	bf20      	wfe

00001ad0 <_skip_1>:
    1ad0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    1ad4:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1ad8:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1ada:	4770      	bx	lr

00001adc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1adc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ade:	2800      	cmp	r0, #0
    1ae0:	db07      	blt.n	1af2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ae2:	2301      	movs	r3, #1
    1ae4:	0941      	lsrs	r1, r0, #5
    1ae6:	4a03      	ldr	r2, [pc, #12]	; (1af4 <arch_irq_enable+0x18>)
    1ae8:	f000 001f 	and.w	r0, r0, #31
    1aec:	4083      	lsls	r3, r0
    1aee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1af2:	4770      	bx	lr
    1af4:	e000e100 	.word	0xe000e100

00001af8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1af8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1afa:	2800      	cmp	r0, #0
    1afc:	db0c      	blt.n	1b18 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1afe:	2201      	movs	r2, #1
    1b00:	4906      	ldr	r1, [pc, #24]	; (1b1c <arch_irq_disable+0x24>)
    1b02:	0943      	lsrs	r3, r0, #5
    1b04:	f000 001f 	and.w	r0, r0, #31
    1b08:	4082      	lsls	r2, r0
    1b0a:	3320      	adds	r3, #32
    1b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    1b10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b14:	f3bf 8f6f 	isb	sy
}
    1b18:	4770      	bx	lr
    1b1a:	bf00      	nop
    1b1c:	e000e100 	.word	0xe000e100

00001b20 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1b20:	4b05      	ldr	r3, [pc, #20]	; (1b38 <arch_irq_is_enabled+0x18>)
    1b22:	0942      	lsrs	r2, r0, #5
    1b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1b28:	2301      	movs	r3, #1
    1b2a:	f000 001f 	and.w	r0, r0, #31
    1b2e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1b32:	4010      	ands	r0, r2
    1b34:	4770      	bx	lr
    1b36:	bf00      	nop
    1b38:	e000e100 	.word	0xe000e100

00001b3c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b3c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1b3e:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    1b40:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b44:	bfac      	ite	ge
    1b46:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b4a:	4b06      	ldrlt	r3, [pc, #24]	; (1b64 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b4c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1b50:	b2c9      	uxtb	r1, r1
    1b52:	bfab      	itete	ge
    1b54:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b58:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b5c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b60:	5419      	strblt	r1, [r3, r0]
}
    1b62:	4770      	bx	lr
    1b64:	e000ed14 	.word	0xe000ed14

00001b68 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1b68:	bf30      	wfi
    b z_SysNmiOnReset
    1b6a:	f7ff bffd 	b.w	1b68 <z_SysNmiOnReset>
    1b6e:	bf00      	nop

00001b70 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b70:	4a0b      	ldr	r2, [pc, #44]	; (1ba0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1b72:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b74:	4b0b      	ldr	r3, [pc, #44]	; (1ba4 <z_arm_prep_c+0x34>)
    1b76:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1b7a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b80:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1b84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1b88:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1b90:	f002 fdc6 	bl	4720 <z_bss_zero>
	z_data_copy();
    1b94:	f003 fb9a 	bl	52cc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1b98:	f000 f9fc 	bl	1f94 <z_arm_interrupt_init>
	z_cstart();
    1b9c:	f002 fe00 	bl	47a0 <z_cstart>
    1ba0:	00000000 	.word	0x00000000
    1ba4:	e000ed00 	.word	0xe000ed00

00001ba8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1ba8:	4a09      	ldr	r2, [pc, #36]	; (1bd0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1baa:	490a      	ldr	r1, [pc, #40]	; (1bd4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1bac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1bae:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1bb0:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    1bb2:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1bb4:	4908      	ldr	r1, [pc, #32]	; (1bd8 <arch_swap+0x30>)
    1bb6:	684b      	ldr	r3, [r1, #4]
    1bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1bbc:	604b      	str	r3, [r1, #4]
    1bbe:	2300      	movs	r3, #0
    1bc0:	f383 8811 	msr	BASEPRI, r3
    1bc4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1bc8:	6893      	ldr	r3, [r2, #8]
}
    1bca:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1bcc:	4770      	bx	lr
    1bce:	bf00      	nop
    1bd0:	20000a20 	.word	0x20000a20
    1bd4:	00006c94 	.word	0x00006c94
    1bd8:	e000ed00 	.word	0xe000ed00

00001bdc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1bdc:	4913      	ldr	r1, [pc, #76]	; (1c2c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1bde:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1be0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1be4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1be6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1bea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1bee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1bf0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1bf4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1bf8:	4f0d      	ldr	r7, [pc, #52]	; (1c30 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1bfa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1bfe:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    1c00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1c02:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1c04:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1c06:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1c08:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1c0a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1c0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1c12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1c16:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    1c1a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    1c1e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1c20:	f003 fff2 	bl	5c08 <configure_builtin_stack_guard>
    pop {r2, lr}
    1c24:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1c28:	4770      	bx	lr
    1c2a:	0000      	.short	0x0000
    ldr r1, =_kernel
    1c2c:	20000a20 	.word	0x20000a20
    ldr v4, =_SCS_ICSR
    1c30:	e000ed04 	.word	0xe000ed04

00001c34 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1c34:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1c38:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1c3a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1c3e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1c42:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1c44:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1c48:	2902      	cmp	r1, #2
    beq _oops
    1c4a:	d0ff      	beq.n	1c4c <_oops>

00001c4c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1c4c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1c4e:	f003 ffcc 	bl	5bea <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1c52:	bd01      	pop	{r0, pc}

00001c54 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1c54:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1c58:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    1c5a:	490b      	ldr	r1, [pc, #44]	; (1c88 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1c5c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1c60:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    1c62:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1c66:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1c6a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1c6c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1c70:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1c78:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1c7c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1c7e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1c80:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1c82:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1c84:	4770      	bx	lr
    1c86:	bf00      	nop
    1c88:	000058f3 	.word	0x000058f3

00001c8c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1c8c:	4b08      	ldr	r3, [pc, #32]	; (1cb0 <arch_switch_to_main_thread+0x24>)
    1c8e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1c90:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1c92:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1c96:	4610      	mov	r0, r2
    1c98:	f381 8809 	msr	PSP, r1
    1c9c:	2100      	movs	r1, #0
    1c9e:	b663      	cpsie	if
    1ca0:	f381 8811 	msr	BASEPRI, r1
    1ca4:	f3bf 8f6f 	isb	sy
    1ca8:	2200      	movs	r2, #0
    1caa:	2300      	movs	r3, #0
    1cac:	f003 fe21 	bl	58f2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1cb0:	20000a20 	.word	0x20000a20

00001cb4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1cb4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1cb6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1cb8:	4a0b      	ldr	r2, [pc, #44]	; (1ce8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1cba:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    1cbc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1cbe:	bf1e      	ittt	ne
	movne	r1, #0
    1cc0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1cc2:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    1cc4:	f004 fc5a 	blne	657c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1cc8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1cca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1cce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1cd2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1cd6:	4905      	ldr	r1, [pc, #20]	; (1cec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1cd8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1cda:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1cdc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1cde:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1ce2:	4903      	ldr	r1, [pc, #12]	; (1cf0 <_isr_wrapper+0x3c>)
	bx r1
    1ce4:	4708      	bx	r1
    1ce6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ce8:	20000a20 	.word	0x20000a20
	ldr r1, =_sw_isr_table
    1cec:	0000682c 	.word	0x0000682c
	ldr r1, =z_arm_int_exit
    1cf0:	00001cf5 	.word	0x00001cf5

00001cf4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1cf4:	4b04      	ldr	r3, [pc, #16]	; (1d08 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1cf6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1cf8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    1cfa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1cfc:	d003      	beq.n	1d06 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1cfe:	4903      	ldr	r1, [pc, #12]	; (1d0c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1d04:	600a      	str	r2, [r1, #0]

00001d06 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1d06:	4770      	bx	lr
	ldr r3, =_kernel
    1d08:	20000a20 	.word	0x20000a20
	ldr r1, =_SCS_ICSR
    1d0c:	e000ed04 	.word	0xe000ed04

00001d10 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d10:	4b15      	ldr	r3, [pc, #84]	; (1d68 <usage_fault.constprop.0+0x58>)
    1d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1d14:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1d1a:	bf14      	ite	ne
    1d1c:	201e      	movne	r0, #30
    1d1e:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1d20:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1d26:	bf18      	it	ne
    1d28:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1d2a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    1d30:	bf18      	it	ne
    1d32:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1d34:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1d3a:	bf18      	it	ne
    1d3c:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1d3e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1d44:	bf18      	it	ne
    1d46:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1d48:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1d4e:	bf18      	it	ne
    1d50:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    1d52:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    1d58:	bf18      	it	ne
    1d5a:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d5c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1d60:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1d64:	629a      	str	r2, [r3, #40]	; 0x28
}
    1d66:	4770      	bx	lr
    1d68:	e000ed00 	.word	0xe000ed00

00001d6c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1d6c:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1d6e:	4b19      	ldr	r3, [pc, #100]	; (1dd4 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1d70:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1d72:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1d74:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    1d76:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    1d7a:	bf14      	ite	ne
    1d7c:	2017      	movne	r0, #23
    1d7e:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1d80:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1d84:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1d86:	bf18      	it	ne
    1d88:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1d8a:	05a4      	lsls	r4, r4, #22
    1d8c:	d509      	bpl.n	1da2 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    1d8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1d90:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1d92:	0400      	lsls	r0, r0, #16
    1d94:	d504      	bpl.n	1da0 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1d96:	b11a      	cbz	r2, 1da0 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1d9e:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1da0:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1da2:	4b0c      	ldr	r3, [pc, #48]	; (1dd4 <bus_fault.constprop.0+0x68>)
    1da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1da6:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1dac:	bf18      	it	ne
    1dae:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1db0:	05d2      	lsls	r2, r2, #23
    1db2:	d40c      	bmi.n	1dce <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    1db6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1dba:	bf18      	it	ne
    1dbc:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1dbe:	4a05      	ldr	r2, [pc, #20]	; (1dd4 <bus_fault.constprop.0+0x68>)
    1dc0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1dc2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1dc6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1dc8:	2300      	movs	r3, #0
    1dca:	700b      	strb	r3, [r1, #0]
}
    1dcc:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    1dce:	201b      	movs	r0, #27
    1dd0:	e7f5      	b.n	1dbe <bus_fault.constprop.0+0x52>
    1dd2:	bf00      	nop
    1dd4:	e000ed00 	.word	0xe000ed00

00001dd8 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1dd8:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1dda:	4b1c      	ldr	r3, [pc, #112]	; (1e4c <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1ddc:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1dde:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1de0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    1de2:	f010 0f10 	tst.w	r0, #16
    1de6:	bf14      	ite	ne
    1de8:	2011      	movne	r0, #17
    1dea:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1dec:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1df0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1df2:	bf18      	it	ne
    1df4:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1df6:	07a4      	lsls	r4, r4, #30
    1df8:	d509      	bpl.n	1e0e <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    1dfa:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1dfc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1dfe:	0600      	lsls	r0, r0, #24
    1e00:	d504      	bpl.n	1e0c <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1e02:	b11a      	cbz	r2, 1e0c <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1e0a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    1e0c:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1e0e:	4b0f      	ldr	r3, [pc, #60]	; (1e4c <mem_manage_fault.constprop.0+0x74>)
    1e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1e12:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1e18:	bf18      	it	ne
    1e1a:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1e1c:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1e22:	bf18      	it	ne
    1e24:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1e26:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1e28:	bf58      	it	pl
    1e2a:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1e2c:	4b07      	ldr	r3, [pc, #28]	; (1e4c <mem_manage_fault.constprop.0+0x74>)
    1e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e30:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1e32:	bf42      	ittt	mi
    1e34:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1e36:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1e3a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e3e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1e42:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e44:	2300      	movs	r3, #0
    1e46:	700b      	strb	r3, [r1, #0]
}
    1e48:	bd10      	pop	{r4, pc}
    1e4a:	bf00      	nop
    1e4c:	e000ed00 	.word	0xe000ed00

00001e50 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1e50:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e52:	4b44      	ldr	r3, [pc, #272]	; (1f64 <z_arm_fault+0x114>)
{
    1e54:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e56:	685b      	ldr	r3, [r3, #4]
    1e58:	2500      	movs	r5, #0
{
    1e5a:	b08a      	sub	sp, #40	; 0x28
    1e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1e60:	f385 8811 	msr	BASEPRI, r5
    1e64:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1e68:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1e6c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1e70:	d111      	bne.n	1e96 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1e72:	f002 000c 	and.w	r0, r2, #12
    1e76:	2808      	cmp	r0, #8
    1e78:	d00d      	beq.n	1e96 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1e7a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1e7c:	bf4c      	ite	mi
    1e7e:	460e      	movmi	r6, r1
			*nested_exc = true;
    1e80:	2501      	movpl	r5, #1
	*recoverable = false;
    1e82:	2200      	movs	r2, #0
	switch (fault) {
    1e84:	3b03      	subs	r3, #3
	*recoverable = false;
    1e86:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1e8a:	2b03      	cmp	r3, #3
    1e8c:	d805      	bhi.n	1e9a <z_arm_fault+0x4a>
    1e8e:	e8df f003 	tbb	[pc, r3]
    1e92:	5c1e      	.short	0x5c1e
    1e94:	5960      	.short	0x5960
		return NULL;
    1e96:	462e      	mov	r6, r5
    1e98:	e7f3      	b.n	1e82 <z_arm_fault+0x32>
    1e9a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1e9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1ea0:	b99b      	cbnz	r3, 1eca <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1ea2:	2220      	movs	r2, #32
    1ea4:	4631      	mov	r1, r6
    1ea6:	a802      	add	r0, sp, #8
    1ea8:	f003 fef2 	bl	5c90 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1eae:	2d00      	cmp	r5, #0
    1eb0:	d053      	beq.n	1f5a <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1eb6:	b922      	cbnz	r2, 1ec2 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1eb8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1ebc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1ec0:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    1ec2:	4620      	mov	r0, r4
    1ec4:	a902      	add	r1, sp, #8
    1ec6:	f003 fe8e 	bl	5be6 <z_arm_fatal_error>
}
    1eca:	b00a      	add	sp, #40	; 0x28
    1ecc:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1ece:	4b25      	ldr	r3, [pc, #148]	; (1f64 <z_arm_fault+0x114>)
    1ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ed2:	0791      	lsls	r1, r2, #30
    1ed4:	d4e1      	bmi.n	1e9a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ed8:	2a00      	cmp	r2, #0
    1eda:	dbde      	blt.n	1e9a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ede:	0052      	lsls	r2, r2, #1
    1ee0:	d5db      	bpl.n	1e9a <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1ee2:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1ee4:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1eea:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ef0:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1ef4:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    1ef6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1efe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1f00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f04:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1f08:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1f0c:	4291      	cmp	r1, r2
    1f0e:	d009      	beq.n	1f24 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f12:	b2d2      	uxtb	r2, r2
    1f14:	b142      	cbz	r2, 1f28 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1f16:	2001      	movs	r0, #1
    1f18:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1f1c:	f7ff ff5c 	bl	1dd8 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    1f20:	4604      	mov	r4, r0
		break;
    1f22:	e7bb      	b.n	1e9c <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    1f24:	6834      	ldr	r4, [r6, #0]
    1f26:	e7b9      	b.n	1e9c <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f2a:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    1f2e:	d005      	beq.n	1f3c <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    1f30:	2001      	movs	r0, #1
    1f32:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1f36:	f7ff ff19 	bl	1d6c <bus_fault.constprop.0>
    1f3a:	e7f1      	b.n	1f20 <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1f42:	d3aa      	bcc.n	1e9a <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    1f44:	f7ff fee4 	bl	1d10 <usage_fault.constprop.0>
    1f48:	e7ea      	b.n	1f20 <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    1f4a:	2000      	movs	r0, #0
    1f4c:	f10d 0107 	add.w	r1, sp, #7
    1f50:	e7e4      	b.n	1f1c <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    1f52:	2000      	movs	r0, #0
    1f54:	f10d 0107 	add.w	r1, sp, #7
    1f58:	e7ed      	b.n	1f36 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1f5a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1f5e:	f023 0301 	bic.w	r3, r3, #1
    1f62:	e7ad      	b.n	1ec0 <z_arm_fault+0x70>
    1f64:	e000ed00 	.word	0xe000ed00

00001f68 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1f68:	4b04      	ldr	r3, [pc, #16]	; (1f7c <z_arm_fault_init+0x14>)
    1f6a:	695a      	ldr	r2, [r3, #20]
    1f6c:	f042 0210 	orr.w	r2, r2, #16
    1f70:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1f72:	695a      	ldr	r2, [r3, #20]
    1f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1f78:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1f7a:	4770      	bx	lr
    1f7c:	e000ed00 	.word	0xe000ed00

00001f80 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1f80:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1f84:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1f88:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1f8a:	4672      	mov	r2, lr
	bl z_arm_fault
    1f8c:	f7ff ff60 	bl	1e50 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1f90:	bd01      	pop	{r0, pc}
    1f92:	bf00      	nop

00001f94 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1f94:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f96:	2120      	movs	r1, #32
    1f98:	4803      	ldr	r0, [pc, #12]	; (1fa8 <z_arm_interrupt_init+0x14>)
    1f9a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1f9c:	3301      	adds	r3, #1
    1f9e:	2b45      	cmp	r3, #69	; 0x45
    1fa0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1fa4:	d1f9      	bne.n	1f9a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1fa6:	4770      	bx	lr
    1fa8:	e000e100 	.word	0xe000e100

00001fac <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1fac:	2000      	movs	r0, #0
    msr CONTROL, r0
    1fae:	f380 8814 	msr	CONTROL, r0
    isb
    1fb2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1fb6:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1fb8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1fbc:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1fc0:	f7ff fb32 	bl	1628 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1fc4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1fc6:	490e      	ldr	r1, [pc, #56]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)
    str r0, [r1]
    1fc8:	6008      	str	r0, [r1, #0]
    dsb
    1fca:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1fce:	480d      	ldr	r0, [pc, #52]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)
    msr msp, r0
    1fd0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1fd4:	f000 f83e 	bl	2054 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1fd8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1fda:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1fde:	480a      	ldr	r0, [pc, #40]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1fe4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1fe6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1fea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1fee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1ff0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1ff2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1ff6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1ffa:	f7ff fdb9 	bl	1b70 <z_arm_prep_c>
    1ffe:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2000:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2004:	20001d98 	.word	0x20001d98
    ldr r0, =z_interrupt_stacks
    2008:	20001058 	.word	0x20001058

0000200c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    200c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2010:	4905      	ldr	r1, [pc, #20]	; (2028 <sys_arch_reboot+0x1c>)
    2012:	4b06      	ldr	r3, [pc, #24]	; (202c <sys_arch_reboot+0x20>)
    2014:	68ca      	ldr	r2, [r1, #12]
    2016:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    201a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    201c:	60cb      	str	r3, [r1, #12]
    201e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2022:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2024:	e7fd      	b.n	2022 <sys_arch_reboot+0x16>
    2026:	bf00      	nop
    2028:	e000ed00 	.word	0xe000ed00
    202c:	05fa0004 	.word	0x05fa0004

00002030 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2030:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2032:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2034:	4906      	ldr	r1, [pc, #24]	; (2050 <z_arm_clear_arm_mpu_config+0x20>)
    2036:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    203a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    203e:	4293      	cmp	r3, r2
    2040:	db00      	blt.n	2044 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2042:	4770      	bx	lr
  mpu->RNR = rnr;
    2044:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    2048:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    204c:	3301      	adds	r3, #1
    204e:	e7f6      	b.n	203e <z_arm_clear_arm_mpu_config+0xe>
    2050:	e000ed00 	.word	0xe000ed00

00002054 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2054:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2056:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2058:	2400      	movs	r4, #0
    205a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    205e:	f7ff ffe7 	bl	2030 <z_arm_clear_arm_mpu_config>
    2062:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2064:	f04f 30ff 	mov.w	r0, #4294967295
    2068:	4a0c      	ldr	r2, [pc, #48]	; (209c <z_arm_init_arch_hw_at_boot+0x48>)
    206a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    206e:	3301      	adds	r3, #1
    2070:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    2072:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2076:	d1f8      	bne.n	206a <z_arm_init_arch_hw_at_boot+0x16>
    2078:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    207a:	f04f 30ff 	mov.w	r0, #4294967295
    207e:	4a07      	ldr	r2, [pc, #28]	; (209c <z_arm_init_arch_hw_at_boot+0x48>)
    2080:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2084:	3301      	adds	r3, #1
    2086:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2088:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    208c:	d1f8      	bne.n	2080 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    208e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2094:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2098:	bd10      	pop	{r4, pc}
    209a:	bf00      	nop
    209c:	e000e100 	.word	0xe000e100

000020a0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    20a0:	4b08      	ldr	r3, [pc, #32]	; (20c4 <z_impl_k_thread_abort+0x24>)
    20a2:	689b      	ldr	r3, [r3, #8]
    20a4:	4283      	cmp	r3, r0
    20a6:	d10b      	bne.n	20c0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    20a8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    20ac:	b143      	cbz	r3, 20c0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <z_impl_k_thread_abort+0x28>)
    20b0:	685a      	ldr	r2, [r3, #4]
    20b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    20b6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    20b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    20ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    20be:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    20c0:	f003 b8a4 	b.w	520c <z_thread_abort>
    20c4:	20000a20 	.word	0x20000a20
    20c8:	e000ed00 	.word	0xe000ed00

000020cc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    20cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    20ce:	4c09      	ldr	r4, [pc, #36]	; (20f4 <z_arm_configure_static_mpu_regions+0x28>)
    20d0:	4a09      	ldr	r2, [pc, #36]	; (20f8 <z_arm_configure_static_mpu_regions+0x2c>)
    20d2:	4623      	mov	r3, r4
    20d4:	2101      	movs	r1, #1
    20d6:	4809      	ldr	r0, [pc, #36]	; (20fc <z_arm_configure_static_mpu_regions+0x30>)
    20d8:	f000 f8ea 	bl	22b0 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    20dc:	2300      	movs	r3, #0
    20de:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    20e0:	4b07      	ldr	r3, [pc, #28]	; (2100 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    20e2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    20e4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    20e6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    20e8:	9301      	str	r3, [sp, #4]
    20ea:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    20ec:	f000 f8ea 	bl	22c4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    20f0:	b004      	add	sp, #16
    20f2:	bd10      	pop	{r4, pc}
    20f4:	20070000 	.word	0x20070000
    20f8:	20000000 	.word	0x20000000
    20fc:	00006b34 	.word	0x00006b34
    2100:	200001b8 	.word	0x200001b8

00002104 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2104:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    2106:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2108:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    210a:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    210e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    2112:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2114:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2116:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2118:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    211c:	4905      	ldr	r1, [pc, #20]	; (2134 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    211e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2122:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    2126:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    212a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    212e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2132:	bd10      	pop	{r4, pc}
    2134:	e000ed00 	.word	0xe000ed00

00002138 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    213c:	460f      	mov	r7, r1
    213e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2140:	4606      	mov	r6, r0
    2142:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    2146:	4d4e      	ldr	r5, [pc, #312]	; (2280 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2148:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    214a:	45b8      	cmp	r8, r7
    214c:	f280 8094 	bge.w	2278 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    2150:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2154:	f1b9 0f00 	cmp.w	r9, #0
    2158:	d036      	beq.n	21c8 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    215a:	f1b9 0f1f 	cmp.w	r9, #31
    215e:	f240 8089 	bls.w	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    2162:	f019 0f1f 	tst.w	r9, #31
    2166:	f040 8085 	bne.w	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    216a:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    216e:	f01a 0f1f 	tst.w	sl, #31
    2172:	d17f      	bne.n	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2174:	4650      	mov	r0, sl
    2176:	f003 fd4b 	bl	5c10 <arm_cmse_mpu_region_get>
    217a:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    217c:	eb09 000a 	add.w	r0, r9, sl
    2180:	3801      	subs	r0, #1
    2182:	f003 fd45 	bl	5c10 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2186:	4583      	cmp	fp, r0
    2188:	d174      	bne.n	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    218a:	f11b 0f16 	cmn.w	fp, #22
    218e:	d071      	beq.n	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    2190:	455c      	cmp	r4, fp
    2192:	dd6f      	ble.n	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    2194:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    2198:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    219c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    21a0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    21a4:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    21a8:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    21ac:	e9d6 3200 	ldrd	r3, r2, [r6]
    21b0:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    21b2:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    21b4:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    21b8:	d11e      	bne.n	21f8 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    21ba:	45ca      	cmp	sl, r9
    21bc:	d108      	bne.n	21d0 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    21be:	4631      	mov	r1, r6
    21c0:	fa5f f08b 	uxtb.w	r0, fp
    21c4:	f003 fd2d 	bl	5c22 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    21c8:	f108 0801 	add.w	r8, r8, #1
    21cc:	360c      	adds	r6, #12
    21ce:	e7bc      	b.n	214a <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    21d0:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    21d2:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    21d6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    21da:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    21de:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    21e2:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    21e4:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    21e8:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    21ea:	f003 fd1a 	bl	5c22 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    21ee:	f110 0f16 	cmn.w	r0, #22
    21f2:	d03f      	beq.n	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    21f4:	1c44      	adds	r4, r0, #1
    21f6:	e7e7      	b.n	21c8 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    21f8:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    21fc:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    2200:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    2202:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    2206:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    220a:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    220c:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    220e:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    2210:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    2212:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    2216:	d0e8      	beq.n	21ea <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    2218:	f003 fd03 	bl	5c22 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    221c:	f110 0f16 	cmn.w	r0, #22
    2220:	d028      	beq.n	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    2222:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    2226:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    222a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    222e:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
    2232:	f362 0304 	bfi	r3, r2, #0, #5
    2236:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    223a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    223e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2242:	085b      	lsrs	r3, r3, #1
    2244:	f363 1247 	bfi	r2, r3, #5, #3
    2248:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    224c:	e9d6 3200 	ldrd	r3, r2, [r6]
    2250:	4413      	add	r3, r2
    2252:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    2254:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    2258:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    225a:	4453      	add	r3, sl
    225c:	eba3 0309 	sub.w	r3, r3, r9
    2260:	b2c8      	uxtb	r0, r1
    2262:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    2266:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    2268:	9303      	str	r3, [sp, #12]
    226a:	d803      	bhi.n	2274 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    226c:	4669      	mov	r1, sp
    226e:	f7ff ff49 	bl	2104 <region_init>
    2272:	e7bf      	b.n	21f4 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    2274:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    2278:	4620      	mov	r0, r4
    227a:	b005      	add	sp, #20
    227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2280:	e000ed00 	.word	0xe000ed00

00002284 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2284:	2205      	movs	r2, #5
    2286:	4b04      	ldr	r3, [pc, #16]	; (2298 <arm_core_mpu_enable+0x14>)
    2288:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    228c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2290:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2294:	4770      	bx	lr
    2296:	bf00      	nop
    2298:	e000ed00 	.word	0xe000ed00

0000229c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    229c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    22a0:	2200      	movs	r2, #0
    22a2:	4b02      	ldr	r3, [pc, #8]	; (22ac <arm_core_mpu_disable+0x10>)
    22a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    22a8:	4770      	bx	lr
    22aa:	bf00      	nop
    22ac:	e000ed00 	.word	0xe000ed00

000022b0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    22b0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    22b2:	4c03      	ldr	r4, [pc, #12]	; (22c0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    22b4:	7822      	ldrb	r2, [r4, #0]
    22b6:	f7ff ff3f 	bl	2138 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    22ba:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    22bc:	bd10      	pop	{r4, pc}
    22be:	bf00      	nop
    22c0:	20000c2e 	.word	0x20000c2e

000022c4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    22c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22c8:	4d29      	ldr	r5, [pc, #164]	; (2370 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    22ca:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    22cc:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    22ce:	f04f 0800 	mov.w	r8, #0
    22d2:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    22d4:	4f27      	ldr	r7, [pc, #156]	; (2374 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    22d6:	45d0      	cmp	r8, sl
    22d8:	da1b      	bge.n	2312 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    22da:	f8d6 9004 	ldr.w	r9, [r6, #4]
    22de:	f1b9 0f00 	cmp.w	r9, #0
    22e2:	d03f      	beq.n	2364 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    22e4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    22e6:	4608      	mov	r0, r1
    22e8:	9101      	str	r1, [sp, #4]
    22ea:	f003 fc91 	bl	5c10 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    22ee:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    22f0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    22f2:	eb09 0001 	add.w	r0, r9, r1
    22f6:	3801      	subs	r0, #1
    22f8:	f003 fc8a 	bl	5c10 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    22fc:	4284      	cmp	r4, r0
    22fe:	f04f 0214 	mov.w	r2, #20
    2302:	4b1d      	ldr	r3, [pc, #116]	; (2378 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    2304:	d008      	beq.n	2318 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    2306:	fb02 f308 	mul.w	r3, r2, r8
    230a:	f06f 0215 	mvn.w	r2, #21
    230e:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    2312:	b003      	add	sp, #12
    2314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2318:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    231c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    231e:	d0f8      	beq.n	2312 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2320:	7819      	ldrb	r1, [r3, #0]
    2322:	42a1      	cmp	r1, r4
    2324:	ddf5      	ble.n	2312 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    2326:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    232a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    232e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    2332:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    2336:	f100 0108 	add.w	r1, r0, #8
    233a:	7b00      	ldrb	r0, [r0, #12]
    233c:	f364 0004 	bfi	r0, r4, #0, #5
    2340:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    2342:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    2346:	790c      	ldrb	r4, [r1, #4]
    2348:	0840      	lsrs	r0, r0, #1
    234a:	f360 1447 	bfi	r4, r0, #5, #3
    234e:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    2350:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    2354:	f021 011f 	bic.w	r1, r1, #31
    2358:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    235a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    235e:	f021 011f 	bic.w	r1, r1, #31
    2362:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2364:	f108 0801 	add.w	r8, r8, #1
    2368:	3514      	adds	r5, #20
    236a:	360c      	adds	r6, #12
    236c:	e7b3      	b.n	22d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    236e:	bf00      	nop
    2370:	2000084c 	.word	0x2000084c
    2374:	e000ed00 	.word	0xe000ed00
    2378:	20000c2e 	.word	0x20000c2e

0000237c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    237c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    237e:	4d0e      	ldr	r5, [pc, #56]	; (23b8 <z_arm_mpu_init+0x3c>)
    2380:	682c      	ldr	r4, [r5, #0]
    2382:	2c08      	cmp	r4, #8
    2384:	d815      	bhi.n	23b2 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2386:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    2388:	f7ff ff88 	bl	229c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    238c:	4b0b      	ldr	r3, [pc, #44]	; (23bc <z_arm_mpu_init+0x40>)
    238e:	4a0c      	ldr	r2, [pc, #48]	; (23c0 <z_arm_mpu_init+0x44>)
    2390:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2394:	4284      	cmp	r4, r0
    2396:	d105      	bne.n	23a4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2398:	4b0a      	ldr	r3, [pc, #40]	; (23c4 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    239a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    239c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    239e:	f7ff ff71 	bl	2284 <arm_core_mpu_enable>
}
    23a2:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    23a4:	6869      	ldr	r1, [r5, #4]
    23a6:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    23aa:	f7ff feab 	bl	2104 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    23ae:	3001      	adds	r0, #1
    23b0:	e7f0      	b.n	2394 <z_arm_mpu_init+0x18>
		return -1;
    23b2:	f04f 30ff 	mov.w	r0, #4294967295
    23b6:	e7f4      	b.n	23a2 <z_arm_mpu_init+0x26>
    23b8:	00006b40 	.word	0x00006b40
    23bc:	e000ed00 	.word	0xe000ed00
    23c0:	0044ffaa 	.word	0x0044ffaa
    23c4:	20000c2e 	.word	0x20000c2e

000023c8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    23c8:	4b01      	ldr	r3, [pc, #4]	; (23d0 <__stdout_hook_install+0x8>)
    23ca:	6018      	str	r0, [r3, #0]
}
    23cc:	4770      	bx	lr
    23ce:	bf00      	nop
    23d0:	20000028 	.word	0x20000028

000023d4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    23d4:	4b08      	ldr	r3, [pc, #32]	; (23f8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    23d6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    23d8:	1ac3      	subs	r3, r0, r3
{
    23da:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23dc:	4907      	ldr	r1, [pc, #28]	; (23fc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    23de:	109b      	asrs	r3, r3, #2
{
    23e0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23e2:	4359      	muls	r1, r3
    23e4:	2240      	movs	r2, #64	; 0x40
    23e6:	4806      	ldr	r0, [pc, #24]	; (2400 <onoff_stop+0x2c>)
    23e8:	f003 fc85 	bl	5cf6 <stop>
	notify(mgr, res);
    23ec:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    23ee:	4601      	mov	r1, r0
	notify(mgr, res);
    23f0:	4620      	mov	r0, r4
}
    23f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    23f6:	4718      	bx	r3
    23f8:	20000874 	.word	0x20000874
    23fc:	b6db6db7 	.word	0xb6db6db7
    2400:	000067b4 	.word	0x000067b4

00002404 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2404:	2340      	movs	r3, #64	; 0x40
{
    2406:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2408:	4c0b      	ldr	r4, [pc, #44]	; (2438 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    240a:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    240c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    240e:	460b      	mov	r3, r1
{
    2410:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2412:	490a      	ldr	r1, [pc, #40]	; (243c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    2414:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2416:	4361      	muls	r1, r4
{
    2418:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    241a:	4a09      	ldr	r2, [pc, #36]	; (2440 <onoff_start+0x3c>)
    241c:	4809      	ldr	r0, [pc, #36]	; (2444 <onoff_start+0x40>)
    241e:	f003 fc97 	bl	5d50 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2422:	1e01      	subs	r1, r0, #0
    2424:	da05      	bge.n	2432 <onoff_start+0x2e>
		notify(mgr, err);
    2426:	4630      	mov	r0, r6
    2428:	462b      	mov	r3, r5
	}
}
    242a:	b002      	add	sp, #8
    242c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2430:	4718      	bx	r3
}
    2432:	b002      	add	sp, #8
    2434:	bd70      	pop	{r4, r5, r6, pc}
    2436:	bf00      	nop
    2438:	20000874 	.word	0x20000874
    243c:	b6db6db7 	.word	0xb6db6db7
    2440:	00005dbd 	.word	0x00005dbd
    2444:	000067b4 	.word	0x000067b4

00002448 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    244c:	2200      	movs	r2, #0
    244e:	2101      	movs	r1, #1
{
    2450:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2452:	2005      	movs	r0, #5
    2454:	f7ff fb72 	bl	1b3c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2458:	4811      	ldr	r0, [pc, #68]	; (24a0 <clk_init+0x58>)
    245a:	f001 f957 	bl	370c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    245e:	4b11      	ldr	r3, [pc, #68]	; (24a4 <clk_init+0x5c>)
    2460:	4298      	cmp	r0, r3
    2462:	d119      	bne.n	2498 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2464:	f003 feac 	bl	61c0 <nrfx_clock_enable>
    2468:	2400      	movs	r4, #0
	return &data->mgr[type];
    246a:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    246e:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2470:	f8df 8034 	ldr.w	r8, [pc, #52]	; 24a8 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    2474:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2476:	4641      	mov	r1, r8
    2478:	fb09 5004 	mla	r0, r9, r4, r5
    247c:	f003 fa93 	bl	59a6 <onoff_manager_init>
		if (err < 0) {
    2480:	2800      	cmp	r0, #0
    2482:	db07      	blt.n	2494 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2484:	2301      	movs	r3, #1
    2486:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    248a:	441c      	add	r4, r3
    248c:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    248e:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2490:	d1f0      	bne.n	2474 <clk_init+0x2c>
	}

	return 0;
    2492:	2000      	movs	r0, #0
}
    2494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2498:	f06f 0004 	mvn.w	r0, #4
    249c:	e7fa      	b.n	2494 <clk_init+0x4c>
    249e:	bf00      	nop
    24a0:	000024e1 	.word	0x000024e1
    24a4:	0bad0000 	.word	0x0bad0000
    24a8:	00006b68 	.word	0x00006b68

000024ac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    24ac:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    24ae:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    24b0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    24b2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    24b4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    24b6:	4808      	ldr	r0, [pc, #32]	; (24d8 <clkstarted_handle.constprop.0+0x2c>)
    24b8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    24ba:	3378      	adds	r3, #120	; 0x78
    24bc:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    24be:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    24c2:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    24c4:	f003 fc04 	bl	5cd0 <set_on_state>
	if (callback) {
    24c8:	b12d      	cbz	r5, 24d6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    24ca:	4632      	mov	r2, r6
    24cc:	462b      	mov	r3, r5
}
    24ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    24d2:	4802      	ldr	r0, [pc, #8]	; (24dc <clkstarted_handle.constprop.0+0x30>)
    24d4:	4718      	bx	r3
}
    24d6:	bd70      	pop	{r4, r5, r6, pc}
    24d8:	20000874 	.word	0x20000874
    24dc:	000067b4 	.word	0x000067b4

000024e0 <clock_event_handler>:
	switch (event) {
    24e0:	2805      	cmp	r0, #5
    24e2:	d811      	bhi.n	2508 <clock_event_handler+0x28>
    24e4:	e8df f000 	tbb	[pc, r0]
    24e8:	10100e03 	.word	0x10100e03
    24ec:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    24ee:	4b07      	ldr	r3, [pc, #28]	; (250c <clock_event_handler+0x2c>)
    24f0:	6f98      	ldr	r0, [r3, #120]	; 0x78
    24f2:	f010 0007 	ands.w	r0, r0, #7
    24f6:	d107      	bne.n	2508 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    24f8:	f7ff bfd8 	b.w	24ac <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    24fc:	2002      	movs	r0, #2
    24fe:	e7fb      	b.n	24f8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    2500:	2003      	movs	r0, #3
    2502:	e7f9      	b.n	24f8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2504:	2001      	movs	r0, #1
    2506:	e7f7      	b.n	24f8 <clock_event_handler+0x18>
}
    2508:	4770      	bx	lr
    250a:	bf00      	nop
    250c:	20000874 	.word	0x20000874

00002510 <generic_hfclk_start>:
{
    2510:	b508      	push	{r3, lr}
	__asm__ volatile(
    2512:	f04f 0320 	mov.w	r3, #32
    2516:	f3ef 8111 	mrs	r1, BASEPRI
    251a:	f383 8812 	msr	BASEPRI_MAX, r3
    251e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2522:	4a12      	ldr	r2, [pc, #72]	; (256c <generic_hfclk_start+0x5c>)
    2524:	6813      	ldr	r3, [r2, #0]
    2526:	f043 0002 	orr.w	r0, r3, #2
    252a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    252c:	07da      	lsls	r2, r3, #31
    252e:	d408      	bmi.n	2542 <generic_hfclk_start+0x32>
	__asm__ volatile(
    2530:	f381 8811 	msr	BASEPRI, r1
    2534:	f3bf 8f6f 	isb	sy
}
    2538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    253c:	2001      	movs	r0, #1
    253e:	f003 be51 	b.w	61e4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2542:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2546:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    254a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    254e:	07d3      	lsls	r3, r2, #31
    2550:	d5ee      	bpl.n	2530 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    2552:	4807      	ldr	r0, [pc, #28]	; (2570 <generic_hfclk_start+0x60>)
    2554:	f003 fbbc 	bl	5cd0 <set_on_state>
    2558:	f381 8811 	msr	BASEPRI, r1
    255c:	f3bf 8f6f 	isb	sy
}
    2560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2564:	2000      	movs	r0, #0
    2566:	f7ff bfa1 	b.w	24ac <clkstarted_handle.constprop.0>
    256a:	bf00      	nop
    256c:	20000914 	.word	0x20000914
    2570:	200008ec 	.word	0x200008ec

00002574 <api_blocking_start>:
{
    2574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2576:	2200      	movs	r2, #0
    2578:	2301      	movs	r3, #1
    257a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    257e:	466b      	mov	r3, sp
    2580:	4a08      	ldr	r2, [pc, #32]	; (25a4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2582:	f8cd d000 	str.w	sp, [sp]
    2586:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    258a:	f003 fc10 	bl	5dae <api_start>
	if (err < 0) {
    258e:	2800      	cmp	r0, #0
    2590:	db05      	blt.n	259e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2596:	2300      	movs	r3, #0
    2598:	4668      	mov	r0, sp
    259a:	f002 fb2d 	bl	4bf8 <z_impl_k_sem_take>
}
    259e:	b005      	add	sp, #20
    25a0:	f85d fb04 	ldr.w	pc, [sp], #4
    25a4:	00005df3 	.word	0x00005df3

000025a8 <generic_hfclk_stop>:
{
    25a8:	b510      	push	{r4, lr}
	__asm__ volatile(
    25aa:	f04f 0320 	mov.w	r3, #32
    25ae:	f3ef 8411 	mrs	r4, BASEPRI
    25b2:	f383 8812 	msr	BASEPRI_MAX, r3
    25b6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    25ba:	4a07      	ldr	r2, [pc, #28]	; (25d8 <generic_hfclk_stop+0x30>)
    25bc:	6813      	ldr	r3, [r2, #0]
    25be:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    25c2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    25c4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    25c6:	d402      	bmi.n	25ce <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    25c8:	2001      	movs	r0, #1
    25ca:	f003 fe6a 	bl	62a2 <nrfx_clock_stop>
	__asm__ volatile(
    25ce:	f384 8811 	msr	BASEPRI, r4
    25d2:	f3bf 8f6f 	isb	sy
}
    25d6:	bd10      	pop	{r4, pc}
    25d8:	20000914 	.word	0x20000914

000025dc <z_nrf_clock_control_lf_on>:
{
    25dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    25e0:	2201      	movs	r2, #1
    25e2:	4607      	mov	r7, r0
    25e4:	4937      	ldr	r1, [pc, #220]	; (26c4 <z_nrf_clock_control_lf_on+0xe8>)
    25e6:	e8d1 3fef 	ldaex	r3, [r1]
    25ea:	e8c1 2fe0 	stlex	r0, r2, [r1]
    25ee:	2800      	cmp	r0, #0
    25f0:	d1f9      	bne.n	25e6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    25f2:	b933      	cbnz	r3, 2602 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    25f4:	4934      	ldr	r1, [pc, #208]	; (26c8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    25f6:	4835      	ldr	r0, [pc, #212]	; (26cc <z_nrf_clock_control_lf_on+0xf0>)
    25f8:	604b      	str	r3, [r1, #4]
    25fa:	60cb      	str	r3, [r1, #12]
    25fc:	608a      	str	r2, [r1, #8]
    25fe:	f003 f9e5 	bl	59cc <onoff_request>
	switch (start_mode) {
    2602:	1e7b      	subs	r3, r7, #1
    2604:	2b01      	cmp	r3, #1
    2606:	d82b      	bhi.n	2660 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2608:	2f01      	cmp	r7, #1
    260a:	d107      	bne.n	261c <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    260c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2610:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2614:	f003 0303 	and.w	r3, r3, #3
    2618:	2b02      	cmp	r3, #2
    261a:	d021      	beq.n	2660 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    261c:	f003 ffa8 	bl	6570 <k_is_in_isr>
    2620:	4605      	mov	r5, r0
    2622:	b9f8      	cbnz	r0, 2664 <z_nrf_clock_control_lf_on+0x88>
	return !z_sys_post_kernel;
    2624:	4b2a      	ldr	r3, [pc, #168]	; (26d0 <z_nrf_clock_control_lf_on+0xf4>)
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	b1e3      	cbz	r3, 2664 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    262a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    262e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    2630:	4606      	mov	r6, r0
    2632:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2636:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    263a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 26d4 <z_nrf_clock_control_lf_on+0xf8>
    263e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2642:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    2646:	03d2      	lsls	r2, r2, #15
    2648:	d516      	bpl.n	2678 <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    264a:	f003 0303 	and.w	r3, r3, #3
    264e:	2b02      	cmp	r3, #2
    2650:	d001      	beq.n	2656 <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2652:	2f01      	cmp	r7, #1
    2654:	d110      	bne.n	2678 <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    2656:	b375      	cbz	r5, 26b6 <z_nrf_clock_control_lf_on+0xda>
    2658:	f386 8811 	msr	BASEPRI, r6
    265c:	f3bf 8f6f 	isb	sy
}
    2660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    2664:	f04f 0320 	mov.w	r3, #32
    2668:	f3ef 8611 	mrs	r6, BASEPRI
    266c:	f383 8812 	msr	BASEPRI_MAX, r3
    2670:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2674:	2501      	movs	r5, #1
    2676:	e7de      	b.n	2636 <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2678:	b1c5      	cbz	r5, 26ac <z_nrf_clock_control_lf_on+0xd0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    267a:	4630      	mov	r0, r6
    267c:	f7ff fa1c 	bl	1ab8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2680:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2684:	b2db      	uxtb	r3, r3
    2686:	2b01      	cmp	r3, #1
    2688:	d1d9      	bne.n	263e <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    268a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    268e:	2a00      	cmp	r2, #0
    2690:	d0d5      	beq.n	263e <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2692:	2200      	movs	r2, #0
    2694:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    2698:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    269c:	2202      	movs	r2, #2
    269e:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    26a2:	2220      	movs	r2, #32
    26a4:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26a8:	60a3      	str	r3, [r4, #8]
}
    26aa:	e7c8      	b.n	263e <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    26ac:	2100      	movs	r1, #0
    26ae:	2021      	movs	r0, #33	; 0x21
    26b0:	f002 fd8c 	bl	51cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    26b4:	e7e4      	b.n	2680 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    26b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    26ba:	2202      	movs	r2, #2
    26bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    26c0:	e7ce      	b.n	2660 <z_nrf_clock_control_lf_on+0x84>
    26c2:	bf00      	nop
    26c4:	20000870 	.word	0x20000870
    26c8:	20000860 	.word	0x20000860
    26cc:	20000890 	.word	0x20000890
    26d0:	20001052 	.word	0x20001052
    26d4:	e000e100 	.word	0xe000e100

000026d8 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    26d8:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    26da:	4c04      	ldr	r4, [pc, #16]	; (26ec <rtt_console_init+0x14>)
    26dc:	4620      	mov	r0, r4
    26de:	f7fd ff77 	bl	5d0 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    26e2:	4620      	mov	r0, r4
    26e4:	f7ff fe70 	bl	23c8 <__stdout_hook_install>

	return 0;
}
    26e8:	2000      	movs	r0, #0
    26ea:	bd10      	pop	{r4, pc}
    26ec:	000026f1 	.word	0x000026f1

000026f0 <rtt_console_out>:
{
    26f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26f2:	4604      	mov	r4, r0
	char c = (char)character;
    26f4:	2503      	movs	r5, #3
    26f6:	4e13      	ldr	r6, [pc, #76]	; (2744 <rtt_console_out+0x54>)
    26f8:	f88d 0007 	strb.w	r0, [sp, #7]
		SEGGER_RTT_LOCK();
    26fc:	f3ef 8711 	mrs	r7, BASEPRI
    2700:	f04f 0120 	mov.w	r1, #32
    2704:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    2708:	2201      	movs	r2, #1
    270a:	f10d 0107 	add.w	r1, sp, #7
    270e:	2000      	movs	r0, #0
    2710:	f001 ff9c 	bl	464c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    2714:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    2718:	b120      	cbz	r0, 2724 <rtt_console_out+0x34>
			host_present = true;
    271a:	2301      	movs	r3, #1
    271c:	7033      	strb	r3, [r6, #0]
}
    271e:	4620      	mov	r0, r4
    2720:	b003      	add	sp, #12
    2722:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    2724:	7833      	ldrb	r3, [r6, #0]
    2726:	2b00      	cmp	r3, #0
    2728:	d0f9      	beq.n	271e <rtt_console_out+0x2e>
			if (max_cnt) {
    272a:	3d01      	subs	r5, #1
    272c:	d008      	beq.n	2740 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    272e:	f003 ff1f 	bl	6570 <k_is_in_isr>
    2732:	2800      	cmp	r0, #0
    2734:	d1e2      	bne.n	26fc <rtt_console_out+0xc>
    2736:	2100      	movs	r1, #0
    2738:	2042      	movs	r0, #66	; 0x42
    273a:	f002 fd47 	bl	51cc <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    273e:	e7dd      	b.n	26fc <rtt_console_out+0xc>
				host_present = false;
    2740:	7035      	strb	r5, [r6, #0]
    2742:	e7ec      	b.n	271e <rtt_console_out+0x2e>
    2744:	20000c2f 	.word	0x20000c2f

00002748 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2748:	b530      	push	{r4, r5, lr}
	return port->config;
    274a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    274c:	f001 041f 	and.w	r4, r1, #31
    2750:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2752:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    2756:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2758:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    275c:	d105      	bne.n	276a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    275e:	4620      	mov	r0, r4
    2760:	f001 fa84 	bl	3c6c <nrfx_gpiote_trigger_disable>

		return 0;
    2764:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    2766:	b005      	add	sp, #20
    2768:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    276a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    276c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2770:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2774:	d114      	bne.n	27a0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    277a:	bf0c      	ite	eq
    277c:	2304      	moveq	r3, #4
    277e:	2305      	movne	r3, #5
    2780:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2784:	2300      	movs	r3, #0
    2786:	4620      	mov	r0, r4
    2788:	4619      	mov	r1, r3
    278a:	aa02      	add	r2, sp, #8
    278c:	f001 f8ac 	bl	38e8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2790:	4b1f      	ldr	r3, [pc, #124]	; (2810 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2792:	4298      	cmp	r0, r3
    2794:	d138      	bne.n	2808 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2796:	2101      	movs	r1, #1
    2798:	4620      	mov	r0, r4
    279a:	f001 fa21 	bl	3be0 <nrfx_gpiote_trigger_enable>
	return 0;
    279e:	e7e1      	b.n	2764 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    27a0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    27a4:	d025      	beq.n	27f2 <gpio_nrfx_pin_interrupt_configure+0xaa>
    27a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    27aa:	bf14      	ite	ne
    27ac:	2301      	movne	r3, #1
    27ae:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    27b0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    27b4:	6883      	ldr	r3, [r0, #8]
    27b6:	40cb      	lsrs	r3, r1
    27b8:	07d9      	lsls	r1, r3, #31
    27ba:	d4e3      	bmi.n	2784 <gpio_nrfx_pin_interrupt_configure+0x3c>
    27bc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    27c0:	d1e0      	bne.n	2784 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    27c2:	4a14      	ldr	r2, [pc, #80]	; (2814 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    27c4:	4814      	ldr	r0, [pc, #80]	; (2818 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    27c6:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    27c8:	2901      	cmp	r1, #1
    27ca:	bf08      	it	eq
    27cc:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    27ce:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    27d2:	3380      	adds	r3, #128	; 0x80
    27d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    27d8:	07db      	lsls	r3, r3, #31
    27da:	d4d3      	bmi.n	2784 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    27dc:	f10d 0507 	add.w	r5, sp, #7
    27e0:	4629      	mov	r1, r5
    27e2:	4620      	mov	r0, r4
    27e4:	f001 f9a8 	bl	3b38 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    27e8:	4b0c      	ldr	r3, [pc, #48]	; (281c <gpio_nrfx_pin_interrupt_configure+0xd4>)
    27ea:	4298      	cmp	r0, r3
    27ec:	d003      	beq.n	27f6 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    27ee:	9503      	str	r5, [sp, #12]
    27f0:	e7c8      	b.n	2784 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    27f2:	2303      	movs	r3, #3
    27f4:	e7dc      	b.n	27b0 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    27f6:	4628      	mov	r0, r5
    27f8:	f001 f9ec 	bl	3bd4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    27fc:	4b04      	ldr	r3, [pc, #16]	; (2810 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    27fe:	4298      	cmp	r0, r3
    2800:	d0f5      	beq.n	27ee <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    2802:	f06f 000b 	mvn.w	r0, #11
    2806:	e7ae      	b.n	2766 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2808:	f06f 0015 	mvn.w	r0, #21
    280c:	e7ab      	b.n	2766 <gpio_nrfx_pin_interrupt_configure+0x1e>
    280e:	bf00      	nop
    2810:	0bad0000 	.word	0x0bad0000
    2814:	50842500 	.word	0x50842500
    2818:	50842800 	.word	0x50842800
    281c:	0bad0004 	.word	0x0bad0004

00002820 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2820:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2822:	f001 f9c7 	bl	3bb4 <nrfx_gpiote_is_init>
    2826:	4604      	mov	r4, r0
    2828:	b968      	cbnz	r0, 2846 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    282a:	f001 f99b 	bl	3b64 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    282e:	4b08      	ldr	r3, [pc, #32]	; (2850 <gpio_nrfx_init+0x30>)
    2830:	4298      	cmp	r0, r3
    2832:	d10a      	bne.n	284a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2834:	4621      	mov	r1, r4
    2836:	4807      	ldr	r0, [pc, #28]	; (2854 <gpio_nrfx_init+0x34>)
    2838:	f001 f978 	bl	3b2c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    283c:	4622      	mov	r2, r4
    283e:	2105      	movs	r1, #5
    2840:	200d      	movs	r0, #13
    2842:	f7ff f97b 	bl	1b3c <z_arm_irq_priority_set>
		return 0;
    2846:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2848:	bd10      	pop	{r4, pc}
		return -EIO;
    284a:	f06f 0004 	mvn.w	r0, #4
    284e:	e7fb      	b.n	2848 <gpio_nrfx_init+0x28>
    2850:	0bad0000 	.word	0x0bad0000
    2854:	00002859 	.word	0x00002859

00002858 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2858:	0942      	lsrs	r2, r0, #5
{
    285a:	4603      	mov	r3, r0
    285c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    285e:	d002      	beq.n	2866 <nrfx_gpio_handler+0xe>
    2860:	2a01      	cmp	r2, #1
    2862:	d017      	beq.n	2894 <nrfx_gpio_handler+0x3c>
}
    2864:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2866:	4e0d      	ldr	r6, [pc, #52]	; (289c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2868:	6932      	ldr	r2, [r6, #16]
    286a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    286c:	2900      	cmp	r1, #0
    286e:	d0f9      	beq.n	2864 <nrfx_gpio_handler+0xc>
    2870:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    2872:	f003 031f 	and.w	r3, r3, #31
    2876:	680c      	ldr	r4, [r1, #0]
    2878:	409d      	lsls	r5, r3
    287a:	2900      	cmp	r1, #0
    287c:	d0f2      	beq.n	2864 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    287e:	688a      	ldr	r2, [r1, #8]
    2880:	402a      	ands	r2, r5
    2882:	d002      	beq.n	288a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2884:	4630      	mov	r0, r6
    2886:	684b      	ldr	r3, [r1, #4]
    2888:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    288a:	b12c      	cbz	r4, 2898 <nrfx_gpio_handler+0x40>
    288c:	6823      	ldr	r3, [r4, #0]
    288e:	4621      	mov	r1, r4
    2890:	461c      	mov	r4, r3
    2892:	e7f2      	b.n	287a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2894:	4e02      	ldr	r6, [pc, #8]	; (28a0 <nrfx_gpio_handler+0x48>)
    2896:	e7e7      	b.n	2868 <nrfx_gpio_handler+0x10>
    2898:	4623      	mov	r3, r4
    289a:	e7f8      	b.n	288e <nrfx_gpio_handler+0x36>
    289c:	000067e4 	.word	0x000067e4
    28a0:	000067cc 	.word	0x000067cc

000028a4 <gpio_nrfx_pin_configure>:
{
    28a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    28a8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28aa:	f001 051f 	and.w	r5, r1, #31
    28ae:	7b3b      	ldrb	r3, [r7, #12]
{
    28b0:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28b2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    28b6:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28b8:	4628      	mov	r0, r5
    28ba:	f10d 0103 	add.w	r1, sp, #3
    28be:	f001 f93b 	bl	3b38 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    28c2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28c6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    28c8:	d10b      	bne.n	28e2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    28ca:	4628      	mov	r0, r5
    28cc:	f001 f9f6 	bl	3cbc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    28d0:	4b3c      	ldr	r3, [pc, #240]	; (29c4 <gpio_nrfx_pin_configure+0x120>)
    28d2:	4598      	cmp	r8, r3
    28d4:	d103      	bne.n	28de <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    28d6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    28da:	f001 f975 	bl	3bc8 <nrfx_gpiote_channel_free>
		return 0;
    28de:	2000      	movs	r0, #0
    28e0:	e00c      	b.n	28fc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    28e2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    28e4:	4628      	mov	r0, r5
    28e6:	4619      	mov	r1, r3
    28e8:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    28ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    28ee:	f000 fffb 	bl	38e8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    28f2:	4b34      	ldr	r3, [pc, #208]	; (29c4 <gpio_nrfx_pin_configure+0x120>)
    28f4:	4298      	cmp	r0, r3
    28f6:	d004      	beq.n	2902 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    28f8:	f06f 0015 	mvn.w	r0, #21
}
    28fc:	b004      	add	sp, #16
    28fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2902:	4580      	cmp	r8, r0
    2904:	d103      	bne.n	290e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    2906:	f89d 0003 	ldrb.w	r0, [sp, #3]
    290a:	f001 f95d 	bl	3bc8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    290e:	03a3      	lsls	r3, r4, #14
    2910:	d549      	bpl.n	29a6 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2912:	f240 3306 	movw	r3, #774	; 0x306
    2916:	4023      	ands	r3, r4
    2918:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    291c:	d019      	beq.n	2952 <gpio_nrfx_pin_configure+0xae>
    291e:	d80c      	bhi.n	293a <gpio_nrfx_pin_configure+0x96>
    2920:	2b06      	cmp	r3, #6
    2922:	d017      	beq.n	2954 <gpio_nrfx_pin_configure+0xb0>
    2924:	d804      	bhi.n	2930 <gpio_nrfx_pin_configure+0x8c>
    2926:	b1ab      	cbz	r3, 2954 <gpio_nrfx_pin_configure+0xb0>
    2928:	2b02      	cmp	r3, #2
    292a:	d1e5      	bne.n	28f8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    292c:	2304      	movs	r3, #4
    292e:	e011      	b.n	2954 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2934:	d1e0      	bne.n	28f8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    2936:	2301      	movs	r3, #1
    2938:	e00c      	b.n	2954 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    293a:	f240 2202 	movw	r2, #514	; 0x202
    293e:	4293      	cmp	r3, r2
    2940:	d026      	beq.n	2990 <gpio_nrfx_pin_configure+0xec>
    2942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2946:	d025      	beq.n	2994 <gpio_nrfx_pin_configure+0xf0>
    2948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    294c:	d1d4      	bne.n	28f8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    294e:	2302      	movs	r3, #2
    2950:	e000      	b.n	2954 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    2952:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2954:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2958:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    295c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2960:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2962:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    2966:	bf4c      	ite	mi
    2968:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    296a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    296e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2970:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2974:	d510      	bpl.n	2998 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2976:	2301      	movs	r3, #1
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    297c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    297e:	2200      	movs	r2, #0
    2980:	4628      	mov	r0, r5
    2982:	a901      	add	r1, sp, #4
    2984:	f001 f85e 	bl	3a44 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2988:	4b0e      	ldr	r3, [pc, #56]	; (29c4 <gpio_nrfx_pin_configure+0x120>)
    298a:	4298      	cmp	r0, r3
    298c:	d0a7      	beq.n	28de <gpio_nrfx_pin_configure+0x3a>
    298e:	e7b3      	b.n	28f8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    2990:	2305      	movs	r3, #5
    2992:	e7df      	b.n	2954 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2994:	2303      	movs	r3, #3
    2996:	e7dd      	b.n	2954 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2998:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    299a:	bf41      	itttt	mi
    299c:	2301      	movmi	r3, #1
    299e:	687a      	ldrmi	r2, [r7, #4]
    29a0:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    29a2:	60d3      	strmi	r3, [r2, #12]
}
    29a4:	e7eb      	b.n	297e <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    29a6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    29a8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    29ac:	bf4c      	ite	mi
    29ae:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    29b0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    29b4:	461a      	mov	r2, r3
    29b6:	4628      	mov	r0, r5
    29b8:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    29ba:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    29be:	f000 ff93 	bl	38e8 <nrfx_gpiote_input_configure>
    29c2:	e7e1      	b.n	2988 <gpio_nrfx_pin_configure+0xe4>
    29c4:	0bad0000 	.word	0x0bad0000

000029c8 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    29c8:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    29ca:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    29cc:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
    29ce:	69e3      	ldr	r3, [r4, #28]
    29d0:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
    29d2:	6a20      	ldr	r0, [r4, #32]
    29d4:	f003 fa7f 	bl	5ed6 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    29d8:	2800      	cmp	r0, #0
    29da:	db0d      	blt.n	29f8 <i2c_nrfx_twim_init+0x30>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    29dc:	462b      	mov	r3, r5
    29de:	4620      	mov	r0, r4
    29e0:	4a07      	ldr	r2, [pc, #28]	; (2a00 <i2c_nrfx_twim_init+0x38>)
    29e2:	f104 0108 	add.w	r1, r4, #8
    29e6:	f001 fa69 	bl	3ebc <nrfx_twim_init>
    29ea:	4b06      	ldr	r3, [pc, #24]	; (2a04 <i2c_nrfx_twim_init+0x3c>)
    29ec:	4298      	cmp	r0, r3
    29ee:	d104      	bne.n	29fa <i2c_nrfx_twim_init+0x32>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
    29f0:	4620      	mov	r0, r4
    29f2:	f001 fb01 	bl	3ff8 <nrfx_twim_enable>
#endif

	return 0;
    29f6:	2000      	movs	r0, #0
}
    29f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    29fa:	f06f 0004 	mvn.w	r0, #4
    29fe:	e7fb      	b.n	29f8 <i2c_nrfx_twim_init+0x30>
    2a00:	00002a45 	.word	0x00002a45
    2a04:	0bad0000 	.word	0x0bad0000

00002a08 <i2c_nrfx_twim_recover_bus>:
{
    2a08:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2a0a:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    2a0c:	6823      	ldr	r3, [r4, #0]
		nrfx_twim_disable(&dev_config->twim);
    2a0e:	4620      	mov	r0, r4
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    2a10:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    2a14:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
    2a18:	f001 fafe 	bl	4018 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2a1c:	4631      	mov	r1, r6
    2a1e:	4628      	mov	r0, r5
    2a20:	f001 fd74 	bl	450c <nrfx_twi_twim_bus_recover>
    2a24:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    2a26:	6a20      	ldr	r0, [r4, #32]
    2a28:	f003 fa55 	bl	5ed6 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    2a2c:	4620      	mov	r0, r4
    2a2e:	f001 fae3 	bl	3ff8 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2a32:	4b03      	ldr	r3, [pc, #12]	; (2a40 <i2c_nrfx_twim_recover_bus+0x38>)
    2a34:	429d      	cmp	r5, r3
}
    2a36:	bf14      	ite	ne
    2a38:	f06f 000f 	mvnne.w	r0, #15
    2a3c:	2000      	moveq	r0, #0
    2a3e:	bd70      	pop	{r4, r5, r6, pc}
    2a40:	0bad0000 	.word	0x0bad0000

00002a44 <event_handler>:
	switch (p_event->type) {
    2a44:	7803      	ldrb	r3, [r0, #0]
    2a46:	2b01      	cmp	r3, #1
    2a48:	d008      	beq.n	2a5c <event_handler+0x18>
    2a4a:	2b02      	cmp	r3, #2
    2a4c:	d008      	beq.n	2a60 <event_handler+0x1c>
    2a4e:	b94b      	cbnz	r3, 2a64 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2a50:	4b05      	ldr	r3, [pc, #20]	; (2a68 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2a52:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2a54:	f101 0010 	add.w	r0, r1, #16
    2a58:	f002 b8ae 	b.w	4bb8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2a5c:	4b03      	ldr	r3, [pc, #12]	; (2a6c <event_handler+0x28>)
    2a5e:	e7f8      	b.n	2a52 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2a60:	4b03      	ldr	r3, [pc, #12]	; (2a70 <event_handler+0x2c>)
    2a62:	e7f6      	b.n	2a52 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2a64:	4b03      	ldr	r3, [pc, #12]	; (2a74 <event_handler+0x30>)
    2a66:	e7f4      	b.n	2a52 <event_handler+0xe>
    2a68:	0bad0000 	.word	0x0bad0000
    2a6c:	0bae0001 	.word	0x0bae0001
    2a70:	0bae0002 	.word	0x0bae0002
    2a74:	0bad0001 	.word	0x0bad0001

00002a78 <i2c_nrfx_twim_transfer>:
{
    2a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a7c:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    2a7e:	2214      	movs	r2, #20
{
    2a80:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2a82:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
    2a86:	b08b      	sub	sp, #44	; 0x2c
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2a88:	6906      	ldr	r6, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    2a8a:	f8ba 3018 	ldrh.w	r3, [sl, #24]
{
    2a8e:	4681      	mov	r9, r0
    2a90:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    2a92:	eb0d 0002 	add.w	r0, sp, r2
    2a96:	2100      	movs	r1, #0
	uint8_t *msg_buf = dev_data->msg_buf;
    2a98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    2a9c:	9302      	str	r3, [sp, #8]
	nrfx_twim_xfer_desc_t cur_xfer = {
    2a9e:	f003 f902 	bl	5ca6 <memset>
    2aa2:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
    2aa6:	f04f 32ff 	mov.w	r2, #4294967295
    2aaa:	f04f 33ff 	mov.w	r3, #4294967295
    2aae:	4630      	mov	r0, r6
    2ab0:	f002 f8a2 	bl	4bf8 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    2ab4:	f106 0310 	add.w	r3, r6, #16
    2ab8:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < num_msgs; i++) {
    2aba:	2700      	movs	r7, #0
    2abc:	2200      	movs	r2, #0
    2abe:	2300      	movs	r3, #0
    2ac0:	f106 0010 	add.w	r0, r6, #16
    2ac4:	f002 f898 	bl	4bf8 <z_impl_k_sem_take>
	uint16_t msg_buf_used = 0;
    2ac8:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
    2aca:	455f      	cmp	r7, fp
    2acc:	d301      	bcc.n	2ad2 <i2c_nrfx_twim_transfer+0x5a>
    2ace:	2400      	movs	r4, #0
    2ad0:	e068      	b.n	2ba4 <i2c_nrfx_twim_transfer+0x12c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2ad2:	7a20      	ldrb	r0, [r4, #8]
    2ad4:	0702      	lsls	r2, r0, #28
    2ad6:	f100 8089 	bmi.w	2bec <i2c_nrfx_twim_transfer+0x174>
		bool concat_next = ((i + 1) < num_msgs)
    2ada:	3701      	adds	r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    2adc:	455f      	cmp	r7, fp
    2ade:	d20a      	bcs.n	2af6 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    2ae0:	0783      	lsls	r3, r0, #30
    2ae2:	d408      	bmi.n	2af6 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    2ae4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    2ae6:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    2aea:	f002 0201 	and.w	r2, r2, #1
    2aee:	f003 0304 	and.w	r3, r3, #4
    2af2:	431a      	orrs	r2, r3
    2af4:	d01a      	beq.n	2b2c <i2c_nrfx_twim_transfer+0xb4>
		if (concat_next || (msg_buf_used != 0)) {
    2af6:	b1dd      	cbz	r5, 2b30 <i2c_nrfx_twim_transfer+0xb8>
		bool concat_next = ((i + 1) < num_msgs)
    2af8:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    2afa:	6862      	ldr	r2, [r4, #4]
    2afc:	f8dd c008 	ldr.w	ip, [sp, #8]
    2b00:	18a9      	adds	r1, r5, r2
    2b02:	4561      	cmp	r1, ip
    2b04:	d875      	bhi.n	2bf2 <i2c_nrfx_twim_transfer+0x17a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    2b06:	07c1      	lsls	r1, r0, #31
    2b08:	d406      	bmi.n	2b18 <i2c_nrfx_twim_transfer+0xa0>
				memcpy(msg_buf + msg_buf_used,
    2b0a:	6821      	ldr	r1, [r4, #0]
    2b0c:	eb08 0005 	add.w	r0, r8, r5
    2b10:	9303      	str	r3, [sp, #12]
    2b12:	f003 f8bd 	bl	5c90 <memcpy>
    2b16:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
    2b18:	6862      	ldr	r2, [r4, #4]
    2b1a:	442a      	add	r2, r5
    2b1c:	b295      	uxth	r5, r2
		if (concat_next) {
    2b1e:	2b00      	cmp	r3, #0
    2b20:	d14f      	bne.n	2bc2 <i2c_nrfx_twim_transfer+0x14a>
		if (msg_buf_used == 0) {
    2b22:	b14d      	cbz	r5, 2b38 <i2c_nrfx_twim_transfer+0xc0>
			cur_xfer.primary_length = msg_buf_used;
    2b24:	462b      	mov	r3, r5
			cur_xfer.p_primary_buf = msg_buf;
    2b26:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = msg_buf_used;
    2b2a:	e009      	b.n	2b40 <i2c_nrfx_twim_transfer+0xc8>
		bool concat_next = ((i + 1) < num_msgs)
    2b2c:	2301      	movs	r3, #1
    2b2e:	e7e4      	b.n	2afa <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2b30:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    2b32:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2b36:	d51b      	bpl.n	2b70 <i2c_nrfx_twim_transfer+0xf8>
			cur_xfer.p_primary_buf = msgs[i].buf;
    2b38:	2500      	movs	r5, #0
    2b3a:	6823      	ldr	r3, [r4, #0]
    2b3c:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
    2b3e:	6863      	ldr	r3, [r4, #4]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2b40:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    2b42:	9306      	str	r3, [sp, #24]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    2b44:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2b48:	f082 0202 	eor.w	r2, r2, #2
    2b4c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    2b50:	4650      	mov	r0, sl
    2b52:	0152      	lsls	r2, r2, #5
    2b54:	a905      	add	r1, sp, #20
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2b56:	f88d 3014 	strb.w	r3, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2b5a:	f001 fa7b 	bl	4054 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    2b5e:	4b28      	ldr	r3, [pc, #160]	; (2c00 <i2c_nrfx_twim_transfer+0x188>)
    2b60:	4298      	cmp	r0, r3
    2b62:	d013      	beq.n	2b8c <i2c_nrfx_twim_transfer+0x114>
			if (res == NRFX_ERROR_BUSY) {
    2b64:	330b      	adds	r3, #11
    2b66:	4298      	cmp	r0, r3
    2b68:	d11a      	bne.n	2ba0 <i2c_nrfx_twim_transfer+0x128>
				ret = -EBUSY;
    2b6a:	f06f 040f 	mvn.w	r4, #15
    2b6e:	e019      	b.n	2ba4 <i2c_nrfx_twim_transfer+0x12c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2b70:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2b78:	d0de      	beq.n	2b38 <i2c_nrfx_twim_transfer+0xc0>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    2b7a:	f8ba 301a 	ldrh.w	r3, [sl, #26]
    2b7e:	4293      	cmp	r3, r2
    2b80:	d33a      	bcc.n	2bf8 <i2c_nrfx_twim_transfer+0x180>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    2b82:	4640      	mov	r0, r8
    2b84:	f003 f884 	bl	5c90 <memcpy>
			msg_buf_used = msgs[i].len;
    2b88:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    2b8a:	e7ca      	b.n	2b22 <i2c_nrfx_twim_transfer+0xaa>
    2b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2b90:	2300      	movs	r3, #0
    2b92:	9801      	ldr	r0, [sp, #4]
    2b94:	f002 f830 	bl	4bf8 <z_impl_k_sem_take>
		if (ret != 0) {
    2b98:	b158      	cbz	r0, 2bb2 <i2c_nrfx_twim_transfer+0x13a>
			(void)i2c_nrfx_twim_recover_bus(dev);
    2b9a:	4648      	mov	r0, r9
    2b9c:	f7ff ff34 	bl	2a08 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
    2ba0:	f06f 0404 	mvn.w	r4, #4
	z_impl_k_sem_give(sem);
    2ba4:	4630      	mov	r0, r6
    2ba6:	f002 f807 	bl	4bb8 <z_impl_k_sem_give>
}
    2baa:	4620      	mov	r0, r4
    2bac:	b00b      	add	sp, #44	; 0x2c
    2bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dev_data->res;
    2bb2:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    2bb4:	4a12      	ldr	r2, [pc, #72]	; (2c00 <i2c_nrfx_twim_transfer+0x188>)
    2bb6:	4293      	cmp	r3, r2
    2bb8:	d1f2      	bne.n	2ba0 <i2c_nrfx_twim_transfer+0x128>
		if ((msgs[i].flags & I2C_MSG_READ)
    2bba:	7a23      	ldrb	r3, [r4, #8]
    2bbc:	07db      	lsls	r3, r3, #31
    2bbe:	d402      	bmi.n	2bc6 <i2c_nrfx_twim_transfer+0x14e>
		msg_buf_used = 0;
    2bc0:	2500      	movs	r5, #0
    2bc2:	340c      	adds	r4, #12
    2bc4:	e781      	b.n	2aca <i2c_nrfx_twim_transfer+0x52>
		    && cur_xfer.p_primary_buf == msg_buf) {
    2bc6:	9b08      	ldr	r3, [sp, #32]
    2bc8:	4598      	cmp	r8, r3
    2bca:	d1f9      	bne.n	2bc0 <i2c_nrfx_twim_transfer+0x148>
    2bcc:	4623      	mov	r3, r4
    2bce:	e008      	b.n	2be2 <i2c_nrfx_twim_transfer+0x16a>
				msg_buf_used -= msgs[j].len;
    2bd0:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    2bd2:	68d8      	ldr	r0, [r3, #12]
				msg_buf_used -= msgs[j].len;
    2bd4:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    2bd6:	fa18 f181 	uxtah	r1, r8, r1
    2bda:	9303      	str	r3, [sp, #12]
    2bdc:	f003 f858 	bl	5c90 <memcpy>
				j--;
    2be0:	9b03      	ldr	r3, [sp, #12]
			while (msg_buf_used >= msgs[j].len) {
    2be2:	685a      	ldr	r2, [r3, #4]
    2be4:	3b0c      	subs	r3, #12
    2be6:	4295      	cmp	r5, r2
    2be8:	d2f2      	bcs.n	2bd0 <i2c_nrfx_twim_transfer+0x158>
    2bea:	e7e9      	b.n	2bc0 <i2c_nrfx_twim_transfer+0x148>
			ret = -ENOTSUP;
    2bec:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2bf0:	e7d8      	b.n	2ba4 <i2c_nrfx_twim_transfer+0x12c>
				ret = -ENOSPC;
    2bf2:	f06f 041b 	mvn.w	r4, #27
    2bf6:	e7d5      	b.n	2ba4 <i2c_nrfx_twim_transfer+0x12c>
				ret = -EINVAL;
    2bf8:	f06f 0415 	mvn.w	r4, #21
    2bfc:	e7d2      	b.n	2ba4 <i2c_nrfx_twim_transfer+0x12c>
    2bfe:	bf00      	nop
    2c00:	0bad0000 	.word	0x0bad0000

00002c04 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2c04:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    2c0c:	4e4e      	ldr	r6, [pc, #312]	; (2d48 <pinctrl_configure_pins+0x144>)
    2c0e:	4f4f      	ldr	r7, [pc, #316]	; (2d4c <pinctrl_configure_pins+0x148>)
    2c10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2c14:	4281      	cmp	r1, r0
    2c16:	d102      	bne.n	2c1e <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2c18:	2000      	movs	r0, #0
}
    2c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2c1e:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2c20:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2c24:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    2c28:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    2c2a:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    2c2e:	bf08      	it	eq
    2c30:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    2c34:	2d19      	cmp	r5, #25
    2c36:	f200 8083 	bhi.w	2d40 <pinctrl_configure_pins+0x13c>
    2c3a:	e8df f005 	tbb	[pc, r5]
    2c3e:	1e0d      	.short	0x1e0d
    2c40:	3c292623 	.word	0x3c292623
    2c44:	81818126 	.word	0x81818126
    2c48:	816d4081 	.word	0x816d4081
    2c4c:	81818181 	.word	0x81818181
    2c50:	81818181 	.word	0x81818181
    2c54:	7e7b7870 	.word	0x7e7b7870
			NRF_PSEL_UART(reg, TXD) = pin;
    2c58:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    2c5c:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    2c60:	f1b8 0f01 	cmp.w	r8, #1
    2c64:	bf14      	ite	ne
    2c66:	46b6      	movne	lr, r6
    2c68:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    2c6a:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2c6e:	fa0c f505 	lsl.w	r5, ip, r5
    p_reg->OUTSET = set_mask;
    2c72:	f8ce 5008 	str.w	r5, [lr, #8]
    2c76:	2501      	movs	r5, #1
    2c78:	e002      	b.n	2c80 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RXD) = pin;
    2c7a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2c7e:	2500      	movs	r5, #0
    2c80:	46ae      	mov	lr, r5
    2c82:	e023      	b.n	2ccc <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
    2c84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    2c88:	e7e8      	b.n	2c5c <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, CTS) = pin;
    2c8a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    2c8e:	e7f6      	b.n	2c7e <pinctrl_configure_pins+0x7a>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2c90:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2c92:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    2c96:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    2c9a:	f1b9 0f01 	cmp.w	r9, #1
    2c9e:	bf14      	ite	ne
    2ca0:	46b0      	movne	r8, r6
    2ca2:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    2ca4:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2ca8:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    2cac:	f8c8 e00c 	str.w	lr, [r8, #12]
    2cb0:	f04f 0e01 	mov.w	lr, #1
    2cb4:	e00a      	b.n	2ccc <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2cb6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    2cba:	2501      	movs	r5, #1
    2cbc:	e7eb      	b.n	2c96 <pinctrl_configure_pins+0x92>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2cbe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2cc2:	2c00      	cmp	r4, #0
    2cc4:	d1db      	bne.n	2c7e <pinctrl_configure_pins+0x7a>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2cc6:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    2cc8:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2cca:	46ae      	mov	lr, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2ccc:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    2cd0:	f003 091f 	and.w	r9, r3, #31
    2cd4:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2cd8:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    2cdc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2ce0:	bf1c      	itt	ne
    2ce2:	2501      	movne	r5, #1
    2ce4:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    2ce8:	2b01      	cmp	r3, #1
    2cea:	bf0c      	ite	eq
    2cec:	46b8      	moveq	r8, r7
    2cee:	46b0      	movne	r8, r6
    2cf0:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2cf4:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2cf8:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    2cfc:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2d00:	0223      	lsls	r3, r4, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2d02:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    2d06:	ea43 030e 	orr.w	r3, r3, lr
    2d0a:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2d0e:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    2d12:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2d16:	e77d      	b.n	2c14 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2d18:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2d1c:	e7d1      	b.n	2cc2 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2d1e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2d22:	6805      	ldr	r5, [r0, #0]
    2d24:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    2d28:	2d00      	cmp	r5, #0
    2d2a:	d0c6      	beq.n	2cba <pinctrl_configure_pins+0xb6>
    2d2c:	e796      	b.n	2c5c <pinctrl_configure_pins+0x58>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2d2e:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2d32:	e7f6      	b.n	2d22 <pinctrl_configure_pins+0x11e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2d34:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2d38:	e7f3      	b.n	2d22 <pinctrl_configure_pins+0x11e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2d3a:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    2d3e:	e7f0      	b.n	2d22 <pinctrl_configure_pins+0x11e>
		switch (NRF_GET_FUN(pins[i])) {
    2d40:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2d44:	e769      	b.n	2c1a <pinctrl_configure_pins+0x16>
    2d46:	bf00      	nop
    2d48:	50842500 	.word	0x50842500
    2d4c:	50842800 	.word	0x50842800

00002d50 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2d50:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2d52:	794b      	ldrb	r3, [r1, #5]
    2d54:	2b01      	cmp	r3, #1
    2d56:	d029      	beq.n	2dac <uarte_nrfx_configure+0x5c>
    2d58:	2b03      	cmp	r3, #3
    2d5a:	d124      	bne.n	2da6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2d5c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2d5e:	798b      	ldrb	r3, [r1, #6]
    2d60:	2b03      	cmp	r3, #3
    2d62:	d120      	bne.n	2da6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2d64:	79ce      	ldrb	r6, [r1, #7]
    2d66:	b10e      	cbz	r6, 2d6c <uarte_nrfx_configure+0x1c>
    2d68:	2e01      	cmp	r6, #1
    2d6a:	d11c      	bne.n	2da6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2d6c:	790a      	ldrb	r2, [r1, #4]
    2d6e:	2a01      	cmp	r2, #1
    2d70:	d01e      	beq.n	2db0 <uarte_nrfx_configure+0x60>
    2d72:	2a02      	cmp	r2, #2
    2d74:	d020      	beq.n	2db8 <uarte_nrfx_configure+0x68>
    2d76:	b9b2      	cbnz	r2, 2da6 <uarte_nrfx_configure+0x56>
    2d78:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2d7a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2d7c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2d7e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2d82:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    2d86:	d06e      	beq.n	2e66 <uarte_nrfx_configure+0x116>
    2d88:	d833      	bhi.n	2df2 <uarte_nrfx_configure+0xa2>
    2d8a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2d8e:	d06d      	beq.n	2e6c <uarte_nrfx_configure+0x11c>
    2d90:	d81c      	bhi.n	2dcc <uarte_nrfx_configure+0x7c>
    2d92:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2d96:	d06b      	beq.n	2e70 <uarte_nrfx_configure+0x120>
    2d98:	d810      	bhi.n	2dbc <uarte_nrfx_configure+0x6c>
    2d9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2d9e:	d06a      	beq.n	2e76 <uarte_nrfx_configure+0x126>
    2da0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2da4:	d06a      	beq.n	2e7c <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    2da6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2daa:	e05b      	b.n	2e64 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    2dac:	2700      	movs	r7, #0
    2dae:	e7d6      	b.n	2d5e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    2db0:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2db4:	220e      	movs	r2, #14
    2db6:	e7e0      	b.n	2d7a <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    2db8:	2400      	movs	r4, #0
    2dba:	e7fb      	b.n	2db4 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    2dbc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2dc0:	d05f      	beq.n	2e82 <uarte_nrfx_configure+0x132>
    2dc2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2dc6:	d1ee      	bne.n	2da6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2dc8:	4b38      	ldr	r3, [pc, #224]	; (2eac <uarte_nrfx_configure+0x15c>)
    2dca:	e03c      	b.n	2e46 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2dcc:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2dd0:	d05a      	beq.n	2e88 <uarte_nrfx_configure+0x138>
    2dd2:	d807      	bhi.n	2de4 <uarte_nrfx_configure+0x94>
    2dd4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2dd8:	d058      	beq.n	2e8c <uarte_nrfx_configure+0x13c>
    2dda:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2dde:	d1e2      	bne.n	2da6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2de0:	4b33      	ldr	r3, [pc, #204]	; (2eb0 <uarte_nrfx_configure+0x160>)
    2de2:	e030      	b.n	2e46 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2de4:	f647 2512 	movw	r5, #31250	; 0x7a12
    2de8:	42ab      	cmp	r3, r5
    2dea:	d1dc      	bne.n	2da6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2dec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2df0:	e029      	b.n	2e46 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2df2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2df6:	d04b      	beq.n	2e90 <uarte_nrfx_configure+0x140>
    2df8:	d813      	bhi.n	2e22 <uarte_nrfx_configure+0xd2>
    2dfa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2dfe:	d04a      	beq.n	2e96 <uarte_nrfx_configure+0x146>
    2e00:	d809      	bhi.n	2e16 <uarte_nrfx_configure+0xc6>
    2e02:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    2e06:	42ab      	cmp	r3, r5
    2e08:	d047      	beq.n	2e9a <uarte_nrfx_configure+0x14a>
    2e0a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2e0e:	d1ca      	bne.n	2da6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2e10:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2e14:	e017      	b.n	2e46 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2e16:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2e1a:	d1c4      	bne.n	2da6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2e1c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2e20:	e011      	b.n	2e46 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2e22:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2e26:	d03b      	beq.n	2ea0 <uarte_nrfx_configure+0x150>
    2e28:	d808      	bhi.n	2e3c <uarte_nrfx_configure+0xec>
    2e2a:	4d22      	ldr	r5, [pc, #136]	; (2eb4 <uarte_nrfx_configure+0x164>)
    2e2c:	42ab      	cmp	r3, r5
    2e2e:	d03a      	beq.n	2ea6 <uarte_nrfx_configure+0x156>
    2e30:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2e34:	d1b7      	bne.n	2da6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2e36:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2e3a:	e004      	b.n	2e46 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2e3c:	4d1e      	ldr	r5, [pc, #120]	; (2eb8 <uarte_nrfx_configure+0x168>)
    2e3e:	42ab      	cmp	r3, r5
    2e40:	d1b1      	bne.n	2da6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2e42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2e46:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2e48:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    2e4c:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    2e4e:	433a      	orrs	r2, r7
    2e50:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    2e52:	4334      	orrs	r4, r6
    2e54:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2e56:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2e5a:	1d2b      	adds	r3, r5, #4
    2e5c:	c903      	ldmia	r1, {r0, r1}
    2e5e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2e62:	2000      	movs	r0, #0
}
    2e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2e66:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2e6a:	e7ec      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2e6c:	4b13      	ldr	r3, [pc, #76]	; (2ebc <uarte_nrfx_configure+0x16c>)
    2e6e:	e7ea      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2e70:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2e74:	e7e7      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    2e76:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2e7a:	e7e4      	b.n	2e46 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2e7c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2e80:	e7e1      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2e82:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2e86:	e7de      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2e88:	4b0d      	ldr	r3, [pc, #52]	; (2ec0 <uarte_nrfx_configure+0x170>)
    2e8a:	e7dc      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2e8c:	4b0d      	ldr	r3, [pc, #52]	; (2ec4 <uarte_nrfx_configure+0x174>)
    2e8e:	e7da      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2e90:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2e94:	e7d7      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2e96:	4b0c      	ldr	r3, [pc, #48]	; (2ec8 <uarte_nrfx_configure+0x178>)
    2e98:	e7d5      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2e9a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2e9e:	e7d2      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2ea0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2ea4:	e7cf      	b.n	2e46 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2ea6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2eaa:	e7cc      	b.n	2e46 <uarte_nrfx_configure+0xf6>
    2eac:	0013b000 	.word	0x0013b000
    2eb0:	004ea000 	.word	0x004ea000
    2eb4:	0003d090 	.word	0x0003d090
    2eb8:	000f4240 	.word	0x000f4240
    2ebc:	00275000 	.word	0x00275000
    2ec0:	0075c000 	.word	0x0075c000
    2ec4:	003af000 	.word	0x003af000
    2ec8:	013a9000 	.word	0x013a9000

00002ecc <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2ecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2ed0:	4680      	mov	r8, r0
    2ed2:	2200      	movs	r2, #0
    2ed4:	2101      	movs	r1, #1
    2ed6:	2008      	movs	r0, #8
    2ed8:	f7fe fe30 	bl	1b3c <z_arm_irq_priority_set>
    2edc:	2008      	movs	r0, #8
    2ede:	f7fe fdfd 	bl	1adc <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2ee2:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    2ee4:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    2ee8:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    2eec:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2eee:	aa01      	add	r2, sp, #4
    2ef0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    2ef4:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2ef8:	f8d7 900c 	ldr.w	r9, [r7, #12]
    2efc:	4648      	mov	r0, r9
    2efe:	f002 fffa 	bl	5ef6 <pinctrl_lookup_state>
	if (ret < 0) {
    2f02:	1e05      	subs	r5, r0, #0
    2f04:	db4d      	blt.n	2fa2 <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2f06:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2f08:	f8d9 2000 	ldr.w	r2, [r9]
    2f0c:	7919      	ldrb	r1, [r3, #4]
    2f0e:	6818      	ldr	r0, [r3, #0]
    2f10:	f7ff fe78 	bl	2c04 <pinctrl_configure_pins>
	if (err < 0) {
    2f14:	1e05      	subs	r5, r0, #0
    2f16:	db44      	blt.n	2fa2 <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    2f18:	4640      	mov	r0, r8
    2f1a:	1d31      	adds	r1, r6, #4
    2f1c:	f7ff ff18 	bl	2d50 <uarte_nrfx_configure>
	if (err) {
    2f20:	4605      	mov	r5, r0
    2f22:	2800      	cmp	r0, #0
    2f24:	d13d      	bne.n	2fa2 <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2f26:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2f28:	0799      	lsls	r1, r3, #30
    2f2a:	d513      	bpl.n	2f54 <uarte_0_init+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2f2c:	f106 0018 	add.w	r0, r6, #24
    2f30:	f000 fc54 	bl	37dc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2f34:	4b1e      	ldr	r3, [pc, #120]	; (2fb0 <uarte_0_init+0xe4>)
    2f36:	4298      	cmp	r0, r3
    2f38:	d137      	bne.n	2faa <uarte_0_init+0xde>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2f3a:	7e33      	ldrb	r3, [r6, #24]
    2f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2f40:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2f44:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2f48:	2301      	movs	r3, #1
    2f4a:	7e32      	ldrb	r2, [r6, #24]
    2f4c:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2f4e:	4a19      	ldr	r2, [pc, #100]	; (2fb4 <uarte_0_init+0xe8>)
    2f50:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2f54:	2308      	movs	r3, #8
    2f56:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2f5a:	7a3b      	ldrb	r3, [r7, #8]
    2f5c:	b953      	cbnz	r3, 2f74 <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f5e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2f62:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2f66:	6973      	ldr	r3, [r6, #20]
    2f68:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2f6c:	2301      	movs	r3, #1
    2f6e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f72:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2f78:	bf5c      	itt	pl
    2f7a:	f44f 7380 	movpl.w	r3, #256	; 0x100
    2f7e:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	06db      	lsls	r3, r3, #27
    2f86:	bf44      	itt	mi
    2f88:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2f8c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2f90:	6933      	ldr	r3, [r6, #16]
    2f92:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2f96:	2300      	movs	r3, #0
    2f98:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f9c:	2301      	movs	r3, #1
    2f9e:	60a3      	str	r3, [r4, #8]
    2fa0:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2fa2:	4628      	mov	r0, r5
    2fa4:	b003      	add	sp, #12
    2fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2faa:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    2fae:	e7f8      	b.n	2fa2 <uarte_0_init+0xd6>
    2fb0:	0bad0000 	.word	0x0bad0000
    2fb4:	50017000 	.word	0x50017000

00002fb8 <uarte_nrfx_poll_out>:
{
    2fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fba:	4604      	mov	r4, r0
    2fbc:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    2fbe:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2fc0:	f003 fad6 	bl	6570 <k_is_in_isr>
    2fc4:	b9b0      	cbnz	r0, 2ff4 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    2fc6:	4b2e      	ldr	r3, [pc, #184]	; (3080 <uarte_nrfx_poll_out+0xc8>)
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	b19b      	cbz	r3, 2ff4 <uarte_nrfx_poll_out+0x3c>
{
    2fcc:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2fce:	6860      	ldr	r0, [r4, #4]
    2fd0:	f002 ffc7 	bl	5f62 <is_tx_ready.isra.0>
    2fd4:	bb00      	cbnz	r0, 3018 <uarte_nrfx_poll_out+0x60>
    2fd6:	2001      	movs	r0, #1
    2fd8:	f003 f82d 	bl	6036 <nrfx_busy_wait>
    2fdc:	3e01      	subs	r6, #1
    2fde:	d1f6      	bne.n	2fce <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    2fe0:	2100      	movs	r1, #0
    2fe2:	2021      	movs	r0, #33	; 0x21
    2fe4:	f002 f8f2 	bl	51cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2fe8:	e7f0      	b.n	2fcc <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2fea:	f386 8811 	msr	BASEPRI, r6
    2fee:	f3bf 8f6f 	isb	sy
}
    2ff2:	e7f5      	b.n	2fe0 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    2ff4:	f04f 0320 	mov.w	r3, #32
    2ff8:	f3ef 8611 	mrs	r6, BASEPRI
    2ffc:	f383 8812 	msr	BASEPRI_MAX, r3
    3000:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3004:	6860      	ldr	r0, [r4, #4]
    3006:	4631      	mov	r1, r6
    3008:	f002 ffab 	bl	5f62 <is_tx_ready.isra.0>
    300c:	b990      	cbnz	r0, 3034 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    300e:	f386 8811 	msr	BASEPRI, r6
    3012:	f3bf 8f6f 	isb	sy
}
    3016:	e7ed      	b.n	2ff4 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    3018:	f04f 0320 	mov.w	r3, #32
    301c:	f3ef 8611 	mrs	r6, BASEPRI
    3020:	f383 8812 	msr	BASEPRI_MAX, r3
    3024:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3028:	6860      	ldr	r0, [r4, #4]
    302a:	4631      	mov	r1, r6
    302c:	f002 ff99 	bl	5f62 <is_tx_ready.isra.0>
    3030:	2800      	cmp	r0, #0
    3032:	d0da      	beq.n	2fea <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    3034:	693b      	ldr	r3, [r7, #16]
    3036:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    3038:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    303a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    303c:	6813      	ldr	r3, [r2, #0]
    303e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3042:	2001      	movs	r0, #1
    3044:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3048:	2000      	movs	r0, #0
    304a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    304e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    3052:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3056:	6852      	ldr	r2, [r2, #4]
    3058:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    305c:	06d2      	lsls	r2, r2, #27
    305e:	d508      	bpl.n	3072 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3060:	2008      	movs	r0, #8
	return config->uarte_regs;
    3062:	6862      	ldr	r2, [r4, #4]
    3064:	6812      	ldr	r2, [r2, #0]
    3066:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    306a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    306e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3072:	2201      	movs	r2, #1
    3074:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3076:	f381 8811 	msr	BASEPRI, r1
    307a:	f3bf 8f6f 	isb	sy
}
    307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3080:	20001052 	.word	0x20001052

00003084 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3084:	2301      	movs	r3, #1
    3086:	4083      	lsls	r3, r0
{
    3088:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    308a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    308c:	4a0b      	ldr	r2, [pc, #44]	; (30bc <compare_int_lock+0x38>)
    308e:	e8d2 1fef 	ldaex	r1, [r2]
    3092:	ea01 0504 	and.w	r5, r1, r4
    3096:	e8c2 5fe6 	stlex	r6, r5, [r2]
    309a:	2e00      	cmp	r6, #0
    309c:	d1f7      	bne.n	308e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    309e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    30a2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    30a4:	4806      	ldr	r0, [pc, #24]	; (30c0 <compare_int_lock+0x3c>)
    30a6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    30aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30ae:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    30b2:	420b      	tst	r3, r1
}
    30b4:	bf14      	ite	ne
    30b6:	2001      	movne	r0, #1
    30b8:	2000      	moveq	r0, #0
    30ba:	bd70      	pop	{r4, r5, r6, pc}
    30bc:	20000934 	.word	0x20000934
    30c0:	50015000 	.word	0x50015000

000030c4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    30c4:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    30c6:	490e      	ldr	r1, [pc, #56]	; (3100 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    30c8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    30cc:	e9d1 3400 	ldrd	r3, r4, [r1]
    30d0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    30d2:	18c3      	adds	r3, r0, r3
    30d4:	f144 0400 	adc.w	r4, r4, #0
    30d8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    30dc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    30e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    30e4:	d209      	bcs.n	30fa <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    30e6:	4b07      	ldr	r3, [pc, #28]	; (3104 <sys_clock_timeout_handler+0x40>)
    30e8:	681b      	ldr	r3, [r3, #0]
    30ea:	0a1a      	lsrs	r2, r3, #8
    30ec:	061b      	lsls	r3, r3, #24
    30ee:	199c      	adds	r4, r3, r6
    30f0:	4b05      	ldr	r3, [pc, #20]	; (3108 <sys_clock_timeout_handler+0x44>)
    30f2:	f142 0500 	adc.w	r5, r2, #0
    30f6:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    30fa:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    30fc:	f002 b9bc 	b.w	5478 <sys_clock_announce>
    3100:	200001c8 	.word	0x200001c8
    3104:	20000938 	.word	0x20000938
    3108:	200001d0 	.word	0x200001d0

0000310c <compare_int_unlock>:
	if (key) {
    310c:	b1d9      	cbz	r1, 3146 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    310e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3110:	4a0d      	ldr	r2, [pc, #52]	; (3148 <compare_int_unlock+0x3c>)
    3112:	4083      	lsls	r3, r0
    3114:	e8d2 cfef 	ldaex	ip, [r2]
    3118:	ea4c 0c03 	orr.w	ip, ip, r3
    311c:	e8c2 cfe1 	stlex	r1, ip, [r2]
    3120:	2900      	cmp	r1, #0
    3122:	d1f7      	bne.n	3114 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    3128:	4a08      	ldr	r2, [pc, #32]	; (314c <compare_int_unlock+0x40>)
    312a:	4083      	lsls	r3, r0
    312c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3130:	4b07      	ldr	r3, [pc, #28]	; (3150 <compare_int_unlock+0x44>)
    3132:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3136:	40c3      	lsrs	r3, r0
    3138:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    313a:	bf42      	ittt	mi
    313c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3140:	4b04      	ldrmi	r3, [pc, #16]	; (3154 <compare_int_unlock+0x48>)
    3142:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3146:	4770      	bx	lr
    3148:	20000934 	.word	0x20000934
    314c:	50015000 	.word	0x50015000
    3150:	20000930 	.word	0x20000930
    3154:	e000e100 	.word	0xe000e100

00003158 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3158:	4b0d      	ldr	r3, [pc, #52]	; (3190 <z_nrf_rtc_timer_read+0x38>)
    315a:	6818      	ldr	r0, [r3, #0]
    315c:	0a01      	lsrs	r1, r0, #8
    315e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3160:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3164:	4b0b      	ldr	r3, [pc, #44]	; (3194 <z_nrf_rtc_timer_read+0x3c>)
    3166:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    316a:	1818      	adds	r0, r3, r0
    316c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3174:	d20a      	bcs.n	318c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3176:	4b08      	ldr	r3, [pc, #32]	; (3198 <z_nrf_rtc_timer_read+0x40>)
    3178:	e9d3 2300 	ldrd	r2, r3, [r3]
    317c:	4290      	cmp	r0, r2
    317e:	eb71 0303 	sbcs.w	r3, r1, r3
    3182:	d203      	bcs.n	318c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3184:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3188:	f141 0100 	adc.w	r1, r1, #0
}
    318c:	4770      	bx	lr
    318e:	bf00      	nop
    3190:	20000938 	.word	0x20000938
    3194:	50015000 	.word	0x50015000
    3198:	200001d0 	.word	0x200001d0

0000319c <compare_set>:
{
    319c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31a0:	4616      	mov	r6, r2
    31a2:	461f      	mov	r7, r3
    31a4:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    31a6:	f7ff ff6d 	bl	3084 <compare_int_lock>
    31aa:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    31ac:	f7ff ffd4 	bl	3158 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    31b0:	42b0      	cmp	r0, r6
    31b2:	eb71 0307 	sbcs.w	r3, r1, r7
    31b6:	d250      	bcs.n	325a <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    31b8:	4b38      	ldr	r3, [pc, #224]	; (329c <compare_set+0x100>)
    31ba:	1a30      	subs	r0, r6, r0
    31bc:	eb67 0101 	sbc.w	r1, r7, r1
    31c0:	4298      	cmp	r0, r3
    31c2:	f171 0100 	sbcs.w	r1, r1, #0
    31c6:	d265      	bcs.n	3294 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    31c8:	4b35      	ldr	r3, [pc, #212]	; (32a0 <compare_set+0x104>)
    31ca:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    31ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    31d2:	429f      	cmp	r7, r3
    31d4:	bf08      	it	eq
    31d6:	4296      	cmpeq	r6, r2
    31d8:	d049      	beq.n	326e <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    31da:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    31de:	4931      	ldr	r1, [pc, #196]	; (32a4 <compare_set+0x108>)
    31e0:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    31e4:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    31e6:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    31ea:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    31ee:	f002 ff02 	bl	5ff6 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    31f2:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    31f6:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    31f8:	f104 0550 	add.w	r5, r4, #80	; 0x50
    31fc:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    31fe:	b2ad      	uxth	r5, r5
    3200:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    3204:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3208:	4a27      	ldr	r2, [pc, #156]	; (32a8 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    320a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    320e:	9301      	str	r3, [sp, #4]
    3210:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3214:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    3218:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    321c:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    3220:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3224:	eba0 0008 	sub.w	r0, r0, r8
    3228:	3803      	subs	r0, #3
    322a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    322e:	4290      	cmp	r0, r2
    3230:	d91d      	bls.n	326e <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3232:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    3234:	b160      	cbz	r0, 3250 <compare_set+0xb4>
     return p_reg->COUNTER;
    3236:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    323a:	eba8 000b 	sub.w	r0, r8, fp
    323e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    3242:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3246:	d912      	bls.n	326e <compare_set+0xd2>
					event_clear(chan);
    3248:	4620      	mov	r0, r4
    324a:	f002 fed4 	bl	5ff6 <event_clear>
    324e:	4a16      	ldr	r2, [pc, #88]	; (32a8 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    3250:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    3254:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    3258:	e7da      	b.n	3210 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    325a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    325c:	4a13      	ldr	r2, [pc, #76]	; (32ac <compare_set+0x110>)
    325e:	40a3      	lsls	r3, r4
    3260:	e8d2 0fef 	ldaex	r0, [r2]
    3264:	4318      	orrs	r0, r3
    3266:	e8c2 0fe1 	stlex	r1, r0, [r2]
    326a:	2900      	cmp	r1, #0
    326c:	d1f8      	bne.n	3260 <compare_set+0xc4>
	return ret;
    326e:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    3270:	490b      	ldr	r1, [pc, #44]	; (32a0 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    3272:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3274:	0123      	lsls	r3, r4, #4
    3276:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    327a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    327c:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    3280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3282:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    3284:	4620      	mov	r0, r4
    3286:	9900      	ldr	r1, [sp, #0]
    3288:	f7ff ff40 	bl	310c <compare_int_unlock>
}
    328c:	4628      	mov	r0, r5
    328e:	b003      	add	sp, #12
    3290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    3294:	f06f 0515 	mvn.w	r5, #21
    3298:	e7f4      	b.n	3284 <compare_set+0xe8>
    329a:	bf00      	nop
    329c:	00800001 	.word	0x00800001
    32a0:	200001b8 	.word	0x200001b8
    32a4:	50015000 	.word	0x50015000
    32a8:	007ffffd 	.word	0x007ffffd
    32ac:	20000930 	.word	0x20000930

000032b0 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    32b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    32b2:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    32b4:	f04f 30ff 	mov.w	r0, #4294967295
    32b8:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    32bc:	4c18      	ldr	r4, [pc, #96]	; (3320 <sys_clock_driver_init+0x70>)
    32be:	4b19      	ldr	r3, [pc, #100]	; (3324 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    32c0:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    32c2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    32c6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    32ca:	4b17      	ldr	r3, [pc, #92]	; (3328 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    32cc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    32d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    32d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    32d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    32dc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    32e0:	4b12      	ldr	r3, [pc, #72]	; (332c <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    32e2:	2101      	movs	r1, #1
    32e4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    32e8:	2015      	movs	r0, #21
    32ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    32ee:	462a      	mov	r2, r5
    32f0:	f7fe fc24 	bl	1b3c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    32f4:	2015      	movs	r0, #21
    32f6:	f7fe fbf1 	bl	1adc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    32fa:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    32fc:	4a0c      	ldr	r2, [pc, #48]	; (3330 <sys_clock_driver_init+0x80>)
    32fe:	60a3      	str	r3, [r4, #8]
    3300:	6023      	str	r3, [r4, #0]
    3302:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3304:	4b0b      	ldr	r3, [pc, #44]	; (3334 <sys_clock_driver_init+0x84>)
    3306:	4a0c      	ldr	r2, [pc, #48]	; (3338 <sys_clock_driver_init+0x88>)
    3308:	9300      	str	r3, [sp, #0]
    330a:	4628      	mov	r0, r5
    330c:	2300      	movs	r3, #0
    330e:	9501      	str	r5, [sp, #4]
    3310:	f7ff ff44 	bl	319c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3314:	4630      	mov	r0, r6
    3316:	f7ff f961 	bl	25dc <z_nrf_clock_control_lf_on>

	return 0;
}
    331a:	4628      	mov	r0, r5
    331c:	b002      	add	sp, #8
    331e:	bd70      	pop	{r4, r5, r6, pc}
    3320:	50015000 	.word	0x50015000
    3324:	000f0003 	.word	0x000f0003
    3328:	200001b8 	.word	0x200001b8
    332c:	e000e100 	.word	0xe000e100
    3330:	20000934 	.word	0x20000934
    3334:	000030c5 	.word	0x000030c5
    3338:	007fffff 	.word	0x007fffff

0000333c <rtc_nrf_isr>:
{
    333c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3340:	4b2e      	ldr	r3, [pc, #184]	; (33fc <rtc_nrf_isr+0xc0>)
    3342:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3346:	0790      	lsls	r0, r2, #30
    3348:	d50b      	bpl.n	3362 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    334a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    334e:	b142      	cbz	r2, 3362 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3350:	2200      	movs	r2, #0
    3352:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    3356:	4a2a      	ldr	r2, [pc, #168]	; (3400 <rtc_nrf_isr+0xc4>)
    3358:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    335c:	6813      	ldr	r3, [r2, #0]
    335e:	3301      	adds	r3, #1
    3360:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    3362:	4a26      	ldr	r2, [pc, #152]	; (33fc <rtc_nrf_isr+0xc0>)
    3364:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3368:	03d9      	lsls	r1, r3, #15
    336a:	d527      	bpl.n	33bc <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    336c:	4b25      	ldr	r3, [pc, #148]	; (3404 <rtc_nrf_isr+0xc8>)
    336e:	e8d3 1fef 	ldaex	r1, [r3]
    3372:	f021 0001 	bic.w	r0, r1, #1
    3376:	e8c3 0fe4 	stlex	r4, r0, [r3]
    337a:	2c00      	cmp	r4, #0
    337c:	d1f7      	bne.n	336e <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    337e:	07cb      	lsls	r3, r1, #31
    3380:	d402      	bmi.n	3388 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3382:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    3386:	b1cb      	cbz	r3, 33bc <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3388:	2500      	movs	r5, #0
    338a:	4c1c      	ldr	r4, [pc, #112]	; (33fc <rtc_nrf_isr+0xc0>)
    338c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3390:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    3394:	f7ff fee0 	bl	3158 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3398:	f04f 0320 	mov.w	r3, #32
    339c:	f3ef 8211 	mrs	r2, BASEPRI
    33a0:	f383 8812 	msr	BASEPRI_MAX, r3
    33a4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    33a8:	4b17      	ldr	r3, [pc, #92]	; (3408 <rtc_nrf_isr+0xcc>)
    33aa:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    33ae:	42b0      	cmp	r0, r6
    33b0:	41b9      	sbcs	r1, r7
    33b2:	d206      	bcs.n	33c2 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    33b4:	f382 8811 	msr	BASEPRI, r2
    33b8:	f3bf 8f6f 	isb	sy
}
    33bc:	b003      	add	sp, #12
    33be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    33c2:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    33c6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    33ca:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    33ce:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    33d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    33d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    33d8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    33dc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    33e0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    33e4:	f382 8811 	msr	BASEPRI, r2
    33e8:	f3bf 8f6f 	isb	sy
		if (handler) {
    33ec:	2900      	cmp	r1, #0
    33ee:	d0e5      	beq.n	33bc <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    33f0:	9000      	str	r0, [sp, #0]
    33f2:	4632      	mov	r2, r6
    33f4:	463b      	mov	r3, r7
    33f6:	4628      	mov	r0, r5
    33f8:	4788      	blx	r1
    33fa:	e7df      	b.n	33bc <rtc_nrf_isr+0x80>
    33fc:	50015000 	.word	0x50015000
    3400:	20000938 	.word	0x20000938
    3404:	20000930 	.word	0x20000930
    3408:	200001b8 	.word	0x200001b8

0000340c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    340c:	1c43      	adds	r3, r0, #1
{
    340e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    3410:	d021      	beq.n	3456 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3412:	2801      	cmp	r0, #1
    3414:	dd21      	ble.n	345a <sys_clock_set_timeout+0x4e>
    3416:	4a12      	ldr	r2, [pc, #72]	; (3460 <sys_clock_set_timeout+0x54>)
    3418:	4b12      	ldr	r3, [pc, #72]	; (3464 <sys_clock_set_timeout+0x58>)
    341a:	4290      	cmp	r0, r2
    341c:	bfd4      	ite	le
    341e:	4604      	movle	r4, r0
    3420:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3422:	f7ff fe99 	bl	3158 <z_nrf_rtc_timer_read>
    3426:	4b10      	ldr	r3, [pc, #64]	; (3468 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    3428:	490e      	ldr	r1, [pc, #56]	; (3464 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    342a:	e9d3 2300 	ldrd	r2, r3, [r3]
    342e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    3430:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3434:	bf28      	it	cs
    3436:	2400      	movcs	r4, #0
	cyc += unannounced;
    3438:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    343a:	428c      	cmp	r4, r1
    343c:	bf28      	it	cs
    343e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    3440:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3442:	490a      	ldr	r1, [pc, #40]	; (346c <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    3444:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3446:	9001      	str	r0, [sp, #4]
    3448:	9100      	str	r1, [sp, #0]
    344a:	f143 0300 	adc.w	r3, r3, #0
    344e:	f7ff fea5 	bl	319c <compare_set>
}
    3452:	b002      	add	sp, #8
    3454:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    3456:	4c03      	ldr	r4, [pc, #12]	; (3464 <sys_clock_set_timeout+0x58>)
    3458:	e7e3      	b.n	3422 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    345a:	2401      	movs	r4, #1
    345c:	e7e1      	b.n	3422 <sys_clock_set_timeout+0x16>
    345e:	bf00      	nop
    3460:	007ffffe 	.word	0x007ffffe
    3464:	007fffff 	.word	0x007fffff
    3468:	200001c8 	.word	0x200001c8
    346c:	000030c5 	.word	0x000030c5

00003470 <sys_clock_elapsed>:
{
    3470:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3472:	f7ff fe71 	bl	3158 <z_nrf_rtc_timer_read>
    3476:	4b02      	ldr	r3, [pc, #8]	; (3480 <sys_clock_elapsed+0x10>)
    3478:	681b      	ldr	r3, [r3, #0]
}
    347a:	1ac0      	subs	r0, r0, r3
    347c:	bd08      	pop	{r3, pc}
    347e:	bf00      	nop
    3480:	200001c8 	.word	0x200001c8

00003484 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3484:	2301      	movs	r3, #1
{
    3486:	b510      	push	{r4, lr}
    3488:	4c07      	ldr	r4, [pc, #28]	; (34a8 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    348a:	2015      	movs	r0, #21
    348c:	6063      	str	r3, [r4, #4]
    348e:	f7fe fb33 	bl	1af8 <arch_irq_disable>
    3492:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    3496:	4b05      	ldr	r3, [pc, #20]	; (34ac <sys_clock_disable+0x28>)
    3498:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    349c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    34a0:	4b03      	ldr	r3, [pc, #12]	; (34b0 <sys_clock_disable+0x2c>)
    34a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    34a6:	bd10      	pop	{r4, pc}
    34a8:	50015000 	.word	0x50015000
    34ac:	000f0003 	.word	0x000f0003
    34b0:	e000e100 	.word	0xe000e100

000034b4 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    34b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    34b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    34bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    34c0:	2a07      	cmp	r2, #7
    34c2:	d105      	bne.n	34d0 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    34c4:	3b02      	subs	r3, #2
    34c6:	2b03      	cmp	r3, #3
    34c8:	d802      	bhi.n	34d0 <nrf53_errata_42+0x1c>
    34ca:	4a02      	ldr	r2, [pc, #8]	; (34d4 <nrf53_errata_42+0x20>)
    34cc:	5cd0      	ldrb	r0, [r2, r3]
    34ce:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    34d0:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    34d2:	4770      	bx	lr
    34d4:	00006f0c 	.word	0x00006f0c

000034d8 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
    34d8:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    34da:	f7ff ffeb 	bl	34b4 <nrf53_errata_42>
    34de:	b158      	cbz	r0, 34f8 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    34e0:	4b64      	ldr	r3, [pc, #400]	; (3674 <SystemInit+0x19c>)
    34e2:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    34e6:	b93a      	cbnz	r2, 34f8 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    34e8:	210d      	movs	r1, #13
    34ea:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    34ee:	2101      	movs	r1, #1
    34f0:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    34f4:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    34f8:	2200      	movs	r2, #0
    34fa:	00d3      	lsls	r3, r2, #3
    34fc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3500:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3504:	3101      	adds	r1, #1
    3506:	d007      	beq.n	3518 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    3508:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    350c:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    350e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3512:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    3514:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3516:	d1f0      	bne.n	34fa <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    3518:	f7ff ffcc 	bl	34b4 <nrf53_errata_42>
    351c:	2800      	cmp	r0, #0
    351e:	f040 80a0 	bne.w	3662 <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    3522:	f7ff ffc7 	bl	34b4 <nrf53_errata_42>
    3526:	b140      	cbz	r0, 353a <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    3528:	4b53      	ldr	r3, [pc, #332]	; (3678 <SystemInit+0x1a0>)
    352a:	4a54      	ldr	r2, [pc, #336]	; (367c <SystemInit+0x1a4>)
    352c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    3530:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3534:	2201      	movs	r2, #1
    3536:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    353a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    353e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3542:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    3546:	2a07      	cmp	r2, #7
    3548:	d109      	bne.n	355e <SystemInit+0x86>
                {
                    switch(var2)
    354a:	3b02      	subs	r3, #2
    354c:	2b03      	cmp	r3, #3
    354e:	d806      	bhi.n	355e <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    3550:	4a4b      	ldr	r2, [pc, #300]	; (3680 <SystemInit+0x1a8>)
    3552:	5cd3      	ldrb	r3, [r2, r3]
    3554:	b11b      	cbz	r3, 355e <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    3556:	2200      	movs	r2, #0
    3558:	4b4a      	ldr	r3, [pc, #296]	; (3684 <SystemInit+0x1ac>)
    355a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    355e:	f7ff ffa9 	bl	34b4 <nrf53_errata_42>
    3562:	b150      	cbz	r0, 357a <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    3564:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3568:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    356c:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    356e:	bf42      	ittt	mi
    3570:	2200      	movmi	r2, #0
    3572:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    3576:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    357a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    357e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3582:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    3586:	2a07      	cmp	r2, #7
    3588:	d109      	bne.n	359e <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    358a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    358e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3592:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    3594:	bf44      	itt	mi
    3596:	f06f 0201 	mvnmi.w	r2, #1
    359a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    359e:	f7ff ff89 	bl	34b4 <nrf53_errata_42>
    35a2:	b118      	cbz	r0, 35ac <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    35a4:	2265      	movs	r2, #101	; 0x65
    35a6:	4b33      	ldr	r3, [pc, #204]	; (3674 <SystemInit+0x19c>)
    35a8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    35ac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    35b0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    35b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    35b8:	2a07      	cmp	r2, #7
    35ba:	d116      	bne.n	35ea <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    35bc:	4b31      	ldr	r3, [pc, #196]	; (3684 <SystemInit+0x1ac>)
    35be:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    35c2:	2b00      	cmp	r3, #0
    35c4:	da11      	bge.n	35ea <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    35c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35ca:	2203      	movs	r2, #3
    35cc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    35d0:	2201      	movs	r2, #1
    35d2:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    35d4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    35d8:	2a00      	cmp	r2, #0
    35da:	d0fb      	beq.n	35d4 <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    35dc:	2200      	movs	r2, #0
    35de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    35e2:	2201      	movs	r2, #1
    35e4:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    35e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    35ea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    35ee:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    35f2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    35f6:	2a07      	cmp	r2, #7
    35f8:	d123      	bne.n	3642 <SystemInit+0x16a>
                {
                    switch(var2)
    35fa:	3b02      	subs	r3, #2
    35fc:	2b03      	cmp	r3, #3
    35fe:	d802      	bhi.n	3606 <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
    3600:	4a21      	ldr	r2, [pc, #132]	; (3688 <SystemInit+0x1b0>)
    3602:	5cd3      	ldrb	r3, [r2, r3]
    3604:	b1eb      	cbz	r3, 3642 <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    3606:	227e      	movs	r2, #126	; 0x7e
    3608:	4b1a      	ldr	r3, [pc, #104]	; (3674 <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    360a:	491b      	ldr	r1, [pc, #108]	; (3678 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    360c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
    3610:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
    3614:	237f      	movs	r3, #127	; 0x7f
    3616:	4a1d      	ldr	r2, [pc, #116]	; (368c <SystemInit+0x1b4>)
    3618:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    361c:	2300      	movs	r3, #0
    361e:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
    3622:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
    3626:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    362a:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
    362e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
    3632:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
    3636:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    363a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    363e:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    3642:	4a13      	ldr	r2, [pc, #76]	; (3690 <SystemInit+0x1b8>)
    3644:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    3648:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    364c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    3650:	4a10      	ldr	r2, [pc, #64]	; (3694 <SystemInit+0x1bc>)
    3652:	4b11      	ldr	r3, [pc, #68]	; (3698 <SystemInit+0x1c0>)
    3654:	6811      	ldr	r1, [r2, #0]
    3656:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    365a:	69d2      	ldr	r2, [r2, #28]
    365c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    3660:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    3662:	2229      	movs	r2, #41	; 0x29
    3664:	4b03      	ldr	r3, [pc, #12]	; (3674 <SystemInit+0x19c>)
    3666:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    366a:	2203      	movs	r2, #3
    366c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    3670:	e757      	b.n	3522 <SystemInit+0x4a>
    3672:	bf00      	nop
    3674:	50004000 	.word	0x50004000
    3678:	50039000 	.word	0x50039000
    367c:	beef0044 	.word	0xbeef0044
    3680:	00006f08 	.word	0x00006f08
    3684:	50032000 	.word	0x50032000
    3688:	00006f04 	.word	0x00006f04
    368c:	50002000 	.word	0x50002000
    3690:	e000ed00 	.word	0xe000ed00
    3694:	00ff8000 	.word	0x00ff8000
    3698:	50006000 	.word	0x50006000

0000369c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    369c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    369e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    36a0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    36a2:	fab2 f382 	clz	r3, r2
    36a6:	f1c3 031f 	rsb	r3, r3, #31
    36aa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    36ac:	fa05 f403 	lsl.w	r4, r5, r3
    36b0:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    36b4:	e8d0 6fef 	ldaex	r6, [r0]
    36b8:	4296      	cmp	r6, r2
    36ba:	d104      	bne.n	36c6 <nrfx_flag32_alloc+0x2a>
    36bc:	e8c0 4fec 	stlex	ip, r4, [r0]
    36c0:	f1bc 0f00 	cmp.w	ip, #0
    36c4:	d1f6      	bne.n	36b4 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    36c6:	d1eb      	bne.n	36a0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    36c8:	4801      	ldr	r0, [pc, #4]	; (36d0 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    36ca:	700b      	strb	r3, [r1, #0]
}
    36cc:	bd70      	pop	{r4, r5, r6, pc}
    36ce:	bf00      	nop
    36d0:	0bad0000 	.word	0x0bad0000

000036d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    36d4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    36d6:	6803      	ldr	r3, [r0, #0]
    36d8:	40cb      	lsrs	r3, r1
    36da:	07db      	lsls	r3, r3, #31
    36dc:	d410      	bmi.n	3700 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    36de:	2301      	movs	r3, #1
    36e0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    36e2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    36e4:	ea43 0102 	orr.w	r1, r3, r2
    36e8:	e8d0 4fef 	ldaex	r4, [r0]
    36ec:	4294      	cmp	r4, r2
    36ee:	d104      	bne.n	36fa <nrfx_flag32_free+0x26>
    36f0:	e8c0 1fec 	stlex	ip, r1, [r0]
    36f4:	f1bc 0f00 	cmp.w	ip, #0
    36f8:	d1f6      	bne.n	36e8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    36fa:	d1f2      	bne.n	36e2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    36fc:	4801      	ldr	r0, [pc, #4]	; (3704 <nrfx_flag32_free+0x30>)
}
    36fe:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3700:	4801      	ldr	r0, [pc, #4]	; (3708 <nrfx_flag32_free+0x34>)
    3702:	e7fc      	b.n	36fe <nrfx_flag32_free+0x2a>
    3704:	0bad0000 	.word	0x0bad0000
    3708:	0bad0004 	.word	0x0bad0004

0000370c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    370c:	4b04      	ldr	r3, [pc, #16]	; (3720 <nrfx_clock_init+0x14>)
    370e:	791a      	ldrb	r2, [r3, #4]
    3710:	b922      	cbnz	r2, 371c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3712:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3714:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3716:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3718:	4802      	ldr	r0, [pc, #8]	; (3724 <nrfx_clock_init+0x18>)
    371a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    371c:	4802      	ldr	r0, [pc, #8]	; (3728 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    371e:	4770      	bx	lr
    3720:	2000093c 	.word	0x2000093c
    3724:	0bad0000 	.word	0x0bad0000
    3728:	0bad000c 	.word	0x0bad000c

0000372c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    372c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3730:	b510      	push	{r4, lr}
    3732:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3736:	b152      	cbz	r2, 374e <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3738:	2000      	movs	r0, #0
    373a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    373e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3742:	2201      	movs	r2, #1
    3744:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3748:	4b23      	ldr	r3, [pc, #140]	; (37d8 <nrfx_power_clock_irq_handler+0xac>)
    374a:	681b      	ldr	r3, [r3, #0]
    374c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    374e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3752:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3756:	b18a      	cbz	r2, 377c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3758:	2200      	movs	r2, #0
    375a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    375e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3762:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3766:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    376a:	f002 0203 	and.w	r2, r2, #3
    376e:	2a01      	cmp	r2, #1
    3770:	f04f 0102 	mov.w	r1, #2
    3774:	d128      	bne.n	37c8 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3776:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    377a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    377c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3780:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    3784:	b162      	cbz	r2, 37a0 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3786:	2200      	movs	r2, #0
    3788:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    378c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    3790:	f44f 7280 	mov.w	r2, #256	; 0x100
    3794:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    3798:	4b0f      	ldr	r3, [pc, #60]	; (37d8 <nrfx_power_clock_irq_handler+0xac>)
    379a:	2004      	movs	r0, #4
    379c:	681b      	ldr	r3, [r3, #0]
    379e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    37a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37a4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    37a8:	b1aa      	cbz	r2, 37d6 <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37aa:	2200      	movs	r2, #0
    37ac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    37b0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    37b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    37b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    37bc:	4b06      	ldr	r3, [pc, #24]	; (37d8 <nrfx_power_clock_irq_handler+0xac>)
    37be:	2005      	movs	r0, #5
    }
#endif
}
    37c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    37c4:	681b      	ldr	r3, [r3, #0]
    37c6:	4718      	bx	r3
    37c8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    37cc:	4b02      	ldr	r3, [pc, #8]	; (37d8 <nrfx_power_clock_irq_handler+0xac>)
    37ce:	2001      	movs	r0, #1
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	4798      	blx	r3
    37d4:	e7d2      	b.n	377c <nrfx_power_clock_irq_handler+0x50>
}
    37d6:	bd10      	pop	{r4, pc}
    37d8:	2000093c 	.word	0x2000093c

000037dc <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    37dc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    37de:	4801      	ldr	r0, [pc, #4]	; (37e4 <nrfx_dppi_channel_alloc+0x8>)
    37e0:	f7ff bf5c 	b.w	369c <nrfx_flag32_alloc>
    37e4:	20000074 	.word	0x20000074

000037e8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    37e8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    37ea:	f003 021f 	and.w	r2, r3, #31
    37ee:	6002      	str	r2, [r0, #0]
}
    37f0:	4a03      	ldr	r2, [pc, #12]	; (3800 <nrf_gpio_pin_port_decode+0x18>)
    37f2:	4804      	ldr	r0, [pc, #16]	; (3804 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    37f4:	095b      	lsrs	r3, r3, #5
}
    37f6:	2b01      	cmp	r3, #1
    37f8:	bf18      	it	ne
    37fa:	4610      	movne	r0, r2
    37fc:	4770      	bx	lr
    37fe:	bf00      	nop
    3800:	50842500 	.word	0x50842500
    3804:	50842800 	.word	0x50842800

00003808 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3808:	4b03      	ldr	r3, [pc, #12]	; (3818 <pin_in_use_by_te+0x10>)
    380a:	3008      	adds	r0, #8
    380c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3810:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3814:	4770      	bx	lr
    3816:	bf00      	nop
    3818:	20000078 	.word	0x20000078

0000381c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    381c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    381e:	4c0d      	ldr	r4, [pc, #52]	; (3854 <call_handler+0x38>)
    3820:	f100 0308 	add.w	r3, r0, #8
    3824:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    3828:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    382a:	05da      	lsls	r2, r3, #23
{
    382c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    382e:	d507      	bpl.n	3840 <call_handler+0x24>
    3830:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3834:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3838:	6852      	ldr	r2, [r2, #4]
    383a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    383e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3840:	68a3      	ldr	r3, [r4, #8]
    3842:	b12b      	cbz	r3, 3850 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3844:	4631      	mov	r1, r6
    3846:	4628      	mov	r0, r5
    3848:	68e2      	ldr	r2, [r4, #12]
    }
}
    384a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    384e:	4718      	bx	r3
}
    3850:	bd70      	pop	{r4, r5, r6, pc}
    3852:	bf00      	nop
    3854:	20000078 	.word	0x20000078

00003858 <release_handler>:
{
    3858:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    385a:	4a12      	ldr	r2, [pc, #72]	; (38a4 <release_handler+0x4c>)
    385c:	3008      	adds	r0, #8
    385e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3862:	05d9      	lsls	r1, r3, #23
    3864:	d51b      	bpl.n	389e <release_handler+0x46>
    3866:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    386a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    386e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3872:	2000      	movs	r0, #0
    3874:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3878:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    387c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3880:	d003      	beq.n	388a <release_handler+0x32>
    3882:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3886:	4299      	cmp	r1, r3
    3888:	d009      	beq.n	389e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    388a:	3001      	adds	r0, #1
    388c:	2830      	cmp	r0, #48	; 0x30
    388e:	d1f3      	bne.n	3878 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3890:	2300      	movs	r3, #0
    3892:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3896:	4804      	ldr	r0, [pc, #16]	; (38a8 <release_handler+0x50>)
}
    3898:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    389a:	f7ff bf1b 	b.w	36d4 <nrfx_flag32_free>
}
    389e:	bc10      	pop	{r4}
    38a0:	4770      	bx	lr
    38a2:	bf00      	nop
    38a4:	20000078 	.word	0x20000078
    38a8:	200000ec 	.word	0x200000ec

000038ac <pin_handler_trigger_uninit>:
{
    38ac:	b538      	push	{r3, r4, r5, lr}
    38ae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    38b0:	f7ff ffaa 	bl	3808 <pin_in_use_by_te>
    38b4:	4c0b      	ldr	r4, [pc, #44]	; (38e4 <pin_handler_trigger_uninit+0x38>)
    38b6:	f102 0508 	add.w	r5, r2, #8
    38ba:	b160      	cbz	r0, 38d6 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    38bc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    38be:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    38c2:	0b5b      	lsrs	r3, r3, #13
    38c4:	009b      	lsls	r3, r3, #2
    38c6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    38ca:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    38ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    38d2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    38d6:	4610      	mov	r0, r2
    38d8:	f7ff ffbe 	bl	3858 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    38dc:	2300      	movs	r3, #0
    38de:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    38e2:	bd38      	pop	{r3, r4, r5, pc}
    38e4:	20000078 	.word	0x20000078

000038e8 <nrfx_gpiote_input_configure>:
{
    38e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    38ec:	4604      	mov	r4, r0
    38ee:	4690      	mov	r8, r2
    38f0:	461d      	mov	r5, r3
    if (p_input_config)
    38f2:	b301      	cbz	r1, 3936 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    38f4:	4e4f      	ldr	r6, [pc, #316]	; (3a34 <nrfx_gpiote_input_configure+0x14c>)
    38f6:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    38fa:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    38fe:	079b      	lsls	r3, r3, #30
    3900:	d502      	bpl.n	3908 <nrfx_gpiote_input_configure+0x20>
    3902:	f7ff ff81 	bl	3808 <pin_in_use_by_te>
    3906:	bb28      	cbnz	r0, 3954 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3908:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    390a:	4620      	mov	r0, r4
    390c:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3910:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3914:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3918:	f10d 020f 	add.w	r2, sp, #15
    391c:	460b      	mov	r3, r1
    391e:	f10d 010e 	add.w	r1, sp, #14
    3922:	f002 fcc0 	bl	62a6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3926:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    392a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    392e:	f043 0301 	orr.w	r3, r3, #1
    3932:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    3936:	f1b8 0f00 	cmp.w	r8, #0
    393a:	d02d      	beq.n	3998 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    393c:	4e3d      	ldr	r6, [pc, #244]	; (3a34 <nrfx_gpiote_input_configure+0x14c>)
    393e:	f104 0708 	add.w	r7, r4, #8
    3942:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3946:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    394a:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    394c:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    3950:	d502      	bpl.n	3958 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    3952:	b1cb      	cbz	r3, 3988 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    3954:	4838      	ldr	r0, [pc, #224]	; (3a38 <nrfx_gpiote_input_configure+0x150>)
    3956:	e021      	b.n	399c <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3958:	f021 0120 	bic.w	r1, r1, #32
    395c:	04c9      	lsls	r1, r1, #19
    395e:	0cc9      	lsrs	r1, r1, #19
    3960:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    3964:	b183      	cbz	r3, 3988 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    3966:	2803      	cmp	r0, #3
    3968:	d8f4      	bhi.n	3954 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    396a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    396e:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3972:	4662      	mov	r2, ip
    3974:	0092      	lsls	r2, r2, #2
    3976:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    397a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    397e:	b980      	cbnz	r0, 39a2 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    3980:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    3984:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3988:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    398c:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3990:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    3994:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    3998:	bb1d      	cbnz	r5, 39e2 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    399a:	4828      	ldr	r0, [pc, #160]	; (3a3c <nrfx_gpiote_input_configure+0x154>)
}
    399c:	b004      	add	sp, #16
    399e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    39a2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    39a6:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    39aa:	f023 0303 	bic.w	r3, r3, #3
    39ae:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    39b2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    39b6:	f041 0120 	orr.w	r1, r1, #32
    39ba:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    39be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    39c2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    39c6:	0223      	lsls	r3, r4, #8
    39c8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    39cc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    39d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    39d4:	ea43 030e 	orr.w	r3, r3, lr
    39d8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    39dc:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    39e0:	e7d2      	b.n	3988 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    39e2:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    39e4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    39e8:	f7ff ff36 	bl	3858 <release_handler>
    if (!handler)
    39ec:	2e00      	cmp	r6, #0
    39ee:	d0d4      	beq.n	399a <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    39f0:	4d10      	ldr	r5, [pc, #64]	; (3a34 <nrfx_gpiote_input_configure+0x14c>)
    39f2:	e9d5 2300 	ldrd	r2, r3, [r5]
    39f6:	4296      	cmp	r6, r2
    39f8:	d101      	bne.n	39fe <nrfx_gpiote_input_configure+0x116>
    39fa:	429f      	cmp	r7, r3
    39fc:	d018      	beq.n	3a30 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    39fe:	4810      	ldr	r0, [pc, #64]	; (3a40 <nrfx_gpiote_input_configure+0x158>)
    3a00:	f10d 010f 	add.w	r1, sp, #15
    3a04:	f7ff fe4a 	bl	369c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3a08:	4b0c      	ldr	r3, [pc, #48]	; (3a3c <nrfx_gpiote_input_configure+0x154>)
    3a0a:	4298      	cmp	r0, r3
    3a0c:	d1c6      	bne.n	399c <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    3a0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    3a12:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3a16:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3a18:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3a1a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    3a1e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3a22:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3a2a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    3a2e:	e7b4      	b.n	399a <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3a30:	2200      	movs	r2, #0
    3a32:	e7ee      	b.n	3a12 <nrfx_gpiote_input_configure+0x12a>
    3a34:	20000078 	.word	0x20000078
    3a38:	0bad0004 	.word	0x0bad0004
    3a3c:	0bad0000 	.word	0x0bad0000
    3a40:	200000ec 	.word	0x200000ec

00003a44 <nrfx_gpiote_output_configure>:
{
    3a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a46:	4604      	mov	r4, r0
    3a48:	4615      	mov	r5, r2
    3a4a:	b085      	sub	sp, #20
    if (p_config)
    3a4c:	b319      	cbz	r1, 3a96 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a4e:	4e34      	ldr	r6, [pc, #208]	; (3b20 <nrfx_gpiote_output_configure+0xdc>)
    3a50:	f100 0708 	add.w	r7, r0, #8
    3a54:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3a58:	0793      	lsls	r3, r2, #30
    3a5a:	d403      	bmi.n	3a64 <nrfx_gpiote_output_configure+0x20>
    3a5c:	f7ff fed4 	bl	3808 <pin_in_use_by_te>
    3a60:	2800      	cmp	r0, #0
    3a62:	d15a      	bne.n	3b1a <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3a64:	f012 0f1c 	tst.w	r2, #28
    3a68:	d002      	beq.n	3a70 <nrfx_gpiote_output_configure+0x2c>
    3a6a:	784b      	ldrb	r3, [r1, #1]
    3a6c:	2b01      	cmp	r3, #1
    3a6e:	d054      	beq.n	3b1a <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3a70:	2301      	movs	r3, #1
    3a72:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3a76:	2300      	movs	r3, #0
    3a78:	1c4a      	adds	r2, r1, #1
    3a7a:	e9cd 1300 	strd	r1, r3, [sp]
    3a7e:	4620      	mov	r0, r4
    3a80:	1c8b      	adds	r3, r1, #2
    3a82:	f10d 010f 	add.w	r1, sp, #15
    3a86:	f002 fc0e 	bl	62a6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3a8a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3a8e:	f043 0303 	orr.w	r3, r3, #3
    3a92:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3a96:	b915      	cbnz	r5, 3a9e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    3a98:	4822      	ldr	r0, [pc, #136]	; (3b24 <nrfx_gpiote_output_configure+0xe0>)
}
    3a9a:	b005      	add	sp, #20
    3a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a9e:	4e20      	ldr	r6, [pc, #128]	; (3b20 <nrfx_gpiote_output_configure+0xdc>)
    3aa0:	f104 0708 	add.w	r7, r4, #8
    3aa4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3aa8:	0783      	lsls	r3, r0, #30
    3aaa:	d536      	bpl.n	3b1a <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    3aac:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3ab0:	2300      	movs	r3, #0
    3ab2:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3ab4:	f020 0020 	bic.w	r0, r0, #32
    3ab8:	0089      	lsls	r1, r1, #2
    3aba:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    3abe:	04c0      	lsls	r0, r0, #19
    3ac0:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    3ac4:	0cc0      	lsrs	r0, r0, #19
    3ac6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3aca:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3ace:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3ad2:	786a      	ldrb	r2, [r5, #1]
    3ad4:	2a00      	cmp	r2, #0
    3ad6:	d0df      	beq.n	3a98 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3ad8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3adc:	78ad      	ldrb	r5, [r5, #2]
    3ade:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3ae2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3ae6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3aea:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3aee:	0223      	lsls	r3, r4, #8
    3af0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3af4:	0412      	lsls	r2, r2, #16
    3af6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3afa:	ea43 030e 	orr.w	r3, r3, lr
    3afe:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3b00:	052a      	lsls	r2, r5, #20
    3b02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3b06:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3b0a:	4313      	orrs	r3, r2
    3b0c:	f040 0020 	orr.w	r0, r0, #32
    3b10:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3b14:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3b18:	e7be      	b.n	3a98 <nrfx_gpiote_output_configure+0x54>
{
    3b1a:	4803      	ldr	r0, [pc, #12]	; (3b28 <nrfx_gpiote_output_configure+0xe4>)
    3b1c:	e7bd      	b.n	3a9a <nrfx_gpiote_output_configure+0x56>
    3b1e:	bf00      	nop
    3b20:	20000078 	.word	0x20000078
    3b24:	0bad0000 	.word	0x0bad0000
    3b28:	0bad0004 	.word	0x0bad0004

00003b2c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3b2c:	4b01      	ldr	r3, [pc, #4]	; (3b34 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3b2e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3b32:	4770      	bx	lr
    3b34:	20000078 	.word	0x20000078

00003b38 <nrfx_gpiote_channel_get>:
{
    3b38:	b508      	push	{r3, lr}
    3b3a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3b3c:	f7ff fe64 	bl	3808 <pin_in_use_by_te>
    3b40:	b138      	cbz	r0, 3b52 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3b42:	4b05      	ldr	r3, [pc, #20]	; (3b58 <nrfx_gpiote_channel_get+0x20>)
    3b44:	3208      	adds	r2, #8
    3b46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    3b4a:	4804      	ldr	r0, [pc, #16]	; (3b5c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3b4c:	0b5b      	lsrs	r3, r3, #13
    3b4e:	700b      	strb	r3, [r1, #0]
}
    3b50:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3b52:	4803      	ldr	r0, [pc, #12]	; (3b60 <nrfx_gpiote_channel_get+0x28>)
    3b54:	e7fc      	b.n	3b50 <nrfx_gpiote_channel_get+0x18>
    3b56:	bf00      	nop
    3b58:	20000078 	.word	0x20000078
    3b5c:	0bad0000 	.word	0x0bad0000
    3b60:	0bad0004 	.word	0x0bad0004

00003b64 <nrfx_gpiote_init>:
{
    3b64:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3b66:	4c0f      	ldr	r4, [pc, #60]	; (3ba4 <nrfx_gpiote_init+0x40>)
    3b68:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3b6c:	b9bd      	cbnz	r5, 3b9e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3b6e:	2260      	movs	r2, #96	; 0x60
    3b70:	4629      	mov	r1, r5
    3b72:	f104 0010 	add.w	r0, r4, #16
    3b76:	f002 f896 	bl	5ca6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3b7a:	200d      	movs	r0, #13
    3b7c:	f7fd ffae 	bl	1adc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3b80:	4b09      	ldr	r3, [pc, #36]	; (3ba8 <nrfx_gpiote_init+0x44>)
    return err_code;
    3b82:	480a      	ldr	r0, [pc, #40]	; (3bac <nrfx_gpiote_init+0x48>)
    3b84:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3b88:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3b90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3b94:	2301      	movs	r3, #1
    3b96:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3b9a:	6763      	str	r3, [r4, #116]	; 0x74
}
    3b9c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3b9e:	4804      	ldr	r0, [pc, #16]	; (3bb0 <nrfx_gpiote_init+0x4c>)
    3ba0:	e7fc      	b.n	3b9c <nrfx_gpiote_init+0x38>
    3ba2:	bf00      	nop
    3ba4:	20000078 	.word	0x20000078
    3ba8:	5000d000 	.word	0x5000d000
    3bac:	0bad0000 	.word	0x0bad0000
    3bb0:	0bad0005 	.word	0x0bad0005

00003bb4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3bb4:	4b03      	ldr	r3, [pc, #12]	; (3bc4 <nrfx_gpiote_is_init+0x10>)
    3bb6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3bba:	3800      	subs	r0, #0
    3bbc:	bf18      	it	ne
    3bbe:	2001      	movne	r0, #1
    3bc0:	4770      	bx	lr
    3bc2:	bf00      	nop
    3bc4:	20000078 	.word	0x20000078

00003bc8 <nrfx_gpiote_channel_free>:
{
    3bc8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3bca:	4801      	ldr	r0, [pc, #4]	; (3bd0 <nrfx_gpiote_channel_free+0x8>)
    3bcc:	f7ff bd82 	b.w	36d4 <nrfx_flag32_free>
    3bd0:	200000e8 	.word	0x200000e8

00003bd4 <nrfx_gpiote_channel_alloc>:
{
    3bd4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3bd6:	4801      	ldr	r0, [pc, #4]	; (3bdc <nrfx_gpiote_channel_alloc+0x8>)
    3bd8:	f7ff bd60 	b.w	369c <nrfx_flag32_alloc>
    3bdc:	200000e8 	.word	0x200000e8

00003be0 <nrfx_gpiote_trigger_enable>:
{
    3be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3be2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3be4:	f7ff fe10 	bl	3808 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3be8:	4b1e      	ldr	r3, [pc, #120]	; (3c64 <nrfx_gpiote_trigger_enable+0x84>)
    3bea:	f104 0208 	add.w	r2, r4, #8
    3bee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3bf2:	b1e8      	cbz	r0, 3c30 <nrfx_gpiote_trigger_enable+0x50>
    3bf4:	f013 0502 	ands.w	r5, r3, #2
    3bf8:	d11a      	bne.n	3c30 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3bfa:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3bfc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3bfe:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    3c02:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    3c06:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3c0a:	6005      	str	r5, [r0, #0]
    3c0c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3c10:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3c12:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3c16:	f040 0001 	orr.w	r0, r0, #1
    3c1a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3c1e:	b129      	cbz	r1, 3c2c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3c20:	2201      	movs	r2, #1
    3c22:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3c26:	4a10      	ldr	r2, [pc, #64]	; (3c68 <nrfx_gpiote_trigger_enable+0x88>)
    3c28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3c2c:	b003      	add	sp, #12
    3c2e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3c30:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3c34:	2b04      	cmp	r3, #4
    3c36:	d011      	beq.n	3c5c <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3c38:	2b05      	cmp	r3, #5
    3c3a:	d011      	beq.n	3c60 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3c3c:	a801      	add	r0, sp, #4
    3c3e:	9401      	str	r4, [sp, #4]
    3c40:	f7ff fdd2 	bl	37e8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3c44:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3c46:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3c48:	40d9      	lsrs	r1, r3
    3c4a:	f001 0101 	and.w	r1, r1, #1
    3c4e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3c50:	4620      	mov	r0, r4
}
    3c52:	b003      	add	sp, #12
    3c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3c58:	f002 bb6e 	b.w	6338 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3c5c:	2103      	movs	r1, #3
    3c5e:	e7f7      	b.n	3c50 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3c60:	2102      	movs	r1, #2
    3c62:	e7f5      	b.n	3c50 <nrfx_gpiote_trigger_enable+0x70>
    3c64:	20000078 	.word	0x20000078
    3c68:	5000d000 	.word	0x5000d000

00003c6c <nrfx_gpiote_trigger_disable>:
{
    3c6c:	b508      	push	{r3, lr}
    3c6e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3c70:	f7ff fdca 	bl	3808 <pin_in_use_by_te>
    3c74:	b1c0      	cbz	r0, 3ca8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3c76:	4b0f      	ldr	r3, [pc, #60]	; (3cb4 <nrfx_gpiote_trigger_disable+0x48>)
    3c78:	f102 0108 	add.w	r1, r2, #8
    3c7c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3c80:	0799      	lsls	r1, r3, #30
    3c82:	d411      	bmi.n	3ca8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3c84:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c86:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3c88:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3c8a:	490b      	ldr	r1, [pc, #44]	; (3cb8 <nrfx_gpiote_trigger_disable+0x4c>)
    3c8c:	009b      	lsls	r3, r3, #2
    3c8e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3c92:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3c96:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3c9a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3c9e:	f022 0203 	bic.w	r2, r2, #3
    3ca2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3ca6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3ca8:	2100      	movs	r1, #0
}
    3caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3cae:	4610      	mov	r0, r2
    3cb0:	f002 bb42 	b.w	6338 <nrf_gpio_cfg_sense_set>
    3cb4:	20000078 	.word	0x20000078
    3cb8:	5000d000 	.word	0x5000d000

00003cbc <nrfx_gpiote_pin_uninit>:
{
    3cbc:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3cbe:	4b10      	ldr	r3, [pc, #64]	; (3d00 <nrfx_gpiote_pin_uninit+0x44>)
    3cc0:	f100 0208 	add.w	r2, r0, #8
    3cc4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    3cc8:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3cca:	07db      	lsls	r3, r3, #31
    3ccc:	d516      	bpl.n	3cfc <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    3cce:	f7ff ffcd 	bl	3c6c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3cd2:	4620      	mov	r0, r4
    3cd4:	f7ff fdea 	bl	38ac <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3cd8:	a801      	add	r0, sp, #4
    3cda:	9401      	str	r4, [sp, #4]
    3cdc:	f7ff fd84 	bl	37e8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3ce0:	9b01      	ldr	r3, [sp, #4]
    3ce2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3ce6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3cea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3cee:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    3cf2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    3cf6:	4803      	ldr	r0, [pc, #12]	; (3d04 <nrfx_gpiote_pin_uninit+0x48>)
}
    3cf8:	b002      	add	sp, #8
    3cfa:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3cfc:	4802      	ldr	r0, [pc, #8]	; (3d08 <nrfx_gpiote_pin_uninit+0x4c>)
    3cfe:	e7fb      	b.n	3cf8 <nrfx_gpiote_pin_uninit+0x3c>
    3d00:	20000078 	.word	0x20000078
    3d04:	0bad0000 	.word	0x0bad0000
    3d08:	0bad0004 	.word	0x0bad0004

00003d0c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    3d10:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3d12:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d14:	4634      	mov	r4, r6
{
    3d16:	4b63      	ldr	r3, [pc, #396]	; (3ea4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    3d18:	4863      	ldr	r0, [pc, #396]	; (3ea8 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3d1a:	4964      	ldr	r1, [pc, #400]	; (3eac <nrfx_gpiote_irq_handler+0x1a0>)
{
    3d1c:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d1e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3d20:	b135      	cbz	r5, 3d30 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3d22:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3d26:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d28:	bf1e      	ittt	ne
    3d2a:	601c      	strne	r4, [r3, #0]
    3d2c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3d2e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3d30:	3304      	adds	r3, #4
    3d32:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3d34:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3d38:	d1f1      	bne.n	3d1e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d3a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 3ea8 <nrfx_gpiote_irq_handler+0x19c>
    3d3e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3d42:	2b00      	cmp	r3, #0
    3d44:	f000 8091 	beq.w	3e6a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    3d48:	f8df 8164 	ldr.w	r8, [pc, #356]	; 3eb0 <nrfx_gpiote_irq_handler+0x1a4>
    3d4c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    3d50:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3d52:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    3d56:	4b57      	ldr	r3, [pc, #348]	; (3eb4 <nrfx_gpiote_irq_handler+0x1a8>)
    3d58:	6a1a      	ldr	r2, [r3, #32]
    3d5a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3d5c:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3d5e:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    3d62:	f10d 0b10 	add.w	fp, sp, #16
    3d66:	ea4f 1349 	mov.w	r3, r9, lsl #5
    3d6a:	9300      	str	r3, [sp, #0]
    3d6c:	e048      	b.n	3e00 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    3d6e:	fa94 f4a4 	rbit	r4, r4
    3d72:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3d76:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3d78:	4a4f      	ldr	r2, [pc, #316]	; (3eb8 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    3d7a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3d7c:	f104 0308 	add.w	r3, r4, #8
    3d80:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3d84:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3d86:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    3d88:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3d8c:	fa03 f202 	lsl.w	r2, r3, r2
    3d90:	f81b 3000 	ldrb.w	r3, [fp, r0]
    3d94:	9403      	str	r4, [sp, #12]
    3d96:	ea23 0302 	bic.w	r3, r3, r2
    3d9a:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3d9e:	a803      	add	r0, sp, #12
    3da0:	f7ff fd22 	bl	37e8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3da4:	9b03      	ldr	r3, [sp, #12]
    3da6:	08b9      	lsrs	r1, r7, #2
    3da8:	3380      	adds	r3, #128	; 0x80
    3daa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3dae:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    3db2:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3db4:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3db6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    3dba:	d52b      	bpl.n	3e14 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    3dbc:	4620      	mov	r0, r4
    3dbe:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3dc0:	b2dd      	uxtb	r5, r3
    3dc2:	f7ff fd2b 	bl	381c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3dc6:	a803      	add	r0, sp, #12
    3dc8:	9403      	str	r4, [sp, #12]
    3dca:	f7ff fd0d 	bl	37e8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3dce:	9b03      	ldr	r3, [sp, #12]
    3dd0:	3380      	adds	r3, #128	; 0x80
    3dd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3dd6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3dda:	429d      	cmp	r5, r3
    3ddc:	d107      	bne.n	3dee <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3dde:	2100      	movs	r1, #0
    3de0:	4620      	mov	r0, r4
    3de2:	f002 faa9 	bl	6338 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3de6:	4629      	mov	r1, r5
    3de8:	4620      	mov	r0, r4
    3dea:	f002 faa5 	bl	6338 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3dee:	a803      	add	r0, sp, #12
    3df0:	9403      	str	r4, [sp, #12]
    3df2:	f7ff fcf9 	bl	37e8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3df6:	2201      	movs	r2, #1
    3df8:	9b03      	ldr	r3, [sp, #12]
    3dfa:	fa02 f303 	lsl.w	r3, r2, r3
    3dfe:	6203      	str	r3, [r0, #32]
            while (latch[i])
    3e00:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    3e04:	2c00      	cmp	r4, #0
    3e06:	d1b2      	bne.n	3d6e <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3e08:	f1b9 0f00 	cmp.w	r9, #0
    3e0c:	d11d      	bne.n	3e4a <nrfx_gpiote_irq_handler+0x13e>
    3e0e:	f04f 0901 	mov.w	r9, #1
    3e12:	e7a8      	b.n	3d66 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3e14:	2b02      	cmp	r3, #2
    3e16:	d10c      	bne.n	3e32 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3e18:	2103      	movs	r1, #3
    3e1a:	4620      	mov	r0, r4
    3e1c:	f002 fa8c 	bl	6338 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3e20:	f005 0305 	and.w	r3, r5, #5
    3e24:	2b01      	cmp	r3, #1
    3e26:	d1e2      	bne.n	3dee <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    3e28:	4639      	mov	r1, r7
    3e2a:	4620      	mov	r0, r4
    3e2c:	f7ff fcf6 	bl	381c <call_handler>
    3e30:	e7dd      	b.n	3dee <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3e32:	2102      	movs	r1, #2
    3e34:	4620      	mov	r0, r4
    3e36:	9301      	str	r3, [sp, #4]
    3e38:	f002 fa7e 	bl	6338 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3e3c:	2d03      	cmp	r5, #3
    3e3e:	d0f3      	beq.n	3e28 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3e40:	9b01      	ldr	r3, [sp, #4]
    3e42:	2b03      	cmp	r3, #3
    3e44:	d1d3      	bne.n	3dee <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3e46:	2d02      	cmp	r5, #2
    3e48:	e7ed      	b.n	3e26 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e4a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    3e4e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3e52:	f8d8 3020 	ldr.w	r3, [r8, #32]
    3e56:	4917      	ldr	r1, [pc, #92]	; (3eb4 <nrfx_gpiote_irq_handler+0x1a8>)
    3e58:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3e5a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    3e5e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    3e60:	4313      	orrs	r3, r2
    3e62:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3e64:	620a      	str	r2, [r1, #32]
    3e66:	f47f af7a 	bne.w	3d5e <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    3e6a:	2401      	movs	r4, #1
    while (mask)
    3e6c:	b916      	cbnz	r6, 3e74 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3e6e:	b007      	add	sp, #28
    3e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3e74:	fa96 f3a6 	rbit	r3, r6
    3e78:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3e7c:	fa04 f203 	lsl.w	r2, r4, r3
    3e80:	009b      	lsls	r3, r3, #2
    3e82:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3e86:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3e8a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3e8e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3e92:	f3c0 2005 	ubfx	r0, r0, #8, #6
    3e96:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    3e9a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3e9e:	f7ff fcbd 	bl	381c <call_handler>
    3ea2:	e7e3      	b.n	3e6c <nrfx_gpiote_irq_handler+0x160>
    3ea4:	5000d100 	.word	0x5000d100
    3ea8:	5000d000 	.word	0x5000d000
    3eac:	5000d120 	.word	0x5000d120
    3eb0:	50842500 	.word	0x50842500
    3eb4:	50842800 	.word	0x50842800
    3eb8:	20000078 	.word	0x20000078

00003ebc <nrfx_twim_init>:
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3ebc:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
    3ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3ec4:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3ec6:	4d46      	ldr	r5, [pc, #280]	; (3fe0 <nrfx_twim_init+0x124>)
    3ec8:	fb0c fc06 	mul.w	ip, ip, r6
    3ecc:	eb05 040c 	add.w	r4, r5, ip
{
    3ed0:	469e      	mov	lr, r3
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3ed2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    3ed6:	2b00      	cmp	r3, #0
    3ed8:	d17d      	bne.n	3fd6 <nrfx_twim_init+0x11a>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    3eda:	6807      	ldr	r7, [r0, #0]
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    3edc:	60a3      	str	r3, [r4, #8]
    p_cb->handler         = event_handler;
    3ede:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->p_context       = p_context;
    3ee2:	f8c4 e004 	str.w	lr, [r4, #4]
    p_cb->repeated        = false;
    3ee6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    p_cb->busy            = false;
    3eea:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    3eee:	7b4b      	ldrb	r3, [r1, #13]
    3ef0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    3ef4:	f891 c00e 	ldrb.w	ip, [r1, #14]
    3ef8:	f884 c033 	strb.w	ip, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    3efc:	688b      	ldr	r3, [r1, #8]
    3efe:	f1bc 0f00 	cmp.w	ip, #0
    3f02:	d01c      	beq.n	3f3e <nrfx_twim_init+0x82>
    3f04:	7bcc      	ldrb	r4, [r1, #15]
    3f06:	b944      	cbnz	r4, 3f1a <nrfx_twim_init+0x5e>
    if (p_config->frequency >= NRF_TWIM_FREQ_1000K)
    3f08:	f1b3 6f7f 	cmp.w	r3, #267386880	; 0xff00000
    3f0c:	d24d      	bcs.n	3faa <nrfx_twim_init+0xee>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    3f0e:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    3f12:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    3f16:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    3f1a:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    3f1c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

    if (p_cb->handler)
    3f20:	b122      	cbz	r2, 3f2c <nrfx_twim_init+0x70>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3f22:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    3f24:	f340 3007 	sbfx	r0, r0, #12, #8
    3f28:	f7fd fdd8 	bl	1adc <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3f2c:	2334      	movs	r3, #52	; 0x34
    3f2e:	fb03 5506 	mla	r5, r3, r6, r5
    3f32:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3f34:	482b      	ldr	r0, [pc, #172]	; (3fe4 <nrfx_twim_init+0x128>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3f36:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    3f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (p_config->frequency >= NRF_TWIM_FREQ_1000K)
    3f3e:	f1b3 6f7f 	cmp.w	r3, #267386880	; 0xff00000
    3f42:	d345      	bcc.n	3fd0 <nrfx_twim_init+0x114>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
    3f44:	680b      	ldr	r3, [r1, #0]
    3f46:	2b22      	cmp	r3, #34	; 0x22
    3f48:	d139      	bne.n	3fbe <nrfx_twim_init+0x102>
    3f4a:	684b      	ldr	r3, [r1, #4]
    3f4c:	2b23      	cmp	r3, #35	; 0x23
    3f4e:	d144      	bne.n	3fda <nrfx_twim_init+0x11e>
    3f50:	f04f 0c0b 	mov.w	ip, #11
        TWIM_PIN_INIT(p_config->scl, drive);
    3f54:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    3f56:	4b24      	ldr	r3, [pc, #144]	; (3fe8 <nrfx_twim_init+0x12c>)
    3f58:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3fec <nrfx_twim_init+0x130>
    *p_pin = pin_number & 0x1F;
    3f5c:	f004 091f 	and.w	r9, r4, #31
    return pin_number >> 5;
    3f60:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    3f62:	2c01      	cmp	r4, #1
    3f64:	bf0c      	ite	eq
    3f66:	469e      	moveq	lr, r3
    3f68:	46c6      	movne	lr, r8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3f6a:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
    3f6e:	f8de 4200 	ldr.w	r4, [lr, #512]	; 0x200
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    3f72:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3f76:	f04c 0c0c 	orr.w	ip, ip, #12
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3f7a:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3f7e:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    3f82:	f8ce 4200 	str.w	r4, [lr, #512]	; 0x200
        TWIM_PIN_INIT(p_config->sda, drive);
    3f86:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    3f88:	f004 0e1f 	and.w	lr, r4, #31
    return pin_number >> 5;
    3f8c:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    3f8e:	2c01      	cmp	r4, #1
    3f90:	bf18      	it	ne
    3f92:	4643      	movne	r3, r8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3f94:	eb03 038e 	add.w	r3, r3, lr, lsl #2
    3f98:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3f9c:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3fa0:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    3fa4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    3fa8:	e005      	b.n	3fb6 <nrfx_twim_init+0xfa>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
    3faa:	680b      	ldr	r3, [r1, #0]
    3fac:	2b22      	cmp	r3, #34	; 0x22
    3fae:	d106      	bne.n	3fbe <nrfx_twim_init+0x102>
    3fb0:	684b      	ldr	r3, [r1, #4]
    3fb2:	2b23      	cmp	r3, #35	; 0x23
    3fb4:	d111      	bne.n	3fda <nrfx_twim_init+0x11e>
    if (!p_config->skip_psel_cfg)
    3fb6:	7bcb      	ldrb	r3, [r1, #15]
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d1ae      	bne.n	3f1a <nrfx_twim_init+0x5e>
    3fbc:	e7a7      	b.n	3f0e <nrfx_twim_init+0x52>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
    3fbe:	2b23      	cmp	r3, #35	; 0x23
    3fc0:	d10b      	bne.n	3fda <nrfx_twim_init+0x11e>
            ((p_config->scl != e0e1_pin_2) || (p_config->sda != e0e1_pin_1)))
    3fc2:	684b      	ldr	r3, [r1, #4]
    3fc4:	2b22      	cmp	r3, #34	; 0x22
    3fc6:	d108      	bne.n	3fda <nrfx_twim_init+0x11e>
    if (!p_config->skip_gpio_cfg)
    3fc8:	f1bc 0f00 	cmp.w	ip, #0
    3fcc:	d1f3      	bne.n	3fb6 <nrfx_twim_init+0xfa>
    3fce:	e7bf      	b.n	3f50 <nrfx_twim_init+0x94>
        drive = NRF_GPIO_PIN_S0D1;
    3fd0:	f04f 0c06 	mov.w	ip, #6
    3fd4:	e7be      	b.n	3f54 <nrfx_twim_init+0x98>
        return err_code;
    3fd6:	4806      	ldr	r0, [pc, #24]	; (3ff0 <nrfx_twim_init+0x134>)
    3fd8:	e7af      	b.n	3f3a <nrfx_twim_init+0x7e>
        return NRFX_ERROR_INVALID_PARAM;
    3fda:	4806      	ldr	r0, [pc, #24]	; (3ff4 <nrfx_twim_init+0x138>)
    3fdc:	e7ad      	b.n	3f3a <nrfx_twim_init+0x7e>
    3fde:	bf00      	nop
    3fe0:	20000944 	.word	0x20000944
    3fe4:	0bad0000 	.word	0x0bad0000
    3fe8:	50842800 	.word	0x50842800
    3fec:	50842500 	.word	0x50842500
    3ff0:	0bad0005 	.word	0x0bad0005
    3ff4:	0bad0004 	.word	0x0bad0004

00003ff8 <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    3ff8:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    3ffa:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3ffc:	7902      	ldrb	r2, [r0, #4]
    3ffe:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    4002:	2134      	movs	r1, #52	; 0x34
    4004:	4b03      	ldr	r3, [pc, #12]	; (4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>)
    4006:	fb01 3302 	mla	r3, r1, r2, r3
    400a:	2202      	movs	r2, #2
    400c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    4010:	4770      	bx	lr
    4012:	bf00      	nop
    4014:	20000944 	.word	0x20000944

00004018 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4018:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    401a:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    401c:	2034      	movs	r0, #52	; 0x34
    401e:	4b0b      	ldr	r3, [pc, #44]	; (404c <nrfx_twim_disable+0x34>)
    4020:	fb00 3301 	mla	r3, r0, r1, r3
    4024:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    4026:	480a      	ldr	r0, [pc, #40]	; (4050 <nrfx_twim_disable+0x38>)
    4028:	6099      	str	r1, [r3, #8]
    402a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    402e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    4032:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    4036:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    403a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    403e:	2201      	movs	r2, #1
    p_cb->busy = false;
    4040:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    4048:	4770      	bx	lr
    404a:	bf00      	nop
    404c:	20000944 	.word	0x20000944
    4050:	019c0202 	.word	0x019c0202

00004054 <nrfx_twim_xfer>:
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
    4054:	2334      	movs	r3, #52	; 0x34


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    4056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    405a:	4617      	mov	r7, r2
    p_cb->error = false;
    405c:	2200      	movs	r2, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    405e:	f890 e004 	ldrb.w	lr, [r0, #4]
    p_cb->error = false;
    4062:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 4348 <nrfx_twim_xfer+0x2f4>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    4066:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    4068:	fb03 c30e 	mla	r3, r3, lr, ip
    406c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    4070:	684b      	ldr	r3, [r1, #4]
{
    4072:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    4074:	b14b      	cbz	r3, 408a <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4076:	68cb      	ldr	r3, [r1, #12]
    4078:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    407c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4080:	d003      	beq.n	408a <nrfx_twim_xfer+0x36>
        return err_code;
    4082:	4eb2      	ldr	r6, [pc, #712]	; (434c <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4084:	4630      	mov	r0, r6
    4086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    408a:	2634      	movs	r6, #52	; 0x34
    408c:	fb06 c60e 	mla	r6, r6, lr, ip
    p_reg->INTENCLR = mask;
    4090:	4baf      	ldr	r3, [pc, #700]	; (4350 <nrfx_twim_xfer+0x2fc>)
    4092:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    4096:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    409a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    409e:	b123      	cbz	r3, 40aa <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    40a0:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    40a2:	4eac      	ldr	r6, [pc, #688]	; (4354 <nrfx_twim_xfer+0x300>)
    p_reg->INTENSET = mask;
    40a4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    40a8:	e7ec      	b.n	4084 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    40aa:	f017 0f14 	tst.w	r7, #20
    40ae:	bf0c      	ite	eq
    40b0:	2301      	moveq	r3, #1
    40b2:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    40b4:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    40b6:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    40ba:	f106 080c 	add.w	r8, r6, #12
    40be:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    40c2:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    40c6:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
    40ca:	6237      	str	r7, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    40cc:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    40d0:	f3c7 1300 	ubfx	r3, r7, #4, #1
    40d4:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    40d8:	786b      	ldrb	r3, [r5, #1]
    40da:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40de:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    40e2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    40e6:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    40ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    40ee:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    40f2:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    40f6:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    40fa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    40fe:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    4102:	bf18      	it	ne
    4104:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    4106:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    410a:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    410e:	bf18      	it	ne
    4110:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    4112:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    4116:	782b      	ldrb	r3, [r5, #0]
    4118:	2b03      	cmp	r3, #3
    411a:	f200 80b9 	bhi.w	4290 <nrfx_twim_xfer+0x23c>
    411e:	e8df f003 	tbb	[pc, r3]
    4122:	a48b      	.short	0xa48b
    4124:	026d      	.short	0x026d
    4126:	692b      	ldr	r3, [r5, #16]
    4128:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    412c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4130:	d1a7      	bne.n	4082 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    4132:	f44f 7380 	mov.w	r3, #256	; 0x100
    4136:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    413a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    413c:	68ea      	ldr	r2, [r5, #12]
    413e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4142:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4146:	2300      	movs	r3, #0
    4148:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    414c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4150:	2201      	movs	r2, #1
    4152:	6222      	str	r2, [r4, #32]
    4154:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4156:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    415a:	2a00      	cmp	r2, #0
    415c:	d0fb      	beq.n	4156 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    415e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    4162:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4166:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    4168:	68ab      	ldr	r3, [r5, #8]
    416a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    416e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    4172:	2334      	movs	r3, #52	; 0x34
    4174:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4178:	fb03 c30e 	mla	r3, r3, lr, ip
    417c:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    417e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    4180:	4e75      	ldr	r6, [pc, #468]	; (4358 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    4182:	0738      	lsls	r0, r7, #28
    4184:	d407      	bmi.n	4196 <nrfx_twim_xfer+0x142>
    4186:	782a      	ldrb	r2, [r5, #0]
    4188:	2a03      	cmp	r2, #3
    418a:	d004      	beq.n	4196 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    418c:	2201      	movs	r2, #1
    418e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    4190:	686b      	ldr	r3, [r5, #4]
    4192:	b903      	cbnz	r3, 4196 <nrfx_twim_xfer+0x142>
    4194:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    4196:	2334      	movs	r3, #52	; 0x34
    4198:	fb03 f30e 	mul.w	r3, r3, lr
    419c:	f85c 1003 	ldr.w	r1, [ip, r3]
    41a0:	eb0c 0203 	add.w	r2, ip, r3
    41a4:	2900      	cmp	r1, #0
    41a6:	d176      	bne.n	4296 <nrfx_twim_xfer+0x242>
    41a8:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41aa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    41ae:	2b00      	cmp	r3, #0
    41b0:	f000 8089 	beq.w	42c6 <nrfx_twim_xfer+0x272>
    41b4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    41b8:	2b00      	cmp	r3, #0
    41ba:	f040 8087 	bne.w	42cc <nrfx_twim_xfer+0x278>
    41be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    41c2:	2b00      	cmp	r3, #0
    41c4:	f000 8095 	beq.w	42f2 <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
    41c8:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41ca:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
    41ce:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41d2:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    41d6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    41da:	2d00      	cmp	r5, #0
    41dc:	f000 8081 	beq.w	42e2 <nrfx_twim_xfer+0x28e>
    41e0:	f412 7f00 	tst.w	r2, #512	; 0x200
    41e4:	f402 7280 	and.w	r2, r2, #256	; 0x100
    41e8:	d17e      	bne.n	42e8 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41ea:	6220      	str	r0, [r4, #32]
    41ec:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    41ee:	2a00      	cmp	r2, #0
    41f0:	d0db      	beq.n	41aa <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41f2:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    41f6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    41fa:	e7d6      	b.n	41aa <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    41fc:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    41fe:	68ea      	ldr	r2, [r5, #12]
    4200:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4204:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    4208:	692b      	ldr	r3, [r5, #16]
    420a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    420e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    4212:	f47f af36 	bne.w	4082 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    4216:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4218:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    421c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    4220:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    4224:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4228:	2334      	movs	r3, #52	; 0x34
    422a:	2202      	movs	r2, #2
    422c:	fb03 c30e 	mla	r3, r3, lr, ip
    4230:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4232:	2301      	movs	r3, #1
    4234:	6223      	str	r3, [r4, #32]
    4236:	e7a2      	b.n	417e <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4238:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    423a:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    423c:	f017 0f20 	tst.w	r7, #32
    4240:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4244:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    4248:	f04f 0334 	mov.w	r3, #52	; 0x34
    424c:	d008      	beq.n	4260 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
    424e:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    4252:	fb03 c30e 	mla	r3, r3, lr, ip
    4256:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    425a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    425e:	e7e7      	b.n	4230 <nrfx_twim_xfer+0x1dc>
    4260:	f44f 7200 	mov.w	r2, #512	; 0x200
    4264:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4268:	e7df      	b.n	422a <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    426a:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    426c:	68ea      	ldr	r2, [r5, #12]
    426e:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4272:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    4276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    427a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    427e:	2334      	movs	r3, #52	; 0x34
    4280:	2202      	movs	r2, #2
    4282:	fb03 c30e 	mla	r3, r3, lr, ip
    4286:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4288:	2301      	movs	r3, #1
    428a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    428c:	2300      	movs	r3, #0
    428e:	e777      	b.n	4180 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
    4290:	2308      	movs	r3, #8
    4292:	4e32      	ldr	r6, [pc, #200]	; (435c <nrfx_twim_xfer+0x308>)
    4294:	e775      	b.n	4182 <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    4296:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    4298:	bf44      	itt	mi
    429a:	2300      	movmi	r3, #0
    429c:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    429e:	067a      	lsls	r2, r7, #25
    42a0:	d406      	bmi.n	42b0 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    42a2:	2334      	movs	r3, #52	; 0x34
    42a4:	fb03 c30e 	mla	r3, r3, lr, ip
    42a8:	689a      	ldr	r2, [r3, #8]
    42aa:	f042 0202 	orr.w	r2, r2, #2
    42ae:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    42b0:	2334      	movs	r3, #52	; 0x34
    42b2:	fb03 c30e 	mla	r3, r3, lr, ip
    42b6:	689a      	ldr	r2, [r3, #8]
    42b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    42bc:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    42be:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
    42c0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    42c4:	e6de      	b.n	4084 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    42c6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    42ca:	b123      	cbz	r3, 42d6 <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42cc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    42d0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    42d4:	e773      	b.n	41be <nrfx_twim_xfer+0x16a>
    42d6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    42da:	2a00      	cmp	r2, #0
    42dc:	f43f af65 	beq.w	41aa <nrfx_twim_xfer+0x156>
    42e0:	e773      	b.n	41ca <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42e2:	6220      	str	r0, [r4, #32]
    42e4:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    42e6:	e760      	b.n	41aa <nrfx_twim_xfer+0x156>
    42e8:	2a00      	cmp	r2, #0
    42ea:	d182      	bne.n	41f2 <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
    42ec:	2b00      	cmp	r3, #0
    42ee:	f43f af5c 	beq.w	41aa <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
    42f2:	2134      	movs	r1, #52	; 0x34
    42f4:	2000      	movs	r0, #0
    42f6:	fb01 c20e 	mla	r2, r1, lr, ip
    uint32_t error_source = p_reg->ERRORSRC;
    42fa:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    42fe:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    4302:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    4306:	b18b      	cbz	r3, 432c <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4308:	4a15      	ldr	r2, [pc, #84]	; (4360 <nrfx_twim_xfer+0x30c>)
    430a:	f013 0f01 	tst.w	r3, #1
    430e:	4e15      	ldr	r6, [pc, #84]	; (4364 <nrfx_twim_xfer+0x310>)
    4310:	bf18      	it	ne
    4312:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4314:	f013 0f02 	tst.w	r3, #2
    4318:	f102 0201 	add.w	r2, r2, #1
    431c:	bf18      	it	ne
    431e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4320:	f013 0f04 	tst.w	r3, #4
    4324:	4b10      	ldr	r3, [pc, #64]	; (4368 <nrfx_twim_xfer+0x314>)
    4326:	bf18      	it	ne
    4328:	461e      	movne	r6, r3
    432a:	e6ab      	b.n	4084 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    432c:	067b      	lsls	r3, r7, #25
    432e:	f53f aea9 	bmi.w	4084 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    4332:	4620      	mov	r0, r4
    4334:	fb0e c101 	mla	r1, lr, r1, ip
    4338:	f002 f80d 	bl	6356 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    433c:	4b09      	ldr	r3, [pc, #36]	; (4364 <nrfx_twim_xfer+0x310>)
    433e:	2800      	cmp	r0, #0
    4340:	bf08      	it	eq
    4342:	461e      	moveq	r6, r3
    4344:	e69e      	b.n	4084 <nrfx_twim_xfer+0x30>
    4346:	bf00      	nop
    4348:	20000944 	.word	0x20000944
    434c:	0bad000a 	.word	0x0bad000a
    4350:	019c0202 	.word	0x019c0202
    4354:	0bad000b 	.word	0x0bad000b
    4358:	0bad0000 	.word	0x0bad0000
    435c:	0bad0004 	.word	0x0bad0004
    4360:	0bae0000 	.word	0x0bae0000
    4364:	0bad0001 	.word	0x0bad0001
    4368:	0bae0002 	.word	0x0bae0002

0000436c <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    436c:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    436e:	4d5a      	ldr	r5, [pc, #360]	; (44d8 <nrfx_twim_1_irq_handler+0x16c>)
    4370:	4c5a      	ldr	r4, [pc, #360]	; (44dc <nrfx_twim_1_irq_handler+0x170>)
    4372:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    4376:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    4378:	b1fb      	cbz	r3, 43ba <nrfx_twim_1_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    437a:	2300      	movs	r3, #0
    437c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    4380:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4384:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4388:	b9bb      	cbnz	r3, 43ba <nrfx_twim_1_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    438a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    438c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4390:	2302      	movs	r3, #2
    4392:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4394:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    4396:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    439a:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    439e:	b11b      	cbz	r3, 43a8 <nrfx_twim_1_irq_handler+0x3c>
    return p_reg->SHORTS;
    43a0:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    43a4:	059e      	lsls	r6, r3, #22
    43a6:	d403      	bmi.n	43b0 <nrfx_twim_1_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43a8:	2201      	movs	r2, #1
    43aa:	4b4b      	ldr	r3, [pc, #300]	; (44d8 <nrfx_twim_1_irq_handler+0x16c>)
    43ac:	621a      	str	r2, [r3, #32]
    43ae:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    43b0:	2301      	movs	r3, #1
    43b2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
}
    43b6:	b007      	add	sp, #28
    43b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    43ba:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    43be:	2b00      	cmp	r3, #0
    43c0:	d05a      	beq.n	4478 <nrfx_twim_1_irq_handler+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43c2:	2300      	movs	r3, #0
    43c4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    43c8:	6a27      	ldr	r7, [r4, #32]
    43ca:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    43ce:	067d      	lsls	r5, r7, #25
    43d0:	d40a      	bmi.n	43e8 <nrfx_twim_1_irq_handler+0x7c>
    43d2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    43d6:	b93b      	cbnz	r3, 43e8 <nrfx_twim_1_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    43d8:	4940      	ldr	r1, [pc, #256]	; (44dc <nrfx_twim_1_irq_handler+0x170>)
    43da:	483f      	ldr	r0, [pc, #252]	; (44d8 <nrfx_twim_1_irq_handler+0x16c>)
    43dc:	f001 ffbb 	bl	6356 <xfer_completeness_check>
    43e0:	f080 0001 	eor.w	r0, r0, #1
    43e4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    43e8:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
    43ec:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    43f0:	d120      	bne.n	4434 <nrfx_twim_1_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
    43f2:	4e3b      	ldr	r6, [pc, #236]	; (44e0 <nrfx_twim_1_irq_handler+0x174>)
    43f4:	ad01      	add	r5, sp, #4
    43f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    43f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    43fa:	6833      	ldr	r3, [r6, #0]
    43fc:	602b      	str	r3, [r5, #0]
    43fe:	4b36      	ldr	r3, [pc, #216]	; (44d8 <nrfx_twim_1_irq_handler+0x16c>)
    4400:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    4404:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    4408:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    440c:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    4410:	f1bc 0f00 	cmp.w	ip, #0
    4414:	d002      	beq.n	441c <nrfx_twim_1_irq_handler+0xb0>
    4416:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    441a:	b15a      	cbz	r2, 4434 <nrfx_twim_1_irq_handler+0xc8>
    p_reg->SHORTS = mask;
    441c:	2200      	movs	r2, #0
    441e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    4422:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    4424:	4a2f      	ldr	r2, [pc, #188]	; (44e4 <nrfx_twim_1_irq_handler+0x178>)
    4426:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    442a:	f44f 7200 	mov.w	r2, #512	; 0x200
    442e:	4b2e      	ldr	r3, [pc, #184]	; (44e8 <nrfx_twim_1_irq_handler+0x17c>)
    4430:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    4434:	4a28      	ldr	r2, [pc, #160]	; (44d8 <nrfx_twim_1_irq_handler+0x16c>)
    4436:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    443a:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    443c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    4440:	d443      	bmi.n	44ca <nrfx_twim_1_irq_handler+0x15e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    4442:	0759      	lsls	r1, r3, #29
    4444:	d443      	bmi.n	44ce <nrfx_twim_1_irq_handler+0x162>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    4446:	07da      	lsls	r2, r3, #31
    4448:	d443      	bmi.n	44d2 <nrfx_twim_1_irq_handler+0x166>
    else if (p_cb->error)
    444a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    444e:	009b      	lsls	r3, r3, #2
    4450:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    4452:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    4456:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    445a:	b90b      	cbnz	r3, 4460 <nrfx_twim_1_irq_handler+0xf4>
        p_cb->busy = false;
    445c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    4460:	6a23      	ldr	r3, [r4, #32]
    4462:	075b      	lsls	r3, r3, #29
    4464:	d503      	bpl.n	446e <nrfx_twim_1_irq_handler+0x102>
    4466:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    446a:	2b00      	cmp	r3, #0
    446c:	d0a3      	beq.n	43b6 <nrfx_twim_1_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    446e:	e9d4 3100 	ldrd	r3, r1, [r4]
    4472:	4668      	mov	r0, sp
    4474:	4798      	blx	r3
}
    4476:	e79e      	b.n	43b6 <nrfx_twim_1_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4478:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    447c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    4480:	7b23      	ldrb	r3, [r4, #12]
    4482:	b983      	cbnz	r3, 44a6 <nrfx_twim_1_irq_handler+0x13a>
            event.xfer_desc = p_cb->xfer_desc;
    4484:	4f16      	ldr	r7, [pc, #88]	; (44e0 <nrfx_twim_1_irq_handler+0x174>)
    4486:	ae01      	add	r6, sp, #4
    4488:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    448a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    448c:	683b      	ldr	r3, [r7, #0]
    448e:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    4490:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    4494:	2b00      	cmp	r3, #0
    4496:	d1cd      	bne.n	4434 <nrfx_twim_1_irq_handler+0xc8>
    p_reg->SHORTS = mask;
    4498:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    449c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    449e:	4b11      	ldr	r3, [pc, #68]	; (44e4 <nrfx_twim_1_irq_handler+0x178>)
    44a0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    44a4:	e7c1      	b.n	442a <nrfx_twim_1_irq_handler+0xbe>
    p_reg->SHORTS = mask;
    44a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    44aa:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    44ae:	f240 2302 	movw	r3, #514	; 0x202
    44b2:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    44b4:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    44b8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    44bc:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    44be:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44c2:	2301      	movs	r3, #1
    44c4:	60ab      	str	r3, [r5, #8]
    44c6:	622b      	str	r3, [r5, #32]
            return;
    44c8:	e775      	b.n	43b6 <nrfx_twim_1_irq_handler+0x4a>
    44ca:	2301      	movs	r3, #1
    44cc:	e7c1      	b.n	4452 <nrfx_twim_1_irq_handler+0xe6>
    44ce:	2302      	movs	r3, #2
    44d0:	e7bf      	b.n	4452 <nrfx_twim_1_irq_handler+0xe6>
    44d2:	2303      	movs	r3, #3
    44d4:	e7bd      	b.n	4452 <nrfx_twim_1_irq_handler+0xe6>
    44d6:	bf00      	nop
    44d8:	50009000 	.word	0x50009000
    44dc:	20000944 	.word	0x20000944
    44e0:	20000950 	.word	0x20000950
    44e4:	019c0202 	.word	0x019c0202
    44e8:	e000e100 	.word	0xe000e100

000044ec <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    44ec:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    44ee:	f003 021f 	and.w	r2, r3, #31
    44f2:	6002      	str	r2, [r0, #0]
}
    44f4:	4a03      	ldr	r2, [pc, #12]	; (4504 <nrf_gpio_pin_port_decode+0x18>)
    44f6:	4804      	ldr	r0, [pc, #16]	; (4508 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    44f8:	095b      	lsrs	r3, r3, #5
}
    44fa:	2b01      	cmp	r3, #1
    44fc:	bf18      	it	ne
    44fe:	4610      	movne	r0, r2
    4500:	4770      	bx	lr
    4502:	bf00      	nop
    4504:	50842500 	.word	0x50842500
    4508:	50842800 	.word	0x50842800

0000450c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    450c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    450e:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    4510:	f001 ff51 	bl	63b6 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    4514:	4608      	mov	r0, r1
    4516:	f001 ff4e 	bl	63b6 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    451a:	a801      	add	r0, sp, #4
    451c:	9601      	str	r6, [sp, #4]
    451e:	f7ff ffe5 	bl	44ec <nrf_gpio_pin_port_decode>
{
    4522:	460c      	mov	r4, r1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4524:	f240 610d 	movw	r1, #1549	; 0x60d
    4528:	9b01      	ldr	r3, [sp, #4]
    452a:	9401      	str	r4, [sp, #4]
    452c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4530:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    4534:	2509      	movs	r5, #9
    4536:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    453a:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    453c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4540:	a801      	add	r0, sp, #4
    4542:	f7ff ffd3 	bl	44ec <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4546:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4548:	2701      	movs	r7, #1
    454a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    454e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    4552:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4556:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    4558:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    455c:	2004      	movs	r0, #4
    455e:	f001 fd6a 	bl	6036 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4562:	a801      	add	r0, sp, #4
    4564:	9401      	str	r4, [sp, #4]
    4566:	f7ff ffc1 	bl	44ec <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    456a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    456c:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    456e:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    4570:	07db      	lsls	r3, r3, #31
    4572:	d414      	bmi.n	459e <nrfx_twi_twim_bus_recover+0x92>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4574:	a801      	add	r0, sp, #4
    4576:	9601      	str	r6, [sp, #4]
    4578:	f7ff ffb8 	bl	44ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    457c:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
    457e:	3d01      	subs	r5, #1
    4580:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    4584:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    4586:	2004      	movs	r0, #4
    4588:	f001 fd55 	bl	6036 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    458c:	4630      	mov	r0, r6
    458e:	f001 ff12 	bl	63b6 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
    4592:	2004      	movs	r0, #4
    4594:	f001 fd4f 	bl	6036 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4598:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    459c:	d1e1      	bne.n	4562 <nrfx_twi_twim_bus_recover+0x56>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    459e:	a801      	add	r0, sp, #4
    45a0:	9401      	str	r4, [sp, #4]
    45a2:	f7ff ffa3 	bl	44ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    45a6:	2301      	movs	r3, #1
    45a8:	9a01      	ldr	r2, [sp, #4]
    45aa:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    45ac:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    45ae:	2004      	movs	r0, #4
    45b0:	f001 fd41 	bl	6036 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    45b4:	4620      	mov	r0, r4
    45b6:	f001 fefe 	bl	63b6 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    45ba:	2004      	movs	r0, #4
    45bc:	f001 fd3b 	bl	6036 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    45c0:	a801      	add	r0, sp, #4
    45c2:	9401      	str	r4, [sp, #4]
    45c4:	f7ff ff92 	bl	44ec <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    45c8:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    45ca:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    45cc:	4803      	ldr	r0, [pc, #12]	; (45dc <nrfx_twi_twim_bus_recover+0xd0>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    45ce:	40d3      	lsrs	r3, r2
    45d0:	f003 0301 	and.w	r3, r3, #1
    45d4:	1ac0      	subs	r0, r0, r3
    45d6:	b003      	add	sp, #12
    45d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45da:	bf00      	nop
    45dc:	0bad0001 	.word	0x0bad0001

000045e0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    45e0:	2303      	movs	r3, #3
static void _DoInit(void) {
    45e2:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    45e4:	4c13      	ldr	r4, [pc, #76]	; (4634 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    45e6:	4a14      	ldr	r2, [pc, #80]	; (4638 <_DoInit+0x58>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    45e8:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    45ea:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    45ec:	4b13      	ldr	r3, [pc, #76]	; (463c <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
    45ee:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    45f0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    45f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    45f6:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    45f8:	2300      	movs	r3, #0
    45fa:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    45fc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    45fe:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4600:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4602:	4a0f      	ldr	r2, [pc, #60]	; (4640 <_DoInit+0x60>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4604:	490f      	ldr	r1, [pc, #60]	; (4644 <_DoInit+0x64>)
  p->aDown[0].pBuffer       = _acDownBuffer;
    4606:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4608:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
    460a:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    460c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    460e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4610:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4612:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4614:	f001 fb22 	bl	5c5c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4618:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    461c:	490a      	ldr	r1, [pc, #40]	; (4648 <_DoInit+0x68>)
    461e:	4620      	mov	r0, r4
    4620:	f001 fb1c 	bl	5c5c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4624:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4628:	2320      	movs	r3, #32
    462a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    462c:	f3bf 8f5f 	dmb	sy
}
    4630:	bd10      	pop	{r4, pc}
    4632:	bf00      	nop
    4634:	20000978 	.word	0x20000978
    4638:	00006f3b 	.word	0x00006f3b
    463c:	20000c52 	.word	0x20000c52
    4640:	20000c42 	.word	0x20000c42
    4644:	00006f44 	.word	0x00006f44
    4648:	00006f48 	.word	0x00006f48

0000464c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    464e:	2718      	movs	r7, #24
    4650:	fb00 7507 	mla	r5, r0, r7, r7
    4654:	4b12      	ldr	r3, [pc, #72]	; (46a0 <SEGGER_RTT_WriteNoLock+0x54>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4656:	460e      	mov	r6, r1
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    4658:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    465a:	fb07 3300 	mla	r3, r7, r0, r3
    465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4660:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    4662:	2b01      	cmp	r3, #1
    4664:	d00a      	beq.n	467c <SEGGER_RTT_WriteNoLock+0x30>
    4666:	2b02      	cmp	r3, #2
    4668:	d014      	beq.n	4694 <SEGGER_RTT_WriteNoLock+0x48>
    466a:	b923      	cbnz	r3, 4676 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    466c:	4628      	mov	r0, r5
    466e:	f001 feae 	bl	63ce <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    4672:	4284      	cmp	r4, r0
    4674:	d908      	bls.n	4688 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    4676:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    4678:	4620      	mov	r0, r4
    467a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    467c:	4628      	mov	r0, r5
    467e:	f001 fea6 	bl	63ce <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    4682:	4284      	cmp	r4, r0
    4684:	bf28      	it	cs
    4686:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    4688:	4622      	mov	r2, r4
    468a:	4631      	mov	r1, r6
    468c:	4628      	mov	r0, r5
    468e:	f001 fea7 	bl	63e0 <_WriteNoCheck>
    break;
    4692:	e7f1      	b.n	4678 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4694:	4628      	mov	r0, r5
}
    4696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    469a:	f001 bebe 	b.w	641a <_WriteBlocking>
    469e:	bf00      	nop
    46a0:	20000978 	.word	0x20000978

000046a4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    46a4:	4b10      	ldr	r3, [pc, #64]	; (46e8 <z_sys_init_run_level+0x44>)
{
    46a6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    46a8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    46ac:	3001      	adds	r0, #1
    46ae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    46b2:	42a6      	cmp	r6, r4
    46b4:	d800      	bhi.n	46b8 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    46b6:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    46b8:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    46bc:	b18d      	cbz	r5, 46e2 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    46be:	4628      	mov	r0, r5
    46c0:	4798      	blx	r3
			if (rc != 0) {
    46c2:	b138      	cbz	r0, 46d4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    46c4:	2800      	cmp	r0, #0
    46c6:	bfb8      	it	lt
    46c8:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    46ca:	28ff      	cmp	r0, #255	; 0xff
    46cc:	bfa8      	it	ge
    46ce:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    46d0:	68eb      	ldr	r3, [r5, #12]
    46d2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    46d4:	68ea      	ldr	r2, [r5, #12]
    46d6:	7853      	ldrb	r3, [r2, #1]
    46d8:	f043 0301 	orr.w	r3, r3, #1
    46dc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    46de:	3408      	adds	r4, #8
    46e0:	e7e7      	b.n	46b2 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    46e2:	4798      	blx	r3
    46e4:	e7fb      	b.n	46de <z_sys_init_run_level+0x3a>
    46e6:	bf00      	nop
    46e8:	00006c98 	.word	0x00006c98

000046ec <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    46ec:	2201      	movs	r2, #1
{
    46ee:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    46f0:	4b09      	ldr	r3, [pc, #36]	; (4718 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    46f2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    46f4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    46f6:	f7ff ffd5 	bl	46a4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    46fa:	f000 ff41 	bl	5580 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    46fe:	2004      	movs	r0, #4
    4700:	f7ff ffd0 	bl	46a4 <z_sys_init_run_level>

	z_init_static_threads();
    4704:	f000 f92a 	bl	495c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    4708:	f7fb ff14 	bl	534 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    470c:	4a03      	ldr	r2, [pc, #12]	; (471c <bg_thread_main+0x30>)
    470e:	7b13      	ldrb	r3, [r2, #12]
    4710:	f023 0301 	bic.w	r3, r3, #1
    4714:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4716:	bd08      	pop	{r3, pc}
    4718:	20001052 	.word	0x20001052
    471c:	20000258 	.word	0x20000258

00004720 <z_bss_zero>:
{
    4720:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4722:	4803      	ldr	r0, [pc, #12]	; (4730 <z_bss_zero+0x10>)
    4724:	4a03      	ldr	r2, [pc, #12]	; (4734 <z_bss_zero+0x14>)
    4726:	2100      	movs	r1, #0
    4728:	1a12      	subs	r2, r2, r0
    472a:	f001 fed0 	bl	64ce <z_early_memset>
}
    472e:	bd08      	pop	{r3, pc}
    4730:	200001b8 	.word	0x200001b8
    4734:	20001054 	.word	0x20001054

00004738 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4738:	2300      	movs	r3, #0
    473a:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    473c:	b570      	push	{r4, r5, r6, lr}
    473e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4740:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4744:	220f      	movs	r2, #15
    4746:	9301      	str	r3, [sp, #4]
    4748:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    474c:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    474e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4752:	4d0e      	ldr	r5, [pc, #56]	; (478c <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    4754:	4e0e      	ldr	r6, [pc, #56]	; (4790 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4756:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    475a:	490e      	ldr	r1, [pc, #56]	; (4794 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    475c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4760:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4762:	fb02 1100 	mla	r1, r2, r0, r1
    4766:	4b0c      	ldr	r3, [pc, #48]	; (4798 <z_init_cpu+0x60>)
    4768:	4630      	mov	r0, r6
    476a:	9500      	str	r5, [sp, #0]
    476c:	f000 f8c6 	bl	48fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4770:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    4772:	742c      	strb	r4, [r5, #16]
    4774:	f023 0304 	bic.w	r3, r3, #4
    4778:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    477a:	4b08      	ldr	r3, [pc, #32]	; (479c <z_init_cpu+0x64>)
    477c:	3401      	adds	r4, #1
    477e:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4782:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4784:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4786:	b006      	add	sp, #24
    4788:	bd70      	pop	{r4, r5, r6, pc}
    478a:	bf00      	nop
    478c:	20000a20 	.word	0x20000a20
    4790:	200001d8 	.word	0x200001d8
    4794:	20001858 	.word	0x20001858
    4798:	00004a15 	.word	0x00004a15
    479c:	20001058 	.word	0x20001058

000047a0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    47a0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    47a2:	2000      	movs	r0, #0
{
    47a4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    47a6:	f7ff ff7d 	bl	46a4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    47aa:	4b2d      	ldr	r3, [pc, #180]	; (4860 <z_cstart+0xc0>)
	uint32_t msp =
    47ac:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    47b0:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    47b4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    47b8:	2400      	movs	r4, #0
    47ba:	23e0      	movs	r3, #224	; 0xe0
    47bc:	4d29      	ldr	r5, [pc, #164]	; (4864 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    47be:	4e2a      	ldr	r6, [pc, #168]	; (4868 <z_cstart+0xc8>)
    47c0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    47c4:	77ec      	strb	r4, [r5, #31]
    47c6:	762c      	strb	r4, [r5, #24]
    47c8:	766c      	strb	r4, [r5, #25]
    47ca:	76ac      	strb	r4, [r5, #26]
    47cc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    47d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    47d2:	4f26      	ldr	r7, [pc, #152]	; (486c <z_cstart+0xcc>)
    47d4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    47d8:	626b      	str	r3, [r5, #36]	; 0x24
    47da:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    47de:	f7fd fbc3 	bl	1f68 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    47e2:	f7fd f94f 	bl	1a84 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    47e6:	f04f 33ff 	mov.w	r3, #4294967295
    47ea:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    47ec:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    47ee:	f7fd fdc5 	bl	237c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    47f2:	f7fd fc6b 	bl	20cc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    47f6:	f240 1301 	movw	r3, #257	; 0x101
    47fa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    47fe:	ab06      	add	r3, sp, #24
    4800:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4802:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4806:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4808:	f001 fe3a 	bl	6480 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    480c:	2001      	movs	r0, #1
    480e:	f7ff ff49 	bl	46a4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4812:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    4814:	4d16      	ldr	r5, [pc, #88]	; (4870 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4816:	f7ff ff45 	bl	46a4 <z_sys_init_run_level>
	z_sched_init();
    481a:	f000 fc4d 	bl	50b8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    481e:	4b15      	ldr	r3, [pc, #84]	; (4874 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    4820:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4822:	9305      	str	r3, [sp, #20]
    4824:	2301      	movs	r3, #1
    4826:	4914      	ldr	r1, [pc, #80]	; (4878 <z_cstart+0xd8>)
    4828:	f44f 6280 	mov.w	r2, #1024	; 0x400
    482c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4830:	4628      	mov	r0, r5
    4832:	463b      	mov	r3, r7
    4834:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4838:	9400      	str	r4, [sp, #0]
    483a:	f000 f85f 	bl	48fc <z_setup_new_thread>
    483e:	4606      	mov	r6, r0
    4840:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    4842:	4628      	mov	r0, r5
    4844:	f022 0204 	bic.w	r2, r2, #4
    4848:	736a      	strb	r2, [r5, #13]
    484a:	f001 fee7 	bl	661c <z_ready_thread>
	z_init_cpu(0);
    484e:	4620      	mov	r0, r4
    4850:	f7ff ff72 	bl	4738 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4854:	463a      	mov	r2, r7
    4856:	4631      	mov	r1, r6
    4858:	4628      	mov	r0, r5
    485a:	f7fd fa17 	bl	1c8c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    485e:	bf00      	nop
    4860:	20001058 	.word	0x20001058
    4864:	e000ed00 	.word	0xe000ed00
    4868:	20000a20 	.word	0x20000a20
    486c:	000046ed 	.word	0x000046ed
    4870:	20000258 	.word	0x20000258
    4874:	00006f4f 	.word	0x00006f4f
    4878:	20001998 	.word	0x20001998

0000487c <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
    487c:	2000      	movs	r0, #0
{
    487e:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4880:	4c05      	ldr	r4, [pc, #20]	; (4898 <init_mem_slab_module+0x1c>)
    4882:	4d06      	ldr	r5, [pc, #24]	; (489c <init_mem_slab_module+0x20>)
    4884:	42ac      	cmp	r4, r5
    4886:	d300      	bcc.n	488a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    4888:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    488a:	4620      	mov	r0, r4
    488c:	f001 fe23 	bl	64d6 <create_free_list>
		if (rc < 0) {
    4890:	2800      	cmp	r0, #0
    4892:	dbf9      	blt.n	4888 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4894:	341c      	adds	r4, #28
    4896:	e7f5      	b.n	4884 <init_mem_slab_module+0x8>
    4898:	20000166 	.word	0x20000166
    489c:	20000166 	.word	0x20000166

000048a0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    48a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    48a2:	460c      	mov	r4, r1
	__asm__ volatile(
    48a4:	f04f 0520 	mov.w	r5, #32
    48a8:	f3ef 8111 	mrs	r1, BASEPRI
    48ac:	f385 8812 	msr	BASEPRI_MAX, r5
    48b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    48b4:	6945      	ldr	r5, [r0, #20]
    48b6:	b15d      	cbz	r5, 48d0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    48b8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    48ba:	682b      	ldr	r3, [r5, #0]
    48bc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    48be:	6983      	ldr	r3, [r0, #24]
    48c0:	3301      	adds	r3, #1
    48c2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    48c4:	2000      	movs	r0, #0
	__asm__ volatile(
    48c6:	f381 8811 	msr	BASEPRI, r1
    48ca:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    48ce:	e011      	b.n	48f4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    48d0:	ea52 0603 	orrs.w	r6, r2, r3
    48d4:	d103      	bne.n	48de <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    48d6:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    48da:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    48dc:	e7f3      	b.n	48c6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    48de:	e9cd 2300 	strd	r2, r3, [sp]
    48e2:	4602      	mov	r2, r0
    48e4:	3008      	adds	r0, #8
    48e6:	f000 faf1 	bl	4ecc <z_pend_curr>
		if (result == 0) {
    48ea:	b918      	cbnz	r0, 48f4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    48ec:	4b02      	ldr	r3, [pc, #8]	; (48f8 <k_mem_slab_alloc+0x58>)
    48ee:	689b      	ldr	r3, [r3, #8]
    48f0:	695b      	ldr	r3, [r3, #20]
    48f2:	6023      	str	r3, [r4, #0]
}
    48f4:	b002      	add	sp, #8
    48f6:	bd70      	pop	{r4, r5, r6, pc}
    48f8:	20000a20 	.word	0x20000a20

000048fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    48fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4900:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4902:	f100 0558 	add.w	r5, r0, #88	; 0x58
    4906:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4908:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    490a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    490e:	2500      	movs	r5, #0
{
    4910:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    4912:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4914:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4916:	e9c0 5506 	strd	r5, r5, [r0, #24]
    491a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    491c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    491e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4920:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    4924:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4928:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    492a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    492c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    492e:	9202      	str	r2, [sp, #8]
    4930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    4932:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4936:	9201      	str	r2, [sp, #4]
    4938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    493a:	9200      	str	r2, [sp, #0]
    493c:	4642      	mov	r2, r8
    493e:	f7fd f989 	bl	1c54 <arch_new_thread>
	if (!_current) {
    4942:	4b05      	ldr	r3, [pc, #20]	; (4958 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    4944:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4946:	689b      	ldr	r3, [r3, #8]
    4948:	b103      	cbz	r3, 494c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    494c:	4640      	mov	r0, r8
    494e:	6723      	str	r3, [r4, #112]	; 0x70
    4950:	b004      	add	sp, #16
    4952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4956:	bf00      	nop
    4958:	20000a20 	.word	0x20000a20

0000495c <z_init_static_threads>:
{
    495c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4960:	4c29      	ldr	r4, [pc, #164]	; (4a08 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4962:	4d2a      	ldr	r5, [pc, #168]	; (4a0c <z_init_static_threads+0xb0>)
{
    4964:	b087      	sub	sp, #28
    4966:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4968:	42ae      	cmp	r6, r5
    496a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    496e:	d30f      	bcc.n	4990 <z_init_static_threads+0x34>
	k_sched_lock();
    4970:	f000 fb72 	bl	5058 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4974:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4978:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    497c:	4c22      	ldr	r4, [pc, #136]	; (4a08 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    497e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4a10 <z_init_static_threads+0xb4>
    4982:	42ac      	cmp	r4, r5
    4984:	d320      	bcc.n	49c8 <z_init_static_threads+0x6c>
}
    4986:	b007      	add	sp, #28
    4988:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    498c:	f000 bb78 	b.w	5080 <k_sched_unlock>
		z_setup_new_thread(
    4990:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4994:	9305      	str	r3, [sp, #20]
    4996:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    499a:	9304      	str	r3, [sp, #16]
    499c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    49a0:	9303      	str	r3, [sp, #12]
    49a2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    49a6:	9302      	str	r3, [sp, #8]
    49a8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    49ac:	9301      	str	r3, [sp, #4]
    49ae:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    49b2:	9300      	str	r3, [sp, #0]
    49b4:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    49b8:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    49bc:	f7ff ff9e 	bl	48fc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    49c0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    49c4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    49c6:	e7ce      	b.n	4966 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    49c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    49ca:	1c5a      	adds	r2, r3, #1
    49cc:	d00d      	beq.n	49ea <z_init_static_threads+0x8e>
    49ce:	2100      	movs	r1, #0
    49d0:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    49d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    49d6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    49da:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    49de:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    49e2:	d104      	bne.n	49ee <z_init_static_threads+0x92>
	z_sched_start(thread);
    49e4:	4640      	mov	r0, r8
    49e6:	f000 fae7 	bl	4fb8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    49ea:	342c      	adds	r4, #44	; 0x2c
    49ec:	e7c9      	b.n	4982 <z_init_static_threads+0x26>
    49ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    49f2:	2300      	movs	r3, #0
    49f4:	f7fb fbae 	bl	154 <__aeabi_uldivmod>
    49f8:	4602      	mov	r2, r0
    49fa:	460b      	mov	r3, r1
    49fc:	f108 0018 	add.w	r0, r8, #24
    4a00:	4649      	mov	r1, r9
    4a02:	f000 fcc3 	bl	538c <z_add_timeout>
    4a06:	e7f0      	b.n	49ea <z_init_static_threads+0x8e>
    4a08:	00006a54 	.word	0x00006a54
    4a0c:	00006a54 	.word	0x00006a54
    4a10:	00006681 	.word	0x00006681

00004a14 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4a14:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4a16:	4c0b      	ldr	r4, [pc, #44]	; (4a44 <idle+0x30>)
	return !z_sys_post_kernel;
    4a18:	4d0b      	ldr	r5, [pc, #44]	; (4a48 <idle+0x34>)
	__asm__ volatile(
    4a1a:	f04f 0220 	mov.w	r2, #32
    4a1e:	f3ef 8311 	mrs	r3, BASEPRI
    4a22:	f382 8812 	msr	BASEPRI_MAX, r2
    4a26:	f3bf 8f6f 	isb	sy
    4a2a:	f001 fe75 	bl	6718 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4a2e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4a30:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4a32:	b913      	cbnz	r3, 4a3a <idle+0x26>
	arch_cpu_idle();
    4a34:	f7fd f82c 	bl	1a90 <arch_cpu_idle>
}
    4a38:	e7ef      	b.n	4a1a <idle+0x6>
    4a3a:	f7fc fe5d 	bl	16f8 <pm_system_suspend>
    4a3e:	2800      	cmp	r0, #0
    4a40:	d1eb      	bne.n	4a1a <idle+0x6>
    4a42:	e7f7      	b.n	4a34 <idle+0x20>
    4a44:	20000a20 	.word	0x20000a20
    4a48:	20001052 	.word	0x20001052

00004a4c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4a4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4a50:	4604      	mov	r4, r0
    4a52:	4617      	mov	r7, r2
    4a54:	461e      	mov	r6, r3
    4a56:	f04f 0320 	mov.w	r3, #32
    4a5a:	f3ef 8811 	mrs	r8, BASEPRI
    4a5e:	f383 8812 	msr	BASEPRI_MAX, r3
    4a62:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4a66:	68c3      	ldr	r3, [r0, #12]
    4a68:	4a33      	ldr	r2, [pc, #204]	; (4b38 <z_impl_k_mutex_lock+0xec>)
    4a6a:	b17b      	cbz	r3, 4a8c <z_impl_k_mutex_lock+0x40>
    4a6c:	6880      	ldr	r0, [r0, #8]
    4a6e:	6891      	ldr	r1, [r2, #8]
    4a70:	4288      	cmp	r0, r1
    4a72:	d019      	beq.n	4aa8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4a74:	ea57 0306 	orrs.w	r3, r7, r6
    4a78:	d118      	bne.n	4aac <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4a7a:	f388 8811 	msr	BASEPRI, r8
    4a7e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4a82:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4a86:	b002      	add	sp, #8
    4a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4a8c:	6891      	ldr	r1, [r2, #8]
    4a8e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    4a92:	3301      	adds	r3, #1
    4a94:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4a96:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4a98:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    4a9a:	60a3      	str	r3, [r4, #8]
    4a9c:	f388 8811 	msr	BASEPRI, r8
    4aa0:	f3bf 8f6f 	isb	sy
		return 0;
    4aa4:	2000      	movs	r0, #0
    4aa6:	e7ee      	b.n	4a86 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    4aa8:	6921      	ldr	r1, [r4, #16]
    4aaa:	e7f2      	b.n	4a92 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4aac:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4ab0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    4ab4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4ab8:	4299      	cmp	r1, r3
    4aba:	bfa8      	it	ge
    4abc:	4619      	movge	r1, r3
    4abe:	4291      	cmp	r1, r2
    4ac0:	bfb8      	it	lt
    4ac2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4ac4:	428b      	cmp	r3, r1
    4ac6:	dd2e      	ble.n	4b26 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    4ac8:	f001 fd5f 	bl	658a <adjust_owner_prio.isra.0>
    4acc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4ace:	4622      	mov	r2, r4
    4ad0:	4641      	mov	r1, r8
    4ad2:	e9cd 7600 	strd	r7, r6, [sp]
    4ad6:	4819      	ldr	r0, [pc, #100]	; (4b3c <z_impl_k_mutex_lock+0xf0>)
    4ad8:	f000 f9f8 	bl	4ecc <z_pend_curr>
	if (got_mutex == 0) {
    4adc:	2800      	cmp	r0, #0
    4ade:	d0e1      	beq.n	4aa4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    4ae0:	f04f 0320 	mov.w	r3, #32
    4ae4:	f3ef 8611 	mrs	r6, BASEPRI
    4ae8:	f383 8812 	msr	BASEPRI_MAX, r3
    4aec:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    4af0:	68a0      	ldr	r0, [r4, #8]
    4af2:	b1d0      	cbz	r0, 4b2a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4af4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4af6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4af8:	429c      	cmp	r4, r3
    4afa:	d00a      	beq.n	4b12 <z_impl_k_mutex_lock+0xc6>
    4afc:	b14b      	cbz	r3, 4b12 <z_impl_k_mutex_lock+0xc6>
    4afe:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4b02:	4299      	cmp	r1, r3
    4b04:	bfa8      	it	ge
    4b06:	4619      	movge	r1, r3
    4b08:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4b0c:	4299      	cmp	r1, r3
    4b0e:	bfb8      	it	lt
    4b10:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    4b12:	f001 fd3a 	bl	658a <adjust_owner_prio.isra.0>
    4b16:	b140      	cbz	r0, 4b2a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    4b18:	4631      	mov	r1, r6
    4b1a:	4808      	ldr	r0, [pc, #32]	; (4b3c <z_impl_k_mutex_lock+0xf0>)
    4b1c:	f000 fa3a 	bl	4f94 <z_reschedule>
	return -EAGAIN;
    4b20:	f06f 000a 	mvn.w	r0, #10
    4b24:	e7af      	b.n	4a86 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    4b26:	2500      	movs	r5, #0
    4b28:	e7d1      	b.n	4ace <z_impl_k_mutex_lock+0x82>
	if (resched) {
    4b2a:	2d00      	cmp	r5, #0
    4b2c:	d1f4      	bne.n	4b18 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    4b2e:	f386 8811 	msr	BASEPRI, r6
    4b32:	f3bf 8f6f 	isb	sy
    4b36:	e7f3      	b.n	4b20 <z_impl_k_mutex_lock+0xd4>
    4b38:	20000a20 	.word	0x20000a20
    4b3c:	20001053 	.word	0x20001053

00004b40 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4b40:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4b42:	6883      	ldr	r3, [r0, #8]
{
    4b44:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4b46:	b36b      	cbz	r3, 4ba4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4b48:	4a19      	ldr	r2, [pc, #100]	; (4bb0 <z_impl_k_mutex_unlock+0x70>)
    4b4a:	6892      	ldr	r2, [r2, #8]
    4b4c:	4293      	cmp	r3, r2
    4b4e:	d12c      	bne.n	4baa <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4b50:	68c3      	ldr	r3, [r0, #12]
    4b52:	2b01      	cmp	r3, #1
    4b54:	d903      	bls.n	4b5e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    4b56:	3b01      	subs	r3, #1
    4b58:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    4b5a:	2000      	movs	r0, #0
}
    4b5c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4b5e:	f04f 0320 	mov.w	r3, #32
    4b62:	f3ef 8511 	mrs	r5, BASEPRI
    4b66:	f383 8812 	msr	BASEPRI_MAX, r3
    4b6a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4b6e:	6901      	ldr	r1, [r0, #16]
    4b70:	6880      	ldr	r0, [r0, #8]
    4b72:	f001 fd0a 	bl	658a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4b76:	4620      	mov	r0, r4
    4b78:	f001 fd86 	bl	6688 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4b7c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4b7e:	b158      	cbz	r0, 4b98 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    4b80:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4b84:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4b86:	2200      	movs	r2, #0
    4b88:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4b8a:	f001 fd47 	bl	661c <z_ready_thread>
		z_reschedule(&lock, key);
    4b8e:	4629      	mov	r1, r5
    4b90:	4808      	ldr	r0, [pc, #32]	; (4bb4 <z_impl_k_mutex_unlock+0x74>)
    4b92:	f000 f9ff 	bl	4f94 <z_reschedule>
    4b96:	e7e0      	b.n	4b5a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    4b98:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4b9a:	f385 8811 	msr	BASEPRI, r5
    4b9e:	f3bf 8f6f 	isb	sy
    4ba2:	e7da      	b.n	4b5a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    4ba4:	f06f 0015 	mvn.w	r0, #21
    4ba8:	e7d8      	b.n	4b5c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    4baa:	f04f 30ff 	mov.w	r0, #4294967295
    4bae:	e7d5      	b.n	4b5c <z_impl_k_mutex_unlock+0x1c>
    4bb0:	20000a20 	.word	0x20000a20
    4bb4:	20001053 	.word	0x20001053

00004bb8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4bb8:	b538      	push	{r3, r4, r5, lr}
    4bba:	4604      	mov	r4, r0
	__asm__ volatile(
    4bbc:	f04f 0320 	mov.w	r3, #32
    4bc0:	f3ef 8511 	mrs	r5, BASEPRI
    4bc4:	f383 8812 	msr	BASEPRI_MAX, r3
    4bc8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4bcc:	f001 fd5c 	bl	6688 <z_unpend_first_thread>

	if (thread != NULL) {
    4bd0:	b148      	cbz	r0, 4be6 <z_impl_k_sem_give+0x2e>
    4bd2:	2200      	movs	r2, #0
    4bd4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4bd6:	f001 fd21 	bl	661c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4bda:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4be0:	4804      	ldr	r0, [pc, #16]	; (4bf4 <z_impl_k_sem_give+0x3c>)
    4be2:	f000 b9d7 	b.w	4f94 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4be6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4bea:	429a      	cmp	r2, r3
    4bec:	bf18      	it	ne
    4bee:	3301      	addne	r3, #1
    4bf0:	60a3      	str	r3, [r4, #8]
}
    4bf2:	e7f2      	b.n	4bda <z_impl_k_sem_give+0x22>
    4bf4:	20001053 	.word	0x20001053

00004bf8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4bf8:	b513      	push	{r0, r1, r4, lr}
    4bfa:	f04f 0420 	mov.w	r4, #32
    4bfe:	f3ef 8111 	mrs	r1, BASEPRI
    4c02:	f384 8812 	msr	BASEPRI_MAX, r4
    4c06:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4c0a:	6884      	ldr	r4, [r0, #8]
    4c0c:	b144      	cbz	r4, 4c20 <z_impl_k_sem_take+0x28>
		sem->count--;
    4c0e:	3c01      	subs	r4, #1
    4c10:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4c12:	f381 8811 	msr	BASEPRI, r1
    4c16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4c1a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4c1c:	b002      	add	sp, #8
    4c1e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4c20:	ea52 0403 	orrs.w	r4, r2, r3
    4c24:	d106      	bne.n	4c34 <z_impl_k_sem_take+0x3c>
    4c26:	f381 8811 	msr	BASEPRI, r1
    4c2a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4c2e:	f06f 000f 	mvn.w	r0, #15
    4c32:	e7f3      	b.n	4c1c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4c34:	e9cd 2300 	strd	r2, r3, [sp]
    4c38:	4602      	mov	r2, r0
    4c3a:	4802      	ldr	r0, [pc, #8]	; (4c44 <z_impl_k_sem_take+0x4c>)
    4c3c:	f000 f946 	bl	4ecc <z_pend_curr>
	return ret;
    4c40:	e7ec      	b.n	4c1c <z_impl_k_sem_take+0x24>
    4c42:	bf00      	nop
    4c44:	20001053 	.word	0x20001053

00004c48 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    4c48:	89c3      	ldrh	r3, [r0, #14]
    4c4a:	2b7f      	cmp	r3, #127	; 0x7f
    4c4c:	d812      	bhi.n	4c74 <sliceable+0x2c>
	int ret = slice_ticks;
    4c4e:	4b0a      	ldr	r3, [pc, #40]	; (4c78 <sliceable+0x30>)
    4c50:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    4c52:	b163      	cbz	r3, 4c6e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4c54:	4b09      	ldr	r3, [pc, #36]	; (4c7c <sliceable+0x34>)
    4c56:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4c5a:	681b      	ldr	r3, [r3, #0]
    4c5c:	429a      	cmp	r2, r3
    4c5e:	db09      	blt.n	4c74 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    4c60:	7b43      	ldrb	r3, [r0, #13]
    4c62:	06db      	lsls	r3, r3, #27
    4c64:	d106      	bne.n	4c74 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    4c66:	4b06      	ldr	r3, [pc, #24]	; (4c80 <sliceable+0x38>)
    4c68:	1ac3      	subs	r3, r0, r3
    4c6a:	bf18      	it	ne
    4c6c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    4c6e:	f003 0001 	and.w	r0, r3, #1
    4c72:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    4c74:	2300      	movs	r3, #0
    4c76:	e7fa      	b.n	4c6e <sliceable+0x26>
    4c78:	20000a4c 	.word	0x20000a4c
    4c7c:	20000a48 	.word	0x20000a48
    4c80:	200001d8 	.word	0x200001d8

00004c84 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    4c84:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    4c86:	4b04      	ldr	r3, [pc, #16]	; (4c98 <slice_timeout+0x14>)
    4c88:	1ac0      	subs	r0, r0, r3
    4c8a:	4b04      	ldr	r3, [pc, #16]	; (4c9c <slice_timeout+0x18>)
    4c8c:	10c0      	asrs	r0, r0, #3
    4c8e:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    4c90:	4b03      	ldr	r3, [pc, #12]	; (4ca0 <slice_timeout+0x1c>)
    4c92:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    4c94:	4770      	bx	lr
    4c96:	bf00      	nop
    4c98:	200002d8 	.word	0x200002d8
    4c9c:	aaaaaaab 	.word	0xaaaaaaab
    4ca0:	20001053 	.word	0x20001053

00004ca4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    4ca4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    4ca6:	4b0e      	ldr	r3, [pc, #56]	; (4ce0 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    4ca8:	4c0e      	ldr	r4, [pc, #56]	; (4ce4 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    4caa:	7c1e      	ldrb	r6, [r3, #16]
{
    4cac:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    4cae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    4cb2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    4cb6:	4620      	mov	r0, r4
    4cb8:	f001 fd18 	bl	66ec <z_abort_timeout>
	slice_expired[cpu] = false;
    4cbc:	2200      	movs	r2, #0
    4cbe:	4b0a      	ldr	r3, [pc, #40]	; (4ce8 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    4cc0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    4cc2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    4cc4:	f7ff ffc0 	bl	4c48 <sliceable>
    4cc8:	b148      	cbz	r0, 4cde <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    4cca:	4b08      	ldr	r3, [pc, #32]	; (4cec <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    4ccc:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    4cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    4cd2:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    4cd4:	4906      	ldr	r1, [pc, #24]	; (4cf0 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    4cd6:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    4cd8:	17d3      	asrs	r3, r2, #31
    4cda:	f000 bb57 	b.w	538c <z_add_timeout>
}
    4cde:	bd70      	pop	{r4, r5, r6, pc}
    4ce0:	20000a20 	.word	0x20000a20
    4ce4:	200002d8 	.word	0x200002d8
    4ce8:	20001053 	.word	0x20001053
    4cec:	20000a4c 	.word	0x20000a4c
    4cf0:	00004c85 	.word	0x00004c85

00004cf4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    4cf4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    4cf6:	4d0d      	ldr	r5, [pc, #52]	; (4d2c <update_cache+0x38>)
    4cf8:	462b      	mov	r3, r5
    4cfa:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4cfe:	429c      	cmp	r4, r3
    4d00:	d000      	beq.n	4d04 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4d02:	b904      	cbnz	r4, 4d06 <update_cache+0x12>
    4d04:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    4d06:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    4d08:	b938      	cbnz	r0, 4d1a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    4d0a:	7b5a      	ldrb	r2, [r3, #13]
    4d0c:	06d2      	lsls	r2, r2, #27
    4d0e:	d104      	bne.n	4d1a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4d10:	69a2      	ldr	r2, [r4, #24]
    4d12:	b912      	cbnz	r2, 4d1a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    4d14:	89da      	ldrh	r2, [r3, #14]
    4d16:	2a7f      	cmp	r2, #127	; 0x7f
    4d18:	d805      	bhi.n	4d26 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    4d1a:	429c      	cmp	r4, r3
    4d1c:	d002      	beq.n	4d24 <update_cache+0x30>
			z_reset_time_slice(thread);
    4d1e:	4620      	mov	r0, r4
    4d20:	f7ff ffc0 	bl	4ca4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    4d24:	4623      	mov	r3, r4
    4d26:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    4d28:	bd38      	pop	{r3, r4, r5, pc}
    4d2a:	bf00      	nop
    4d2c:	20000a20 	.word	0x20000a20

00004d30 <move_thread_to_end_of_prio_q>:
{
    4d30:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4d32:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4d36:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4d38:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    4d3a:	7b43      	ldrb	r3, [r0, #13]
    4d3c:	da04      	bge.n	4d48 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d42:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4d44:	f001 fc30 	bl	65a8 <sys_dlist_remove>
	return list->head == list;
    4d48:	4a15      	ldr	r2, [pc, #84]	; (4da0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4d4a:	7b4b      	ldrb	r3, [r1, #13]
    4d4c:	4610      	mov	r0, r2
    4d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d52:	734b      	strb	r3, [r1, #13]
    4d54:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4d58:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d5a:	4283      	cmp	r3, r0
    4d5c:	bf08      	it	eq
    4d5e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d60:	b923      	cbnz	r3, 4d6c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    4d62:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    4d66:	6021      	str	r1, [r4, #0]
	list->tail = node;
    4d68:	6211      	str	r1, [r2, #32]
}
    4d6a:	e00c      	b.n	4d86 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    4d6c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4d70:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    4d74:	42b5      	cmp	r5, r6
    4d76:	d00e      	beq.n	4d96 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d78:	42ae      	cmp	r6, r5
    4d7a:	dd0c      	ble.n	4d96 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4d7c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4d7e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    4d82:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4d84:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    4d86:	6890      	ldr	r0, [r2, #8]
}
    4d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4d8c:	1a43      	subs	r3, r0, r1
    4d8e:	4258      	negs	r0, r3
    4d90:	4158      	adcs	r0, r3
    4d92:	f7ff bfaf 	b.w	4cf4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4d96:	429c      	cmp	r4, r3
    4d98:	d0e3      	beq.n	4d62 <move_thread_to_end_of_prio_q+0x32>
    4d9a:	681b      	ldr	r3, [r3, #0]
    4d9c:	e7e0      	b.n	4d60 <move_thread_to_end_of_prio_q+0x30>
    4d9e:	bf00      	nop
    4da0:	20000a20 	.word	0x20000a20

00004da4 <ready_thread>:
{
    4da4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4da6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4daa:	7b42      	ldrb	r2, [r0, #13]
    4dac:	2b00      	cmp	r3, #0
    4dae:	db29      	blt.n	4e04 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4db0:	06d3      	lsls	r3, r2, #27
    4db2:	d127      	bne.n	4e04 <ready_thread+0x60>
	return node->next != NULL;
    4db4:	6983      	ldr	r3, [r0, #24]
    4db6:	bb2b      	cbnz	r3, 4e04 <ready_thread+0x60>
	return list->head == list;
    4db8:	4913      	ldr	r1, [pc, #76]	; (4e08 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4dbe:	7342      	strb	r2, [r0, #13]
    4dc0:	460a      	mov	r2, r1
    4dc2:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4dc6:	4294      	cmp	r4, r2
    4dc8:	bf18      	it	ne
    4dca:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    4dcc:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4dce:	b923      	cbnz	r3, 4dda <ready_thread+0x36>
	node->prev = tail;
    4dd0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    4dd4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4dd6:	6208      	str	r0, [r1, #32]
}
    4dd8:	e00c      	b.n	4df4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    4dda:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4dde:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    4de2:	42b5      	cmp	r5, r6
    4de4:	d00a      	beq.n	4dfc <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4de6:	42ae      	cmp	r6, r5
    4de8:	dd08      	ble.n	4dfc <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    4dea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4dec:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4df0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4df2:	6058      	str	r0, [r3, #4]
		update_cache(0);
    4df4:	2000      	movs	r0, #0
}
    4df6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4df8:	f7ff bf7c 	b.w	4cf4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4dfc:	42a3      	cmp	r3, r4
    4dfe:	d0e7      	beq.n	4dd0 <ready_thread+0x2c>
    4e00:	681b      	ldr	r3, [r3, #0]
    4e02:	e7e4      	b.n	4dce <ready_thread+0x2a>
}
    4e04:	bc70      	pop	{r4, r5, r6}
    4e06:	4770      	bx	lr
    4e08:	20000a20 	.word	0x20000a20

00004e0c <unready_thread>:
{
    4e0c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4e0e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4e12:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4e14:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    4e16:	7b43      	ldrb	r3, [r0, #13]
    4e18:	da04      	bge.n	4e24 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e1e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4e20:	f001 fbc2 	bl	65a8 <sys_dlist_remove>
	update_cache(thread == _current);
    4e24:	4b04      	ldr	r3, [pc, #16]	; (4e38 <unready_thread+0x2c>)
    4e26:	6898      	ldr	r0, [r3, #8]
    4e28:	1a43      	subs	r3, r0, r1
    4e2a:	4258      	negs	r0, r3
    4e2c:	4158      	adcs	r0, r3
}
    4e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4e32:	f7ff bf5f 	b.w	4cf4 <update_cache>
    4e36:	bf00      	nop
    4e38:	20000a20 	.word	0x20000a20

00004e3c <pend_locked>:
{
    4e3c:	b570      	push	{r4, r5, r6, lr}
    4e3e:	4615      	mov	r5, r2
    4e40:	461c      	mov	r4, r3
    4e42:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    4e44:	f001 fbc2 	bl	65cc <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e48:	f1b4 3fff 	cmp.w	r4, #4294967295
    4e4c:	bf08      	it	eq
    4e4e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    4e52:	d008      	beq.n	4e66 <pend_locked+0x2a>
    4e54:	462a      	mov	r2, r5
    4e56:	4623      	mov	r3, r4
    4e58:	f106 0018 	add.w	r0, r6, #24
    4e5c:	4902      	ldr	r1, [pc, #8]	; (4e68 <pend_locked+0x2c>)
}
    4e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e62:	f000 ba93 	b.w	538c <z_add_timeout>
    4e66:	bd70      	pop	{r4, r5, r6, pc}
    4e68:	00006681 	.word	0x00006681

00004e6c <z_time_slice>:
{
    4e6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4e6e:	f04f 0320 	mov.w	r3, #32
    4e72:	f3ef 8511 	mrs	r5, BASEPRI
    4e76:	f383 8812 	msr	BASEPRI_MAX, r3
    4e7a:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    4e7e:	4b10      	ldr	r3, [pc, #64]	; (4ec0 <z_time_slice+0x54>)
	if (pending_current == curr) {
    4e80:	4a10      	ldr	r2, [pc, #64]	; (4ec4 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    4e82:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    4e84:	6810      	ldr	r0, [r2, #0]
    4e86:	42a0      	cmp	r0, r4
    4e88:	d106      	bne.n	4e98 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    4e8a:	f7ff ff0b 	bl	4ca4 <z_reset_time_slice>
	__asm__ volatile(
    4e8e:	f385 8811 	msr	BASEPRI, r5
    4e92:	f3bf 8f6f 	isb	sy
}
    4e96:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4e98:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    4e9a:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    4e9c:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    4e9e:	4a0a      	ldr	r2, [pc, #40]	; (4ec8 <z_time_slice+0x5c>)
    4ea0:	5cd3      	ldrb	r3, [r2, r3]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d0f3      	beq.n	4e8e <z_time_slice+0x22>
    4ea6:	4620      	mov	r0, r4
    4ea8:	f7ff fece 	bl	4c48 <sliceable>
    4eac:	2800      	cmp	r0, #0
    4eae:	d0ee      	beq.n	4e8e <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    4eb0:	7b63      	ldrb	r3, [r4, #13]
    4eb2:	06db      	lsls	r3, r3, #27
    4eb4:	d102      	bne.n	4ebc <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    4eb6:	4620      	mov	r0, r4
    4eb8:	f7ff ff3a 	bl	4d30 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    4ebc:	4620      	mov	r0, r4
    4ebe:	e7e4      	b.n	4e8a <z_time_slice+0x1e>
    4ec0:	20000a20 	.word	0x20000a20
    4ec4:	20000a44 	.word	0x20000a44
    4ec8:	20001053 	.word	0x20001053

00004ecc <z_pend_curr>:
{
    4ecc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    4ece:	480c      	ldr	r0, [pc, #48]	; (4f00 <z_pend_curr+0x34>)
    4ed0:	4d0c      	ldr	r5, [pc, #48]	; (4f04 <z_pend_curr+0x38>)
    4ed2:	6886      	ldr	r6, [r0, #8]
{
    4ed4:	460c      	mov	r4, r1
	pending_current = _current;
    4ed6:	602e      	str	r6, [r5, #0]
{
    4ed8:	4611      	mov	r1, r2
    4eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    4ede:	f04f 0620 	mov.w	r6, #32
    4ee2:	f3ef 8511 	mrs	r5, BASEPRI
    4ee6:	f386 8812 	msr	BASEPRI_MAX, r6
    4eea:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    4eee:	6880      	ldr	r0, [r0, #8]
    4ef0:	f7ff ffa4 	bl	4e3c <pend_locked>
	ret = arch_swap(key);
    4ef4:	4620      	mov	r0, r4
}
    4ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4efa:	f7fc be55 	b.w	1ba8 <arch_swap>
    4efe:	bf00      	nop
    4f00:	20000a20 	.word	0x20000a20
    4f04:	20000a44 	.word	0x20000a44

00004f08 <z_set_prio>:
{
    4f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f0a:	4604      	mov	r4, r0
    4f0c:	f04f 0320 	mov.w	r3, #32
    4f10:	f3ef 8611 	mrs	r6, BASEPRI
    4f14:	f383 8812 	msr	BASEPRI_MAX, r3
    4f18:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    4f1c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    4f1e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4f20:	06da      	lsls	r2, r3, #27
    4f22:	d119      	bne.n	4f58 <z_set_prio+0x50>
	return node->next != NULL;
    4f24:	6985      	ldr	r5, [r0, #24]
    4f26:	b9bd      	cbnz	r5, 4f58 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f2c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4f2e:	f001 fb3b 	bl	65a8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4f32:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    4f34:	4a16      	ldr	r2, [pc, #88]	; (4f90 <z_set_prio+0x88>)
    4f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4f3a:	7343      	strb	r3, [r0, #13]
    4f3c:	4613      	mov	r3, r2
				thread->base.prio = prio;
    4f3e:	7381      	strb	r1, [r0, #14]
    4f40:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f44:	4298      	cmp	r0, r3
    4f46:	bf18      	it	ne
    4f48:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    4f4a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f4c:	b95d      	cbnz	r5, 4f66 <z_set_prio+0x5e>
	node->prev = tail;
    4f4e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    4f52:	6004      	str	r4, [r0, #0]
	list->tail = node;
    4f54:	6214      	str	r4, [r2, #32]
}
    4f56:	e011      	b.n	4f7c <z_set_prio+0x74>
    4f58:	2000      	movs	r0, #0
			thread->base.prio = prio;
    4f5a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    4f5c:	f386 8811 	msr	BASEPRI, r6
    4f60:	f3bf 8f6f 	isb	sy
}
    4f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    4f66:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    4f6a:	42b9      	cmp	r1, r7
    4f6c:	d00b      	beq.n	4f86 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4f6e:	428f      	cmp	r7, r1
    4f70:	dd09      	ble.n	4f86 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    4f72:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    4f74:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    4f78:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4f7a:	606c      	str	r4, [r5, #4]
			update_cache(1);
    4f7c:	2001      	movs	r0, #1
    4f7e:	f7ff feb9 	bl	4cf4 <update_cache>
    4f82:	2001      	movs	r0, #1
    4f84:	e7ea      	b.n	4f5c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    4f86:	42a8      	cmp	r0, r5
    4f88:	d0e1      	beq.n	4f4e <z_set_prio+0x46>
    4f8a:	682d      	ldr	r5, [r5, #0]
    4f8c:	e7de      	b.n	4f4c <z_set_prio+0x44>
    4f8e:	bf00      	nop
    4f90:	20000a20 	.word	0x20000a20

00004f94 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4f94:	b949      	cbnz	r1, 4faa <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4f96:	f3ef 8005 	mrs	r0, IPSR
    4f9a:	b930      	cbnz	r0, 4faa <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    4f9c:	4b05      	ldr	r3, [pc, #20]	; (4fb4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    4f9e:	699a      	ldr	r2, [r3, #24]
    4fa0:	689b      	ldr	r3, [r3, #8]
    4fa2:	429a      	cmp	r2, r3
    4fa4:	d001      	beq.n	4faa <z_reschedule+0x16>
    4fa6:	f7fc bdff 	b.w	1ba8 <arch_swap>
    4faa:	f381 8811 	msr	BASEPRI, r1
    4fae:	f3bf 8f6f 	isb	sy
}
    4fb2:	4770      	bx	lr
    4fb4:	20000a20 	.word	0x20000a20

00004fb8 <z_sched_start>:
{
    4fb8:	b510      	push	{r4, lr}
	__asm__ volatile(
    4fba:	f04f 0220 	mov.w	r2, #32
    4fbe:	f3ef 8411 	mrs	r4, BASEPRI
    4fc2:	f382 8812 	msr	BASEPRI_MAX, r2
    4fc6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4fca:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    4fcc:	0751      	lsls	r1, r2, #29
    4fce:	d404      	bmi.n	4fda <z_sched_start+0x22>
	__asm__ volatile(
    4fd0:	f384 8811 	msr	BASEPRI, r4
    4fd4:	f3bf 8f6f 	isb	sy
}
    4fd8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4fda:	f022 0204 	bic.w	r2, r2, #4
    4fde:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4fe0:	f7ff fee0 	bl	4da4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4fe4:	4621      	mov	r1, r4
}
    4fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4fea:	4801      	ldr	r0, [pc, #4]	; (4ff0 <z_sched_start+0x38>)
    4fec:	f7ff bfd2 	b.w	4f94 <z_reschedule>
    4ff0:	20001054 	.word	0x20001054

00004ff4 <z_impl_k_thread_suspend>:
{
    4ff4:	b570      	push	{r4, r5, r6, lr}
    4ff6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4ff8:	3018      	adds	r0, #24
    4ffa:	f001 fb77 	bl	66ec <z_abort_timeout>
	__asm__ volatile(
    4ffe:	f04f 0320 	mov.w	r3, #32
    5002:	f3ef 8611 	mrs	r6, BASEPRI
    5006:	f383 8812 	msr	BASEPRI_MAX, r3
    500a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    500e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5012:	7b63      	ldrb	r3, [r4, #13]
    5014:	2a00      	cmp	r2, #0
    5016:	da05      	bge.n	5024 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    501c:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    501e:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5020:	f001 fac2 	bl	65a8 <sys_dlist_remove>
		update_cache(thread == _current);
    5024:	4d0b      	ldr	r5, [pc, #44]	; (5054 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5026:	7b63      	ldrb	r3, [r4, #13]
    5028:	68a8      	ldr	r0, [r5, #8]
    502a:	f043 0310 	orr.w	r3, r3, #16
    502e:	7363      	strb	r3, [r4, #13]
    5030:	1b03      	subs	r3, r0, r4
    5032:	4258      	negs	r0, r3
    5034:	4158      	adcs	r0, r3
    5036:	f7ff fe5d 	bl	4cf4 <update_cache>
	__asm__ volatile(
    503a:	f386 8811 	msr	BASEPRI, r6
    503e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5042:	68ab      	ldr	r3, [r5, #8]
    5044:	42a3      	cmp	r3, r4
    5046:	d103      	bne.n	5050 <z_impl_k_thread_suspend+0x5c>
}
    5048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    504c:	f001 bb44 	b.w	66d8 <z_reschedule_unlocked>
}
    5050:	bd70      	pop	{r4, r5, r6, pc}
    5052:	bf00      	nop
    5054:	20000a20 	.word	0x20000a20

00005058 <k_sched_lock>:
	__asm__ volatile(
    5058:	f04f 0320 	mov.w	r3, #32
    505c:	f3ef 8111 	mrs	r1, BASEPRI
    5060:	f383 8812 	msr	BASEPRI_MAX, r3
    5064:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5068:	4b04      	ldr	r3, [pc, #16]	; (507c <k_sched_lock+0x24>)
    506a:	689a      	ldr	r2, [r3, #8]
    506c:	7bd3      	ldrb	r3, [r2, #15]
    506e:	3b01      	subs	r3, #1
    5070:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5072:	f381 8811 	msr	BASEPRI, r1
    5076:	f3bf 8f6f 	isb	sy
}
    507a:	4770      	bx	lr
    507c:	20000a20 	.word	0x20000a20

00005080 <k_sched_unlock>:
{
    5080:	b510      	push	{r4, lr}
	__asm__ volatile(
    5082:	f04f 0320 	mov.w	r3, #32
    5086:	f3ef 8411 	mrs	r4, BASEPRI
    508a:	f383 8812 	msr	BASEPRI_MAX, r3
    508e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5092:	4b08      	ldr	r3, [pc, #32]	; (50b4 <k_sched_unlock+0x34>)
		update_cache(0);
    5094:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5096:	689a      	ldr	r2, [r3, #8]
    5098:	7bd3      	ldrb	r3, [r2, #15]
    509a:	3301      	adds	r3, #1
    509c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    509e:	f7ff fe29 	bl	4cf4 <update_cache>
	__asm__ volatile(
    50a2:	f384 8811 	msr	BASEPRI, r4
    50a6:	f3bf 8f6f 	isb	sy
}
    50aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    50ae:	f001 bb13 	b.w	66d8 <z_reschedule_unlocked>
    50b2:	bf00      	nop
    50b4:	20000a20 	.word	0x20000a20

000050b8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    50b8:	4b02      	ldr	r3, [pc, #8]	; (50c4 <z_sched_init+0xc>)
    50ba:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    50be:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    50c2:	4770      	bx	lr
    50c4:	20000a20 	.word	0x20000a20

000050c8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    50c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    50ca:	f04f 0320 	mov.w	r3, #32
    50ce:	f3ef 8511 	mrs	r5, BASEPRI
    50d2:	f383 8812 	msr	BASEPRI_MAX, r3
    50d6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    50da:	4919      	ldr	r1, [pc, #100]	; (5140 <z_impl_k_yield+0x78>)
    50dc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    50de:	7b43      	ldrb	r3, [r0, #13]
    50e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    50e4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    50e6:	f001 fa5f 	bl	65a8 <sys_dlist_remove>
	return list->head == list;
    50ea:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    50ec:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    50ee:	7b5a      	ldrb	r2, [r3, #13]
    50f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    50f4:	735a      	strb	r2, [r3, #13]
    50f6:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    50fa:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50fc:	4282      	cmp	r2, r0
    50fe:	bf08      	it	eq
    5100:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5102:	b922      	cbnz	r2, 510e <z_impl_k_yield+0x46>
	node->prev = tail;
    5104:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    5108:	6023      	str	r3, [r4, #0]
	list->tail = node;
    510a:	620b      	str	r3, [r1, #32]
}
    510c:	e00c      	b.n	5128 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    510e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5112:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    5116:	42be      	cmp	r6, r7
    5118:	d00e      	beq.n	5138 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    511a:	42b7      	cmp	r7, r6
    511c:	dd0c      	ble.n	5138 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    511e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5120:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5124:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5126:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5128:	2001      	movs	r0, #1
    512a:	f7ff fde3 	bl	4cf4 <update_cache>
    512e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5134:	f7fc bd38 	b.w	1ba8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5138:	42a2      	cmp	r2, r4
    513a:	d0e3      	beq.n	5104 <z_impl_k_yield+0x3c>
    513c:	6812      	ldr	r2, [r2, #0]
    513e:	e7e0      	b.n	5102 <z_impl_k_yield+0x3a>
    5140:	20000a20 	.word	0x20000a20

00005144 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5144:	ea50 0301 	orrs.w	r3, r0, r1
{
    5148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    514c:	4605      	mov	r5, r0
    514e:	460e      	mov	r6, r1
	if (ticks == 0) {
    5150:	d103      	bne.n	515a <z_tick_sleep+0x16>
	z_impl_k_yield();
    5152:	f7ff ffb9 	bl	50c8 <z_impl_k_yield>
		k_yield();
		return 0;
    5156:	2000      	movs	r0, #0
    5158:	e02c      	b.n	51b4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    515a:	1c83      	adds	r3, r0, #2
    515c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    5160:	db2a      	blt.n	51b8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5162:	f001 fae9 	bl	6738 <sys_clock_tick_get_32>
    5166:	182c      	adds	r4, r5, r0
    5168:	f04f 0320 	mov.w	r3, #32
    516c:	f3ef 8811 	mrs	r8, BASEPRI
    5170:	f383 8812 	msr	BASEPRI_MAX, r3
    5174:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    5178:	4f11      	ldr	r7, [pc, #68]	; (51c0 <z_tick_sleep+0x7c>)
    517a:	4b12      	ldr	r3, [pc, #72]	; (51c4 <z_tick_sleep+0x80>)
    517c:	68b8      	ldr	r0, [r7, #8]
    517e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    5180:	f7ff fe44 	bl	4e0c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5184:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5186:	4910      	ldr	r1, [pc, #64]	; (51c8 <z_tick_sleep+0x84>)
    5188:	462a      	mov	r2, r5
    518a:	4633      	mov	r3, r6
    518c:	3018      	adds	r0, #24
    518e:	f000 f8fd 	bl	538c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5192:	68ba      	ldr	r2, [r7, #8]
    5194:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5196:	7b53      	ldrb	r3, [r2, #13]
    5198:	f043 0310 	orr.w	r3, r3, #16
    519c:	7353      	strb	r3, [r2, #13]
    519e:	f7fc fd03 	bl	1ba8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    51a2:	f001 fac9 	bl	6738 <sys_clock_tick_get_32>
    51a6:	1a20      	subs	r0, r4, r0
    51a8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    51ac:	2801      	cmp	r0, #1
    51ae:	f173 0300 	sbcs.w	r3, r3, #0
    51b2:	dbd0      	blt.n	5156 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    51b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    51b8:	f06f 0401 	mvn.w	r4, #1
    51bc:	1a24      	subs	r4, r4, r0
    51be:	e7d3      	b.n	5168 <z_tick_sleep+0x24>
    51c0:	20000a20 	.word	0x20000a20
    51c4:	20000a44 	.word	0x20000a44
    51c8:	00006681 	.word	0x00006681

000051cc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    51cc:	f1b1 3fff 	cmp.w	r1, #4294967295
    51d0:	bf08      	it	eq
    51d2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    51d6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    51d8:	d106      	bne.n	51e8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    51da:	4b08      	ldr	r3, [pc, #32]	; (51fc <z_impl_k_sleep+0x30>)
    51dc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    51de:	f7ff ff09 	bl	4ff4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    51e2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    51e6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    51e8:	f7ff ffac 	bl	5144 <z_tick_sleep>
    51ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    51f0:	fb80 0303 	smull	r0, r3, r0, r3
    51f4:	0bc0      	lsrs	r0, r0, #15
    51f6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    51fa:	e7f4      	b.n	51e6 <z_impl_k_sleep+0x1a>
    51fc:	20000a20 	.word	0x20000a20

00005200 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5200:	4b01      	ldr	r3, [pc, #4]	; (5208 <z_impl_z_current_get+0x8>)
    5202:	6898      	ldr	r0, [r3, #8]
    5204:	4770      	bx	lr
    5206:	bf00      	nop
    5208:	20000a20 	.word	0x20000a20

0000520c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5210:	4604      	mov	r4, r0
    5212:	f04f 0320 	mov.w	r3, #32
    5216:	f3ef 8611 	mrs	r6, BASEPRI
    521a:	f383 8812 	msr	BASEPRI_MAX, r3
    521e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    5222:	7b03      	ldrb	r3, [r0, #12]
    5224:	07d9      	lsls	r1, r3, #31
    5226:	d50b      	bpl.n	5240 <z_thread_abort+0x34>
	__asm__ volatile(
    5228:	f386 8811 	msr	BASEPRI, r6
    522c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5230:	4040      	eors	r0, r0
    5232:	f380 8811 	msr	BASEPRI, r0
    5236:	f04f 0004 	mov.w	r0, #4
    523a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5240:	7b43      	ldrb	r3, [r0, #13]
    5242:	071a      	lsls	r2, r3, #28
    5244:	d504      	bpl.n	5250 <z_thread_abort+0x44>
    5246:	f386 8811 	msr	BASEPRI, r6
    524a:	f3bf 8f6f 	isb	sy
    524e:	e7f5      	b.n	523c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5250:	f023 0220 	bic.w	r2, r3, #32
    5254:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5258:	09d2      	lsrs	r2, r2, #7
    525a:	d120      	bne.n	529e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    525c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    525e:	68a3      	ldr	r3, [r4, #8]
    5260:	b113      	cbz	r3, 5268 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    5262:	4620      	mov	r0, r4
    5264:	f001 f9a8 	bl	65b8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5268:	f104 0018 	add.w	r0, r4, #24
    526c:	f001 fa3e 	bl	66ec <z_abort_timeout>
    5270:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5274:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    5278:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    527a:	42bd      	cmp	r5, r7
    527c:	d000      	beq.n	5280 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    527e:	b9b5      	cbnz	r5, 52ae <z_thread_abort+0xa2>
		update_cache(1);
    5280:	2001      	movs	r0, #1
    5282:	f7ff fd37 	bl	4cf4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5286:	4b10      	ldr	r3, [pc, #64]	; (52c8 <z_thread_abort+0xbc>)
    5288:	689b      	ldr	r3, [r3, #8]
    528a:	42a3      	cmp	r3, r4
    528c:	d1db      	bne.n	5246 <z_thread_abort+0x3a>
    528e:	f3ef 8305 	mrs	r3, IPSR
    5292:	2b00      	cmp	r3, #0
    5294:	d1d7      	bne.n	5246 <z_thread_abort+0x3a>
    5296:	4630      	mov	r0, r6
    5298:	f7fc fc86 	bl	1ba8 <arch_swap>
	return ret;
    529c:	e7d3      	b.n	5246 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    529e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    52a2:	f043 0308 	orr.w	r3, r3, #8
    52a6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    52a8:	f001 f97e 	bl	65a8 <sys_dlist_remove>
}
    52ac:	e7d7      	b.n	525e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    52ae:	4628      	mov	r0, r5
    52b0:	f001 f982 	bl	65b8 <unpend_thread_no_timeout>
    52b4:	f105 0018 	add.w	r0, r5, #24
    52b8:	f001 fa18 	bl	66ec <z_abort_timeout>
		ready_thread(thread);
    52bc:	4628      	mov	r0, r5
    52be:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    52c2:	f7ff fd6f 	bl	4da4 <ready_thread>
    52c6:	e7d7      	b.n	5278 <z_thread_abort+0x6c>
    52c8:	20000a20 	.word	0x20000a20

000052cc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    52cc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    52ce:	4806      	ldr	r0, [pc, #24]	; (52e8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    52d0:	4a06      	ldr	r2, [pc, #24]	; (52ec <z_data_copy+0x20>)
    52d2:	4907      	ldr	r1, [pc, #28]	; (52f0 <z_data_copy+0x24>)
    52d4:	1a12      	subs	r2, r2, r0
    52d6:	f001 f8fc 	bl	64d2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    52da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    52de:	4a05      	ldr	r2, [pc, #20]	; (52f4 <z_data_copy+0x28>)
    52e0:	4905      	ldr	r1, [pc, #20]	; (52f8 <z_data_copy+0x2c>)
    52e2:	4806      	ldr	r0, [pc, #24]	; (52fc <z_data_copy+0x30>)
    52e4:	f001 b8f5 	b.w	64d2 <z_early_memcpy>
    52e8:	20000000 	.word	0x20000000
    52ec:	200001b8 	.word	0x200001b8
    52f0:	00006f88 	.word	0x00006f88
    52f4:	00000000 	.word	0x00000000
    52f8:	00006f88 	.word	0x00006f88
    52fc:	20000000 	.word	0x20000000

00005300 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5300:	4b03      	ldr	r3, [pc, #12]	; (5310 <elapsed+0x10>)
    5302:	681b      	ldr	r3, [r3, #0]
    5304:	b90b      	cbnz	r3, 530a <elapsed+0xa>
    5306:	f7fe b8b3 	b.w	3470 <sys_clock_elapsed>
}
    530a:	2000      	movs	r0, #0
    530c:	4770      	bx	lr
    530e:	bf00      	nop
    5310:	20000a50 	.word	0x20000a50

00005314 <next_timeout>:

static int32_t next_timeout(void)
{
    5314:	b510      	push	{r4, lr}
	return list->head == list;
    5316:	4b0e      	ldr	r3, [pc, #56]	; (5350 <next_timeout+0x3c>)
    5318:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    531a:	429c      	cmp	r4, r3
    531c:	d104      	bne.n	5328 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    531e:	f7ff ffef 	bl	5300 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    5322:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    5326:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    5328:	f7ff ffea 	bl	5300 <elapsed>
	if ((to == NULL) ||
    532c:	2c00      	cmp	r4, #0
    532e:	d0f8      	beq.n	5322 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5330:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5334:	1a1b      	subs	r3, r3, r0
    5336:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    533a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    533e:	f172 0100 	sbcs.w	r1, r2, #0
    5342:	daee      	bge.n	5322 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    5344:	2a00      	cmp	r2, #0
    5346:	bfac      	ite	ge
    5348:	4618      	movge	r0, r3
    534a:	2000      	movlt	r0, #0
	return ret;
    534c:	e7eb      	b.n	5326 <next_timeout+0x12>
    534e:	bf00      	nop
    5350:	200000f4 	.word	0x200000f4

00005354 <remove_timeout>:
{
    5354:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5356:	b170      	cbz	r0, 5376 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5358:	4b0b      	ldr	r3, [pc, #44]	; (5388 <remove_timeout+0x34>)
    535a:	685b      	ldr	r3, [r3, #4]
    535c:	4298      	cmp	r0, r3
    535e:	d00a      	beq.n	5376 <remove_timeout+0x22>
    5360:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    5362:	b143      	cbz	r3, 5376 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5364:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5368:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    536c:	1912      	adds	r2, r2, r4
    536e:	eb41 0105 	adc.w	r1, r1, r5
    5372:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5376:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    537a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    537c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    537e:	2300      	movs	r3, #0
	node->prev = NULL;
    5380:	e9c0 3300 	strd	r3, r3, [r0]
}
    5384:	bd30      	pop	{r4, r5, pc}
    5386:	bf00      	nop
    5388:	200000f4 	.word	0x200000f4

0000538c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    538c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5390:	bf08      	it	eq
    5392:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    5396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5398:	4604      	mov	r4, r0
    539a:	461d      	mov	r5, r3
    539c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    539e:	d05c      	beq.n	545a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    53a0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    53a2:	f04f 0320 	mov.w	r3, #32
    53a6:	f3ef 8711 	mrs	r7, BASEPRI
    53aa:	f383 8812 	msr	BASEPRI_MAX, r3
    53ae:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    53b2:	3201      	adds	r2, #1
    53b4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    53b8:	da24      	bge.n	5404 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    53ba:	f06f 0301 	mvn.w	r3, #1
    53be:	492c      	ldr	r1, [pc, #176]	; (5470 <z_add_timeout+0xe4>)
    53c0:	e9d1 2000 	ldrd	r2, r0, [r1]
    53c4:	1a9b      	subs	r3, r3, r2
    53c6:	f04f 32ff 	mov.w	r2, #4294967295
    53ca:	eb62 0000 	sbc.w	r0, r2, r0
    53ce:	1b9e      	subs	r6, r3, r6
    53d0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    53d4:	2e01      	cmp	r6, #1
    53d6:	f170 0300 	sbcs.w	r3, r0, #0
    53da:	da01      	bge.n	53e0 <z_add_timeout+0x54>
    53dc:	2601      	movs	r6, #1
    53de:	2000      	movs	r0, #0
    53e0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    53e4:	4e23      	ldr	r6, [pc, #140]	; (5474 <z_add_timeout+0xe8>)
    53e6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    53ea:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53ec:	45b4      	cmp	ip, r6
    53ee:	bf08      	it	eq
    53f0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    53f4:	f1bc 0f00 	cmp.w	ip, #0
    53f8:	d10d      	bne.n	5416 <z_add_timeout+0x8a>
	node->prev = tail;
    53fa:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    53fe:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5400:	6074      	str	r4, [r6, #4]
}
    5402:	e01c      	b.n	543e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    5404:	f7ff ff7c 	bl	5300 <elapsed>
    5408:	3601      	adds	r6, #1
    540a:	f145 0500 	adc.w	r5, r5, #0
    540e:	1836      	adds	r6, r6, r0
    5410:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    5414:	e7e4      	b.n	53e0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    5416:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    541a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    541e:	4293      	cmp	r3, r2
    5420:	eb71 0e00 	sbcs.w	lr, r1, r0
    5424:	da1a      	bge.n	545c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    5426:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    5428:	f8dc 3004 	ldr.w	r3, [ip, #4]
    542c:	eb60 0001 	sbc.w	r0, r0, r1
    5430:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    5434:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    5438:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    543a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    543e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5440:	42b3      	cmp	r3, r6
    5442:	d006      	beq.n	5452 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5444:	429c      	cmp	r4, r3
    5446:	d104      	bne.n	5452 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    5448:	f7ff ff64 	bl	5314 <next_timeout>
    544c:	2100      	movs	r1, #0
    544e:	f7fd ffdd 	bl	340c <sys_clock_set_timeout>
	__asm__ volatile(
    5452:	f387 8811 	msr	BASEPRI, r7
    5456:	f3bf 8f6f 	isb	sy
		}
	}
}
    545a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    545c:	1a9b      	subs	r3, r3, r2
    545e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    5462:	45ac      	cmp	ip, r5
    5464:	e9c4 3104 	strd	r3, r1, [r4, #16]
    5468:	d0c7      	beq.n	53fa <z_add_timeout+0x6e>
    546a:	f8dc c000 	ldr.w	ip, [ip]
    546e:	e7c1      	b.n	53f4 <z_add_timeout+0x68>
    5470:	200002f0 	.word	0x200002f0
    5474:	200000f4 	.word	0x200000f4

00005478 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    5478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    547c:	f04f 0320 	mov.w	r3, #32
    5480:	f3ef 8c11 	mrs	ip, BASEPRI
    5484:	f383 8812 	msr	BASEPRI_MAX, r3
    5488:	f3bf 8f6f 	isb	sy
	return list->head == list;
    548c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 5540 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5490:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5544 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    5494:	2400      	movs	r4, #0
	announce_remaining = ticks;
    5496:	f8c9 0000 	str.w	r0, [r9]
    549a:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    549e:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    54a0:	4550      	cmp	r0, sl
    54a2:	bf08      	it	eq
    54a4:	2000      	moveq	r0, #0
		curr_tick += dt;
    54a6:	4f28      	ldr	r7, [pc, #160]	; (5548 <sys_clock_announce+0xd0>)
    54a8:	46e0      	mov	r8, ip
    54aa:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    54ae:	f8d9 3000 	ldr.w	r3, [r9]
    54b2:	b380      	cbz	r0, 5516 <sys_clock_announce+0x9e>
    54b4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    54b8:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    54bc:	42b3      	cmp	r3, r6
    54be:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    54c2:	da05      	bge.n	54d0 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    54c4:	1af6      	subs	r6, r6, r3
    54c6:	eb6c 040e 	sbc.w	r4, ip, lr
    54ca:	e9c0 6404 	strd	r6, r4, [r0, #16]
    54ce:	e022      	b.n	5516 <sys_clock_announce+0x9e>
		curr_tick += dt;
    54d0:	18b2      	adds	r2, r6, r2
    54d2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    54d6:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    54da:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    54de:	f7ff ff39 	bl	5354 <remove_timeout>
	__asm__ volatile(
    54e2:	f388 8811 	msr	BASEPRI, r8
    54e6:	f3bf 8f6f 	isb	sy
		t->fn(t);
    54ea:	6883      	ldr	r3, [r0, #8]
    54ec:	4798      	blx	r3
	__asm__ volatile(
    54ee:	f04f 0320 	mov.w	r3, #32
    54f2:	f3ef 8811 	mrs	r8, BASEPRI
    54f6:	f383 8812 	msr	BASEPRI_MAX, r3
    54fa:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    54fe:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    5502:	f8da 0000 	ldr.w	r0, [sl]
    5506:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5508:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    550a:	46c4      	mov	ip, r8
    550c:	f8c9 3000 	str.w	r3, [r9]
    5510:	d1ca      	bne.n	54a8 <sys_clock_announce+0x30>
		curr_tick += dt;
    5512:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    5516:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5518:	189a      	adds	r2, r3, r2
    551a:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    551e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    5522:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    5526:	f7ff fef5 	bl	5314 <next_timeout>
    552a:	4621      	mov	r1, r4
    552c:	f7fd ff6e 	bl	340c <sys_clock_set_timeout>
	__asm__ volatile(
    5530:	f388 8811 	msr	BASEPRI, r8
    5534:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    5538:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    553c:	f7ff bc96 	b.w	4e6c <z_time_slice>
    5540:	200000f4 	.word	0x200000f4
    5544:	20000a50 	.word	0x20000a50
    5548:	200002f0 	.word	0x200002f0

0000554c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    554c:	b510      	push	{r4, lr}
	__asm__ volatile(
    554e:	f04f 0320 	mov.w	r3, #32
    5552:	f3ef 8411 	mrs	r4, BASEPRI
    5556:	f383 8812 	msr	BASEPRI_MAX, r3
    555a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    555e:	f7ff fecf 	bl	5300 <elapsed>
    5562:	4603      	mov	r3, r0
    5564:	4a05      	ldr	r2, [pc, #20]	; (557c <sys_clock_tick_get+0x30>)
    5566:	e9d2 0100 	ldrd	r0, r1, [r2]
    556a:	1818      	adds	r0, r3, r0
    556c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    5570:	f384 8811 	msr	BASEPRI, r4
    5574:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5578:	bd10      	pop	{r4, pc}
    557a:	bf00      	nop
    557c:	200002f0 	.word	0x200002f0

00005580 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    5580:	4801      	ldr	r0, [pc, #4]	; (5588 <boot_banner+0x8>)
    5582:	f000 b9a9 	b.w	58d8 <printk>
    5586:	bf00      	nop
    5588:	00006f57 	.word	0x00006f57

0000558c <nrf_cc3xx_platform_init_no_rng>:
    558c:	b510      	push	{r4, lr}
    558e:	4c0a      	ldr	r4, [pc, #40]	; (55b8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5590:	6823      	ldr	r3, [r4, #0]
    5592:	b11b      	cbz	r3, 559c <nrf_cc3xx_platform_init_no_rng+0x10>
    5594:	2301      	movs	r3, #1
    5596:	6023      	str	r3, [r4, #0]
    5598:	2000      	movs	r0, #0
    559a:	bd10      	pop	{r4, pc}
    559c:	f000 f8f4 	bl	5788 <CC_LibInitNoRng>
    55a0:	2800      	cmp	r0, #0
    55a2:	d0f7      	beq.n	5594 <nrf_cc3xx_platform_init_no_rng+0x8>
    55a4:	3801      	subs	r0, #1
    55a6:	2807      	cmp	r0, #7
    55a8:	d803      	bhi.n	55b2 <nrf_cc3xx_platform_init_no_rng+0x26>
    55aa:	4b04      	ldr	r3, [pc, #16]	; (55bc <nrf_cc3xx_platform_init_no_rng+0x30>)
    55ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    55b0:	bd10      	pop	{r4, pc}
    55b2:	4803      	ldr	r0, [pc, #12]	; (55c0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    55b4:	bd10      	pop	{r4, pc}
    55b6:	bf00      	nop
    55b8:	20000a54 	.word	0x20000a54
    55bc:	00006cb0 	.word	0x00006cb0
    55c0:	ffff8ffe 	.word	0xffff8ffe

000055c4 <nrf_cc3xx_platform_abort>:
    55c4:	f3bf 8f4f 	dsb	sy
    55c8:	4905      	ldr	r1, [pc, #20]	; (55e0 <nrf_cc3xx_platform_abort+0x1c>)
    55ca:	4b06      	ldr	r3, [pc, #24]	; (55e4 <nrf_cc3xx_platform_abort+0x20>)
    55cc:	68ca      	ldr	r2, [r1, #12]
    55ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    55d2:	4313      	orrs	r3, r2
    55d4:	60cb      	str	r3, [r1, #12]
    55d6:	f3bf 8f4f 	dsb	sy
    55da:	bf00      	nop
    55dc:	e7fd      	b.n	55da <nrf_cc3xx_platform_abort+0x16>
    55de:	bf00      	nop
    55e0:	e000ed00 	.word	0xe000ed00
    55e4:	05fa0004 	.word	0x05fa0004

000055e8 <CC_PalAbort>:
    55e8:	b430      	push	{r4, r5}
    55ea:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    55ee:	2500      	movs	r5, #0
    55f0:	4b0b      	ldr	r3, [pc, #44]	; (5620 <CC_PalAbort+0x38>)
    55f2:	4c0c      	ldr	r4, [pc, #48]	; (5624 <CC_PalAbort+0x3c>)
    55f4:	490c      	ldr	r1, [pc, #48]	; (5628 <CC_PalAbort+0x40>)
    55f6:	6849      	ldr	r1, [r1, #4]
    55f8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    55fc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5600:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5604:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5608:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    560c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    5610:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    5614:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    5618:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    561c:	bc30      	pop	{r4, r5}
    561e:	4708      	bx	r1
    5620:	50845000 	.word	0x50845000
    5624:	50844000 	.word	0x50844000
    5628:	200000fc 	.word	0x200000fc

0000562c <nrf_cc3xx_platform_set_abort>:
    562c:	4b02      	ldr	r3, [pc, #8]	; (5638 <nrf_cc3xx_platform_set_abort+0xc>)
    562e:	e9d0 1200 	ldrd	r1, r2, [r0]
    5632:	e9c3 1200 	strd	r1, r2, [r3]
    5636:	4770      	bx	lr
    5638:	200000fc 	.word	0x200000fc

0000563c <mutex_free>:
    563c:	b510      	push	{r4, lr}
    563e:	4604      	mov	r4, r0
    5640:	b150      	cbz	r0, 5658 <mutex_free+0x1c>
    5642:	6863      	ldr	r3, [r4, #4]
    5644:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5648:	d005      	beq.n	5656 <mutex_free+0x1a>
    564a:	4a06      	ldr	r2, [pc, #24]	; (5664 <mutex_free+0x28>)
    564c:	4293      	cmp	r3, r2
    564e:	d002      	beq.n	5656 <mutex_free+0x1a>
    5650:	2300      	movs	r3, #0
    5652:	6062      	str	r2, [r4, #4]
    5654:	6023      	str	r3, [r4, #0]
    5656:	bd10      	pop	{r4, pc}
    5658:	4b03      	ldr	r3, [pc, #12]	; (5668 <mutex_free+0x2c>)
    565a:	4804      	ldr	r0, [pc, #16]	; (566c <mutex_free+0x30>)
    565c:	685b      	ldr	r3, [r3, #4]
    565e:	4798      	blx	r3
    5660:	e7ef      	b.n	5642 <mutex_free+0x6>
    5662:	bf00      	nop
    5664:	a95c5f2c 	.word	0xa95c5f2c
    5668:	200000fc 	.word	0x200000fc
    566c:	00006cd0 	.word	0x00006cd0

00005670 <mutex_lock>:
    5670:	b1c8      	cbz	r0, 56a6 <mutex_lock+0x36>
    5672:	6843      	ldr	r3, [r0, #4]
    5674:	4a0d      	ldr	r2, [pc, #52]	; (56ac <mutex_lock+0x3c>)
    5676:	4293      	cmp	r3, r2
    5678:	d013      	beq.n	56a2 <mutex_lock+0x32>
    567a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    567e:	d00e      	beq.n	569e <mutex_lock+0x2e>
    5680:	2301      	movs	r3, #1
    5682:	e850 2f00 	ldrex	r2, [r0]
    5686:	4619      	mov	r1, r3
    5688:	e840 1c00 	strex	ip, r1, [r0]
    568c:	f09c 0f00 	teq	ip, #0
    5690:	d1f7      	bne.n	5682 <mutex_lock+0x12>
    5692:	2a01      	cmp	r2, #1
    5694:	d0f5      	beq.n	5682 <mutex_lock+0x12>
    5696:	f3bf 8f5f 	dmb	sy
    569a:	2000      	movs	r0, #0
    569c:	4770      	bx	lr
    569e:	4804      	ldr	r0, [pc, #16]	; (56b0 <mutex_lock+0x40>)
    56a0:	4770      	bx	lr
    56a2:	4804      	ldr	r0, [pc, #16]	; (56b4 <mutex_lock+0x44>)
    56a4:	4770      	bx	lr
    56a6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    56aa:	4770      	bx	lr
    56ac:	a95c5f2c 	.word	0xa95c5f2c
    56b0:	ffff8fe9 	.word	0xffff8fe9
    56b4:	ffff8fea 	.word	0xffff8fea

000056b8 <mutex_unlock>:
    56b8:	4603      	mov	r3, r0
    56ba:	b180      	cbz	r0, 56de <mutex_unlock+0x26>
    56bc:	6842      	ldr	r2, [r0, #4]
    56be:	4909      	ldr	r1, [pc, #36]	; (56e4 <mutex_unlock+0x2c>)
    56c0:	428a      	cmp	r2, r1
    56c2:	d00a      	beq.n	56da <mutex_unlock+0x22>
    56c4:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    56c8:	d005      	beq.n	56d6 <mutex_unlock+0x1e>
    56ca:	f3bf 8f5f 	dmb	sy
    56ce:	2200      	movs	r2, #0
    56d0:	4610      	mov	r0, r2
    56d2:	601a      	str	r2, [r3, #0]
    56d4:	4770      	bx	lr
    56d6:	4804      	ldr	r0, [pc, #16]	; (56e8 <mutex_unlock+0x30>)
    56d8:	4770      	bx	lr
    56da:	4804      	ldr	r0, [pc, #16]	; (56ec <mutex_unlock+0x34>)
    56dc:	4770      	bx	lr
    56de:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    56e2:	4770      	bx	lr
    56e4:	a95c5f2c 	.word	0xa95c5f2c
    56e8:	ffff8fe9 	.word	0xffff8fe9
    56ec:	ffff8fea 	.word	0xffff8fea

000056f0 <mutex_init>:
    56f0:	b510      	push	{r4, lr}
    56f2:	4604      	mov	r4, r0
    56f4:	b120      	cbz	r0, 5700 <mutex_init+0x10>
    56f6:	2300      	movs	r3, #0
    56f8:	4a03      	ldr	r2, [pc, #12]	; (5708 <mutex_init+0x18>)
    56fa:	6023      	str	r3, [r4, #0]
    56fc:	6062      	str	r2, [r4, #4]
    56fe:	bd10      	pop	{r4, pc}
    5700:	4802      	ldr	r0, [pc, #8]	; (570c <mutex_init+0x1c>)
    5702:	f7ff ff71 	bl	55e8 <CC_PalAbort>
    5706:	e7f6      	b.n	56f6 <mutex_init+0x6>
    5708:	3a00003a 	.word	0x3a00003a
    570c:	00006cf8 	.word	0x00006cf8

00005710 <nrf_cc3xx_platform_set_mutexes>:
    5710:	b570      	push	{r4, r5, r6, lr}
    5712:	4c19      	ldr	r4, [pc, #100]	; (5778 <nrf_cc3xx_platform_set_mutexes+0x68>)
    5714:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5718:	6806      	ldr	r6, [r0, #0]
    571a:	f8c4 c004 	str.w	ip, [r4, #4]
    571e:	f8d0 c008 	ldr.w	ip, [r0, #8]
    5722:	68c0      	ldr	r0, [r0, #12]
    5724:	f8c4 c008 	str.w	ip, [r4, #8]
    5728:	60e0      	str	r0, [r4, #12]
    572a:	6026      	str	r6, [r4, #0]
    572c:	6808      	ldr	r0, [r1, #0]
    572e:	4b13      	ldr	r3, [pc, #76]	; (577c <nrf_cc3xx_platform_set_mutexes+0x6c>)
    5730:	4d13      	ldr	r5, [pc, #76]	; (5780 <nrf_cc3xx_platform_set_mutexes+0x70>)
    5732:	6018      	str	r0, [r3, #0]
    5734:	6848      	ldr	r0, [r1, #4]
    5736:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    573a:	6058      	str	r0, [r3, #4]
    573c:	6888      	ldr	r0, [r1, #8]
    573e:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    5742:	6098      	str	r0, [r3, #8]
    5744:	68c8      	ldr	r0, [r1, #12]
    5746:	6909      	ldr	r1, [r1, #16]
    5748:	60d8      	str	r0, [r3, #12]
    574a:	6119      	str	r1, [r3, #16]
    574c:	d012      	beq.n	5774 <nrf_cc3xx_platform_set_mutexes+0x64>
    574e:	2300      	movs	r3, #0
    5750:	4a0c      	ldr	r2, [pc, #48]	; (5784 <nrf_cc3xx_platform_set_mutexes+0x74>)
    5752:	f505 708a 	add.w	r0, r5, #276	; 0x114
    5756:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    575a:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    575e:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    5762:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    5766:	47b0      	blx	r6
    5768:	6823      	ldr	r3, [r4, #0]
    576a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    576e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5772:	4718      	bx	r3
    5774:	bd70      	pop	{r4, r5, r6, pc}
    5776:	bf00      	nop
    5778:	20000118 	.word	0x20000118
    577c:	20000104 	.word	0x20000104
    5780:	20000a6c 	.word	0x20000a6c
    5784:	a95c5f2c 	.word	0xa95c5f2c

00005788 <CC_LibInitNoRng>:
    5788:	b508      	push	{r3, lr}
    578a:	f000 f811 	bl	57b0 <CC_HalInit>
    578e:	b930      	cbnz	r0, 579e <CC_LibInitNoRng+0x16>
    5790:	f000 f810 	bl	57b4 <CC_PalInit>
    5794:	b938      	cbnz	r0, 57a6 <CC_LibInitNoRng+0x1e>
    5796:	4a05      	ldr	r2, [pc, #20]	; (57ac <CC_LibInitNoRng+0x24>)
    5798:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    579c:	bd08      	pop	{r3, pc}
    579e:	f000 f837 	bl	5810 <CC_PalTerminate>
    57a2:	2003      	movs	r0, #3
    57a4:	bd08      	pop	{r3, pc}
    57a6:	2004      	movs	r0, #4
    57a8:	bd08      	pop	{r3, pc}
    57aa:	bf00      	nop
    57ac:	50845000 	.word	0x50845000

000057b0 <CC_HalInit>:
    57b0:	2000      	movs	r0, #0
    57b2:	4770      	bx	lr

000057b4 <CC_PalInit>:
    57b4:	b510      	push	{r4, lr}
    57b6:	4811      	ldr	r0, [pc, #68]	; (57fc <CC_PalInit+0x48>)
    57b8:	f000 f848 	bl	584c <CC_PalMutexCreate>
    57bc:	b100      	cbz	r0, 57c0 <CC_PalInit+0xc>
    57be:	bd10      	pop	{r4, pc}
    57c0:	480f      	ldr	r0, [pc, #60]	; (5800 <CC_PalInit+0x4c>)
    57c2:	f000 f843 	bl	584c <CC_PalMutexCreate>
    57c6:	2800      	cmp	r0, #0
    57c8:	d1f9      	bne.n	57be <CC_PalInit+0xa>
    57ca:	4c0e      	ldr	r4, [pc, #56]	; (5804 <CC_PalInit+0x50>)
    57cc:	4620      	mov	r0, r4
    57ce:	f000 f83d 	bl	584c <CC_PalMutexCreate>
    57d2:	2800      	cmp	r0, #0
    57d4:	d1f3      	bne.n	57be <CC_PalInit+0xa>
    57d6:	4b0c      	ldr	r3, [pc, #48]	; (5808 <CC_PalInit+0x54>)
    57d8:	480c      	ldr	r0, [pc, #48]	; (580c <CC_PalInit+0x58>)
    57da:	601c      	str	r4, [r3, #0]
    57dc:	f000 f836 	bl	584c <CC_PalMutexCreate>
    57e0:	4601      	mov	r1, r0
    57e2:	2800      	cmp	r0, #0
    57e4:	d1eb      	bne.n	57be <CC_PalInit+0xa>
    57e6:	f000 f82d 	bl	5844 <CC_PalDmaInit>
    57ea:	4604      	mov	r4, r0
    57ec:	b108      	cbz	r0, 57f2 <CC_PalInit+0x3e>
    57ee:	4620      	mov	r0, r4
    57f0:	bd10      	pop	{r4, pc}
    57f2:	f000 f83f 	bl	5874 <CC_PalPowerSaveModeInit>
    57f6:	4620      	mov	r0, r4
    57f8:	e7fa      	b.n	57f0 <CC_PalInit+0x3c>
    57fa:	bf00      	nop
    57fc:	20000158 	.word	0x20000158
    5800:	20000154 	.word	0x20000154
    5804:	20000150 	.word	0x20000150
    5808:	20000148 	.word	0x20000148
    580c:	2000014c 	.word	0x2000014c

00005810 <CC_PalTerminate>:
    5810:	b508      	push	{r3, lr}
    5812:	4808      	ldr	r0, [pc, #32]	; (5834 <CC_PalTerminate+0x24>)
    5814:	f000 f824 	bl	5860 <CC_PalMutexDestroy>
    5818:	4807      	ldr	r0, [pc, #28]	; (5838 <CC_PalTerminate+0x28>)
    581a:	f000 f821 	bl	5860 <CC_PalMutexDestroy>
    581e:	4807      	ldr	r0, [pc, #28]	; (583c <CC_PalTerminate+0x2c>)
    5820:	f000 f81e 	bl	5860 <CC_PalMutexDestroy>
    5824:	4806      	ldr	r0, [pc, #24]	; (5840 <CC_PalTerminate+0x30>)
    5826:	f000 f81b 	bl	5860 <CC_PalMutexDestroy>
    582a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    582e:	f000 b80b 	b.w	5848 <CC_PalDmaTerminate>
    5832:	bf00      	nop
    5834:	20000158 	.word	0x20000158
    5838:	20000154 	.word	0x20000154
    583c:	20000150 	.word	0x20000150
    5840:	2000014c 	.word	0x2000014c

00005844 <CC_PalDmaInit>:
    5844:	2000      	movs	r0, #0
    5846:	4770      	bx	lr

00005848 <CC_PalDmaTerminate>:
    5848:	4770      	bx	lr
    584a:	bf00      	nop

0000584c <CC_PalMutexCreate>:
    584c:	b508      	push	{r3, lr}
    584e:	4b03      	ldr	r3, [pc, #12]	; (585c <CC_PalMutexCreate+0x10>)
    5850:	6802      	ldr	r2, [r0, #0]
    5852:	681b      	ldr	r3, [r3, #0]
    5854:	6810      	ldr	r0, [r2, #0]
    5856:	4798      	blx	r3
    5858:	2000      	movs	r0, #0
    585a:	bd08      	pop	{r3, pc}
    585c:	20000118 	.word	0x20000118

00005860 <CC_PalMutexDestroy>:
    5860:	b508      	push	{r3, lr}
    5862:	4b03      	ldr	r3, [pc, #12]	; (5870 <CC_PalMutexDestroy+0x10>)
    5864:	6802      	ldr	r2, [r0, #0]
    5866:	685b      	ldr	r3, [r3, #4]
    5868:	6810      	ldr	r0, [r2, #0]
    586a:	4798      	blx	r3
    586c:	2000      	movs	r0, #0
    586e:	bd08      	pop	{r3, pc}
    5870:	20000118 	.word	0x20000118

00005874 <CC_PalPowerSaveModeInit>:
    5874:	b570      	push	{r4, r5, r6, lr}
    5876:	4c09      	ldr	r4, [pc, #36]	; (589c <CC_PalPowerSaveModeInit+0x28>)
    5878:	4d09      	ldr	r5, [pc, #36]	; (58a0 <CC_PalPowerSaveModeInit+0x2c>)
    587a:	6920      	ldr	r0, [r4, #16]
    587c:	68ab      	ldr	r3, [r5, #8]
    587e:	4798      	blx	r3
    5880:	b118      	cbz	r0, 588a <CC_PalPowerSaveModeInit+0x16>
    5882:	4b08      	ldr	r3, [pc, #32]	; (58a4 <CC_PalPowerSaveModeInit+0x30>)
    5884:	4808      	ldr	r0, [pc, #32]	; (58a8 <CC_PalPowerSaveModeInit+0x34>)
    5886:	685b      	ldr	r3, [r3, #4]
    5888:	4798      	blx	r3
    588a:	2100      	movs	r1, #0
    588c:	4a07      	ldr	r2, [pc, #28]	; (58ac <CC_PalPowerSaveModeInit+0x38>)
    588e:	68eb      	ldr	r3, [r5, #12]
    5890:	6011      	str	r1, [r2, #0]
    5892:	6920      	ldr	r0, [r4, #16]
    5894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5898:	4718      	bx	r3
    589a:	bf00      	nop
    589c:	20000104 	.word	0x20000104
    58a0:	20000118 	.word	0x20000118
    58a4:	200000fc 	.word	0x200000fc
    58a8:	00006d1c 	.word	0x00006d1c
    58ac:	20000a68 	.word	0x20000a68

000058b0 <decimal_to_bcd>:
    return ((decimal / 10) << 4) | (decimal % 10);
    58b0:	220a      	movs	r2, #10
    58b2:	fbb0 f3f2 	udiv	r3, r0, r2
    58b6:	fb02 0013 	mls	r0, r2, r3, r0
    58ba:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
    58be:	b2c0      	uxtb	r0, r0
    58c0:	4770      	bx	lr

000058c2 <bcd_to_decimal>:
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
    58c2:	0903      	lsrs	r3, r0, #4
    58c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    58c8:	f000 000f 	and.w	r0, r0, #15
    58cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
    58d0:	b2c0      	uxtb	r0, r0
    58d2:	4770      	bx	lr

000058d4 <arch_printk_char_out>:
}
    58d4:	2000      	movs	r0, #0
    58d6:	4770      	bx	lr

000058d8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    58d8:	b40f      	push	{r0, r1, r2, r3}
    58da:	b507      	push	{r0, r1, r2, lr}
    58dc:	a904      	add	r1, sp, #16
    58de:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    58e2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    58e4:	f7fa fe7a 	bl	5dc <vprintk>

	va_end(ap);
}
    58e8:	b003      	add	sp, #12
    58ea:	f85d eb04 	ldr.w	lr, [sp], #4
    58ee:	b004      	add	sp, #16
    58f0:	4770      	bx	lr

000058f2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    58f2:	4604      	mov	r4, r0
    58f4:	b508      	push	{r3, lr}
    58f6:	4608      	mov	r0, r1
    58f8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    58fa:	461a      	mov	r2, r3
    58fc:	47a0      	blx	r4
	return z_impl_z_current_get();
    58fe:	f7ff fc7f 	bl	5200 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    5902:	f7fc fbcd 	bl	20a0 <z_impl_k_thread_abort>

00005906 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5906:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5908:	f013 0307 	ands.w	r3, r3, #7
    590c:	d105      	bne.n	591a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    590e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5910:	2b00      	cmp	r3, #0
    5912:	bf0c      	ite	eq
    5914:	2000      	moveq	r0, #0
    5916:	2003      	movne	r0, #3
    5918:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    591a:	2b02      	cmp	r3, #2
    591c:	d105      	bne.n	592a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    591e:	8b40      	ldrh	r0, [r0, #26]
    5920:	fab0 f080 	clz	r0, r0
    5924:	0940      	lsrs	r0, r0, #5
    5926:	0080      	lsls	r0, r0, #2
    5928:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    592a:	2b01      	cmp	r3, #1
    592c:	d105      	bne.n	593a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    592e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5930:	2b00      	cmp	r3, #0
    5932:	bf0c      	ite	eq
    5934:	2000      	moveq	r0, #0
    5936:	2005      	movne	r0, #5
    5938:	4770      	bx	lr
	int evt = EVT_NOP;
    593a:	2000      	movs	r0, #0
}
    593c:	4770      	bx	lr

0000593e <validate_args>:
{
    593e:	b510      	push	{r4, lr}
    5940:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5942:	b100      	cbz	r0, 5946 <validate_args+0x8>
    5944:	b911      	cbnz	r1, 594c <validate_args+0xe>
		return -EINVAL;
    5946:	f06f 0015 	mvn.w	r0, #21
}
    594a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    594c:	1d08      	adds	r0, r1, #4
    594e:	f000 f895 	bl	5a7c <sys_notify_validate>
	if ((rv == 0)
    5952:	2800      	cmp	r0, #0
    5954:	d1f9      	bne.n	594a <validate_args+0xc>
	    && ((cli->notify.flags
    5956:	68a3      	ldr	r3, [r4, #8]
    5958:	2b03      	cmp	r3, #3
    595a:	d9f6      	bls.n	594a <validate_args+0xc>
    595c:	e7f3      	b.n	5946 <validate_args+0x8>

0000595e <notify_one>:
{
    595e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5962:	460d      	mov	r5, r1
    5964:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5966:	4619      	mov	r1, r3
    5968:	1d28      	adds	r0, r5, #4
{
    596a:	4690      	mov	r8, r2
    596c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    596e:	f000 f896 	bl	5a9e <sys_notify_finalize>
	if (cb) {
    5972:	4604      	mov	r4, r0
    5974:	b138      	cbz	r0, 5986 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5976:	4633      	mov	r3, r6
    5978:	4642      	mov	r2, r8
    597a:	4629      	mov	r1, r5
    597c:	4638      	mov	r0, r7
    597e:	46a4      	mov	ip, r4
}
    5980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5984:	4760      	bx	ip
}
    5986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000598a <transition_complete>:
{
    598a:	b410      	push	{r4}
	__asm__ volatile(
    598c:	f04f 0420 	mov.w	r4, #32
    5990:	f3ef 8211 	mrs	r2, BASEPRI
    5994:	f384 8812 	msr	BASEPRI_MAX, r4
    5998:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    599c:	6141      	str	r1, [r0, #20]
}
    599e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    59a0:	2101      	movs	r1, #1
    59a2:	f7fa be29 	b.w	5f8 <process_event>

000059a6 <onoff_manager_init>:
{
    59a6:	b538      	push	{r3, r4, r5, lr}
    59a8:	460c      	mov	r4, r1
	if ((mgr == NULL)
    59aa:	4605      	mov	r5, r0
    59ac:	b158      	cbz	r0, 59c6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    59ae:	b151      	cbz	r1, 59c6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    59b0:	680b      	ldr	r3, [r1, #0]
    59b2:	b143      	cbz	r3, 59c6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    59b4:	684b      	ldr	r3, [r1, #4]
    59b6:	b133      	cbz	r3, 59c6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    59b8:	221c      	movs	r2, #28
    59ba:	2100      	movs	r1, #0
    59bc:	f000 f973 	bl	5ca6 <memset>
	return 0;
    59c0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    59c2:	612c      	str	r4, [r5, #16]
}
    59c4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    59c6:	f06f 0015 	mvn.w	r0, #21
    59ca:	e7fb      	b.n	59c4 <onoff_manager_init+0x1e>

000059cc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    59cc:	b570      	push	{r4, r5, r6, lr}
    59ce:	4605      	mov	r5, r0
    59d0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    59d2:	f7ff ffb4 	bl	593e <validate_args>

	if (rv < 0) {
    59d6:	1e04      	subs	r4, r0, #0
    59d8:	db15      	blt.n	5a06 <onoff_request+0x3a>
    59da:	f04f 0320 	mov.w	r3, #32
    59de:	f3ef 8211 	mrs	r2, BASEPRI
    59e2:	f383 8812 	msr	BASEPRI_MAX, r3
    59e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    59ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    59ee:	8b6b      	ldrh	r3, [r5, #26]
    59f0:	8b2c      	ldrh	r4, [r5, #24]
    59f2:	428b      	cmp	r3, r1
    59f4:	f004 0407 	and.w	r4, r4, #7
    59f8:	d107      	bne.n	5a0a <onoff_request+0x3e>
	__asm__ volatile(
    59fa:	f382 8811 	msr	BASEPRI, r2
    59fe:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    5a02:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5a06:	4620      	mov	r0, r4
    5a08:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5a0a:	2c02      	cmp	r4, #2
    5a0c:	d10c      	bne.n	5a28 <onoff_request+0x5c>
		mgr->refs += 1U;
    5a0e:	3301      	adds	r3, #1
    5a10:	836b      	strh	r3, [r5, #26]
    5a12:	f382 8811 	msr	BASEPRI, r2
    5a16:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    5a1a:	2300      	movs	r3, #0
    5a1c:	4622      	mov	r2, r4
    5a1e:	4631      	mov	r1, r6
    5a20:	4628      	mov	r0, r5
    5a22:	f7ff ff9c 	bl	595e <notify_one>
    5a26:	e7ee      	b.n	5a06 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    5a28:	2c06      	cmp	r4, #6
    5a2a:	d814      	bhi.n	5a56 <onoff_request+0x8a>
    5a2c:	e8df f004 	tbb	[pc, r4]
    5a30:	13131304 	.word	0x13131304
    5a34:	1a04      	.short	0x1a04
    5a36:	04          	.byte	0x04
    5a37:	00          	.byte	0x00
	parent->next = child;
    5a38:	2300      	movs	r3, #0
    5a3a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    5a3c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5a3e:	b93b      	cbnz	r3, 5a50 <onoff_request+0x84>
	list->head = node;
    5a40:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    5a44:	b9ac      	cbnz	r4, 5a72 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    5a46:	2102      	movs	r1, #2
    5a48:	4628      	mov	r0, r5
    5a4a:	f7fa fdd5 	bl	5f8 <process_event>
    5a4e:	e7da      	b.n	5a06 <onoff_request+0x3a>
	parent->next = child;
    5a50:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5a52:	606e      	str	r6, [r5, #4]
}
    5a54:	e7f6      	b.n	5a44 <onoff_request+0x78>
    5a56:	f382 8811 	msr	BASEPRI, r2
    5a5a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    5a5e:	f06f 0404 	mvn.w	r4, #4
    5a62:	e7d0      	b.n	5a06 <onoff_request+0x3a>
    5a64:	f382 8811 	msr	BASEPRI, r2
    5a68:	f3bf 8f6f 	isb	sy
    5a6c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5a70:	e7c9      	b.n	5a06 <onoff_request+0x3a>
    5a72:	f382 8811 	msr	BASEPRI, r2
    5a76:	f3bf 8f6f 	isb	sy
		if (notify) {
    5a7a:	e7c4      	b.n	5a06 <onoff_request+0x3a>

00005a7c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5a7c:	4603      	mov	r3, r0
    5a7e:	b158      	cbz	r0, 5a98 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5a80:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5a82:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5a86:	2a01      	cmp	r2, #1
    5a88:	d003      	beq.n	5a92 <sys_notify_validate+0x16>
    5a8a:	2a03      	cmp	r2, #3
    5a8c:	d104      	bne.n	5a98 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5a8e:	6802      	ldr	r2, [r0, #0]
    5a90:	b112      	cbz	r2, 5a98 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5a92:	2000      	movs	r0, #0
    5a94:	6098      	str	r0, [r3, #8]
    5a96:	4770      	bx	lr
    5a98:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5a9c:	4770      	bx	lr

00005a9e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5a9e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5aa0:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5aa2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5aa6:	2a03      	cmp	r2, #3
    5aa8:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    5aac:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    5aae:	bf14      	ite	ne
    5ab0:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5ab2:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5ab4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5ab6:	4770      	bx	lr

00005ab8 <_ldiv5>:
	uint32_t v_lo = *v;
    5ab8:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    5abc:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    5abe:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    5ac2:	fba2 2403 	umull	r2, r4, r2, r3
    5ac6:	18d5      	adds	r5, r2, r3
    5ac8:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    5acc:	fba1 1303 	umull	r1, r3, r1, r3
    5ad0:	1852      	adds	r2, r2, r1
    5ad2:	eb44 0403 	adc.w	r4, r4, r3
    5ad6:	1952      	adds	r2, r2, r5
    5ad8:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    5adc:	1889      	adds	r1, r1, r2
    5ade:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    5ae2:	e9c0 1300 	strd	r1, r3, [r0]
}
    5ae6:	bd30      	pop	{r4, r5, pc}

00005ae8 <_get_digit>:
{
    5ae8:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    5aea:	680a      	ldr	r2, [r1, #0]
{
    5aec:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    5aee:	2a00      	cmp	r2, #0
    5af0:	dd0f      	ble.n	5b12 <_get_digit+0x2a>
		--*digit_count;
    5af2:	3a01      	subs	r2, #1
    5af4:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    5af6:	6844      	ldr	r4, [r0, #4]
    5af8:	200a      	movs	r0, #10
    5afa:	681a      	ldr	r2, [r3, #0]
    5afc:	fba2 1200 	umull	r1, r2, r2, r0
    5b00:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    5b04:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    5b06:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    5b0a:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    5b0e:	3030      	adds	r0, #48	; 0x30
}
    5b10:	bd10      	pop	{r4, pc}
		rval = '0';
    5b12:	2030      	movs	r0, #48	; 0x30
    5b14:	e7fc      	b.n	5b10 <_get_digit+0x28>

00005b16 <encode_uint>:
{
    5b16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b1a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    5b1c:	78d3      	ldrb	r3, [r2, #3]
{
    5b1e:	4680      	mov	r8, r0
	switch (specifier) {
    5b20:	2b6f      	cmp	r3, #111	; 0x6f
{
    5b22:	460f      	mov	r7, r1
    5b24:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5b26:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    5b2a:	d029      	beq.n	5b80 <encode_uint+0x6a>
    5b2c:	d824      	bhi.n	5b78 <encode_uint+0x62>
		return 10;
    5b2e:	2b58      	cmp	r3, #88	; 0x58
    5b30:	bf0c      	ite	eq
    5b32:	2610      	moveq	r6, #16
    5b34:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    5b36:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    5b3a:	4632      	mov	r2, r6
    5b3c:	2300      	movs	r3, #0
    5b3e:	4640      	mov	r0, r8
    5b40:	4639      	mov	r1, r7
    5b42:	f7fa fb07 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5b46:	2a09      	cmp	r2, #9
    5b48:	b2d4      	uxtb	r4, r2
    5b4a:	d81e      	bhi.n	5b8a <encode_uint+0x74>
    5b4c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5b4e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5b50:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    5b52:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5b56:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    5b5a:	d301      	bcc.n	5b60 <encode_uint+0x4a>
    5b5c:	45d1      	cmp	r9, sl
    5b5e:	d811      	bhi.n	5b84 <encode_uint+0x6e>
	if (conv->flag_hash) {
    5b60:	782b      	ldrb	r3, [r5, #0]
    5b62:	069b      	lsls	r3, r3, #26
    5b64:	d505      	bpl.n	5b72 <encode_uint+0x5c>
		if (radix == 8) {
    5b66:	2e08      	cmp	r6, #8
    5b68:	d115      	bne.n	5b96 <encode_uint+0x80>
			conv->altform_0 = true;
    5b6a:	78ab      	ldrb	r3, [r5, #2]
    5b6c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5b70:	70ab      	strb	r3, [r5, #2]
}
    5b72:	4648      	mov	r0, r9
    5b74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5b78:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    5b7c:	2b70      	cmp	r3, #112	; 0x70
    5b7e:	e7d7      	b.n	5b30 <encode_uint+0x1a>
	switch (specifier) {
    5b80:	2608      	movs	r6, #8
    5b82:	e7d8      	b.n	5b36 <encode_uint+0x20>
		value /= radix;
    5b84:	4680      	mov	r8, r0
    5b86:	460f      	mov	r7, r1
    5b88:	e7d7      	b.n	5b3a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5b8a:	f1bb 0f19 	cmp.w	fp, #25
    5b8e:	bf94      	ite	ls
    5b90:	3437      	addls	r4, #55	; 0x37
    5b92:	3457      	addhi	r4, #87	; 0x57
    5b94:	e7db      	b.n	5b4e <encode_uint+0x38>
		} else if (radix == 16) {
    5b96:	2e10      	cmp	r6, #16
    5b98:	d1eb      	bne.n	5b72 <encode_uint+0x5c>
			conv->altform_0c = true;
    5b9a:	78ab      	ldrb	r3, [r5, #2]
    5b9c:	f043 0310 	orr.w	r3, r3, #16
    5ba0:	e7e6      	b.n	5b70 <encode_uint+0x5a>

00005ba2 <outs>:
{
    5ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ba6:	4607      	mov	r7, r0
    5ba8:	4688      	mov	r8, r1
    5baa:	4615      	mov	r5, r2
    5bac:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5bae:	4614      	mov	r4, r2
    5bb0:	42b4      	cmp	r4, r6
    5bb2:	d305      	bcc.n	5bc0 <outs+0x1e>
    5bb4:	b10e      	cbz	r6, 5bba <outs+0x18>
	return (int)count;
    5bb6:	1b60      	subs	r0, r4, r5
    5bb8:	e008      	b.n	5bcc <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5bba:	7823      	ldrb	r3, [r4, #0]
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	d0fa      	beq.n	5bb6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    5bc0:	4641      	mov	r1, r8
    5bc2:	f814 0b01 	ldrb.w	r0, [r4], #1
    5bc6:	47b8      	blx	r7
		if (rc < 0) {
    5bc8:	2800      	cmp	r0, #0
    5bca:	daf1      	bge.n	5bb0 <outs+0xe>
}
    5bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005bd0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5bd0:	4770      	bx	lr

00005bd2 <pm_state_exit_post_ops>:
    5bd2:	2300      	movs	r3, #0
    5bd4:	f383 8811 	msr	BASEPRI, r3
    5bd8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5bdc:	4770      	bx	lr

00005bde <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    5bde:	2000      	movs	r0, #0
{
    5be0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5be2:	f7fb fc81 	bl	14e8 <sys_reboot>

00005be6 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5be6:	f000 bc57 	b.w	6498 <z_fatal_error>

00005bea <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5bea:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5bec:	6800      	ldr	r0, [r0, #0]
    5bee:	f000 bc53 	b.w	6498 <z_fatal_error>

00005bf2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5bf2:	2100      	movs	r1, #0
    5bf4:	2001      	movs	r0, #1
    5bf6:	f7ff bff6 	b.w	5be6 <z_arm_fatal_error>

00005bfa <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5bfa:	b508      	push	{r3, lr}
	handler();
    5bfc:	f7fb ffb4 	bl	1b68 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5c00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5c04:	f7fc b876 	b.w	1cf4 <z_arm_exc_exit>

00005c08 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    5c08:	6e43      	ldr	r3, [r0, #100]	; 0x64
    5c0a:	f383 880b 	msr	PSPLIM, r3
}
    5c0e:	4770      	bx	lr

00005c10 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5c10:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    5c14:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c18:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    5c1a:	bf08      	it	eq
    5c1c:	f06f 0015 	mvneq.w	r0, #21
    5c20:	4770      	bx	lr

00005c22 <mpu_configure_region>:
{
    5c22:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    5c24:	890a      	ldrh	r2, [r1, #8]
    5c26:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    5c28:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    5c2a:	684d      	ldr	r5, [r1, #4]
    5c2c:	f002 021f 	and.w	r2, r2, #31
    5c30:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    5c34:	9300      	str	r3, [sp, #0]
    5c36:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    5c3a:	f023 031f 	bic.w	r3, r3, #31
    5c3e:	1e6a      	subs	r2, r5, #1
    5c40:	4413      	add	r3, r2
    5c42:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    5c46:	2807      	cmp	r0, #7
    5c48:	9303      	str	r3, [sp, #12]
    5c4a:	d804      	bhi.n	5c56 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    5c4c:	4669      	mov	r1, sp
    5c4e:	f7fc fa59 	bl	2104 <region_init>
}
    5c52:	b004      	add	sp, #16
    5c54:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5c56:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    5c5a:	e7fa      	b.n	5c52 <mpu_configure_region+0x30>

00005c5c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5c5c:	4603      	mov	r3, r0
    5c5e:	3901      	subs	r1, #1
    5c60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5c64:	b90a      	cbnz	r2, 5c6a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5c66:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5c68:	4770      	bx	lr
		*d = *s;
    5c6a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5c6e:	e7f7      	b.n	5c60 <strcpy+0x4>

00005c70 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5c70:	4603      	mov	r3, r0
	size_t n = 0;
    5c72:	2000      	movs	r0, #0

	while (*s != '\0') {
    5c74:	5c1a      	ldrb	r2, [r3, r0]
    5c76:	b902      	cbnz	r2, 5c7a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5c78:	4770      	bx	lr
		n++;
    5c7a:	3001      	adds	r0, #1
    5c7c:	e7fa      	b.n	5c74 <strlen+0x4>

00005c7e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5c7e:	4603      	mov	r3, r0
	size_t n = 0;
    5c80:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5c82:	5c1a      	ldrb	r2, [r3, r0]
    5c84:	b10a      	cbz	r2, 5c8a <strnlen+0xc>
    5c86:	4288      	cmp	r0, r1
    5c88:	d100      	bne.n	5c8c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5c8a:	4770      	bx	lr
		n++;
    5c8c:	3001      	adds	r0, #1
    5c8e:	e7f8      	b.n	5c82 <strnlen+0x4>

00005c90 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5c90:	b510      	push	{r4, lr}
    5c92:	1e43      	subs	r3, r0, #1
    5c94:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5c96:	4291      	cmp	r1, r2
    5c98:	d100      	bne.n	5c9c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5c9a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
    5ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5ca4:	e7f7      	b.n	5c96 <memcpy+0x6>

00005ca6 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    5ca6:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    5ca8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5caa:	4402      	add	r2, r0
    5cac:	4293      	cmp	r3, r2
    5cae:	d100      	bne.n	5cb2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5cb0:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5cb2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5cb6:	e7f9      	b.n	5cac <memset+0x6>

00005cb8 <_stdout_hook_default>:
}
    5cb8:	f04f 30ff 	mov.w	r0, #4294967295
    5cbc:	4770      	bx	lr

00005cbe <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5cbe:	220c      	movs	r2, #12
    5cc0:	6903      	ldr	r3, [r0, #16]
    5cc2:	b2c9      	uxtb	r1, r1
    5cc4:	fb01 3302 	mla	r3, r1, r2, r3
    5cc8:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    5cca:	f000 0007 	and.w	r0, r0, #7
    5cce:	4770      	bx	lr

00005cd0 <set_on_state>:
	__asm__ volatile(
    5cd0:	f04f 0320 	mov.w	r3, #32
    5cd4:	f3ef 8211 	mrs	r2, BASEPRI
    5cd8:	f383 8812 	msr	BASEPRI_MAX, r3
    5cdc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5ce0:	6803      	ldr	r3, [r0, #0]
    5ce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5ce6:	f043 0302 	orr.w	r3, r3, #2
    5cea:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5cec:	f382 8811 	msr	BASEPRI, r2
    5cf0:	f3bf 8f6f 	isb	sy
}
    5cf4:	4770      	bx	lr

00005cf6 <stop>:
{
    5cf6:	b570      	push	{r4, r5, r6, lr}
    5cf8:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    5cfa:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    5cfc:	f04f 0420 	mov.w	r4, #32
    5d00:	f3ef 8511 	mrs	r5, BASEPRI
    5d04:	f384 8812 	msr	BASEPRI_MAX, r4
    5d08:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5d0c:	260c      	movs	r6, #12
    5d0e:	fb06 3401 	mla	r4, r6, r1, r3
    5d12:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5d14:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    5d18:	d008      	beq.n	5d2c <stop+0x36>
    5d1a:	42a2      	cmp	r2, r4
    5d1c:	d006      	beq.n	5d2c <stop+0x36>
	__asm__ volatile(
    5d1e:	f385 8811 	msr	BASEPRI, r5
    5d22:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    5d26:	f04f 30ff 	mov.w	r0, #4294967295
}
    5d2a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5d2c:	2201      	movs	r2, #1
    5d2e:	fb06 3301 	mla	r3, r6, r1, r3
    5d32:	679a      	str	r2, [r3, #120]	; 0x78
    5d34:	f385 8811 	msr	BASEPRI, r5
    5d38:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    5d3c:	6843      	ldr	r3, [r0, #4]
    5d3e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5d42:	685b      	ldr	r3, [r3, #4]
    5d44:	4798      	blx	r3
	return 0;
    5d46:	2000      	movs	r0, #0
    5d48:	e7ef      	b.n	5d2a <stop+0x34>

00005d4a <api_stop>:
	return stop(dev, subsys, CTX_API);
    5d4a:	2280      	movs	r2, #128	; 0x80
    5d4c:	f7ff bfd3 	b.w	5cf6 <stop>

00005d50 <async_start>:
{
    5d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d52:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5d54:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    5d56:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5d58:	f04f 0520 	mov.w	r5, #32
    5d5c:	f3ef 8611 	mrs	r6, BASEPRI
    5d60:	f385 8812 	msr	BASEPRI_MAX, r5
    5d64:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5d68:	250c      	movs	r5, #12
    5d6a:	fb05 4401 	mla	r4, r5, r1, r4
    5d6e:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5d70:	f005 0c07 	and.w	ip, r5, #7
    5d74:	f1bc 0f01 	cmp.w	ip, #1
    5d78:	d10c      	bne.n	5d94 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5d7a:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    5d7c:	f386 8811 	msr	BASEPRI, r6
    5d80:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    5d84:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    5d88:	6843      	ldr	r3, [r0, #4]
    5d8a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    5d8e:	4798      	blx	r3
	return 0;
    5d90:	2000      	movs	r0, #0
}
    5d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5d94:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5d98:	42af      	cmp	r7, r5
    5d9a:	f386 8811 	msr	BASEPRI, r6
    5d9e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    5da2:	bf0c      	ite	eq
    5da4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    5da8:	f04f 30ff 	movne.w	r0, #4294967295
    5dac:	e7f1      	b.n	5d92 <async_start+0x42>

00005dae <api_start>:
{
    5dae:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5db0:	2480      	movs	r4, #128	; 0x80
    5db2:	9400      	str	r4, [sp, #0]
    5db4:	f7ff ffcc 	bl	5d50 <async_start>
}
    5db8:	b002      	add	sp, #8
    5dba:	bd10      	pop	{r4, pc}

00005dbc <onoff_started_callback>:
{
    5dbc:	b410      	push	{r4}
	notify(mgr, 0);
    5dbe:	241c      	movs	r4, #28
	return &data->mgr[type];
    5dc0:	6900      	ldr	r0, [r0, #16]
    5dc2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5dc4:	fb03 0004 	mla	r0, r3, r4, r0
    5dc8:	2100      	movs	r1, #0
}
    5dca:	bc10      	pop	{r4}
	notify(mgr, 0);
    5dcc:	4710      	bx	r2

00005dce <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5dce:	2003      	movs	r0, #3
    5dd0:	f000 ba08 	b.w	61e4 <nrfx_clock_start>

00005dd4 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    5dd4:	2002      	movs	r0, #2
    5dd6:	f000 ba05 	b.w	61e4 <nrfx_clock_start>

00005dda <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5dda:	2000      	movs	r0, #0
    5ddc:	f000 ba02 	b.w	61e4 <nrfx_clock_start>

00005de0 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5de0:	2003      	movs	r0, #3
    5de2:	f000 ba5e 	b.w	62a2 <nrfx_clock_stop>

00005de6 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    5de6:	2002      	movs	r0, #2
    5de8:	f000 ba5b 	b.w	62a2 <nrfx_clock_stop>

00005dec <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5dec:	2000      	movs	r0, #0
    5dee:	f000 ba58 	b.w	62a2 <nrfx_clock_stop>

00005df2 <blocking_start_callback>:
{
    5df2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    5df4:	f7fe bee0 	b.w	4bb8 <z_impl_k_sem_give>

00005df8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5df8:	6843      	ldr	r3, [r0, #4]
}
    5dfa:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5dfc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5dfe:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    5e00:	600b      	str	r3, [r1, #0]
}
    5e02:	4770      	bx	lr

00005e04 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e04:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    5e06:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e0a:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    5e0c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    5e10:	6098      	str	r0, [r3, #8]
}
    5e12:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5e14:	60d9      	str	r1, [r3, #12]
    5e16:	4770      	bx	lr

00005e18 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e18:	6843      	ldr	r3, [r0, #4]
}
    5e1a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e1c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5e1e:	6099      	str	r1, [r3, #8]
}
    5e20:	4770      	bx	lr

00005e22 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e22:	6843      	ldr	r3, [r0, #4]
}
    5e24:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e26:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5e28:	60d9      	str	r1, [r3, #12]
}
    5e2a:	4770      	bx	lr

00005e2c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e2c:	6843      	ldr	r3, [r0, #4]
    5e2e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5e30:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    5e32:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    5e36:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    5e38:	6090      	str	r0, [r2, #8]
}
    5e3a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5e3c:	60d3      	str	r3, [r2, #12]
    5e3e:	4770      	bx	lr

00005e40 <gpio_nrfx_manage_callback>:
{
    5e40:	b510      	push	{r4, lr}
	return port->data;
    5e42:	6903      	ldr	r3, [r0, #16]
	return list->head;
    5e44:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    5e46:	b1f8      	cbz	r0, 5e88 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e48:	4288      	cmp	r0, r1
    5e4a:	d119      	bne.n	5e80 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    5e4c:	689c      	ldr	r4, [r3, #8]
	return node->next;
    5e4e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    5e50:	42a1      	cmp	r1, r4
	list->head = node;
    5e52:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5e54:	d100      	bne.n	5e58 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    5e56:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5e58:	2000      	movs	r0, #0
    5e5a:	6008      	str	r0, [r1, #0]
	if (set) {
    5e5c:	b12a      	cbz	r2, 5e6a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    5e5e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    5e60:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    5e62:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    5e64:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5e66:	b902      	cbnz	r2, 5e6a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    5e68:	6099      	str	r1, [r3, #8]
	return 0;
    5e6a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5e6c:	e010      	b.n	5e90 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e6e:	4281      	cmp	r1, r0
    5e70:	d106      	bne.n	5e80 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    5e72:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    5e74:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    5e76:	6898      	ldr	r0, [r3, #8]
    5e78:	4281      	cmp	r1, r0
    5e7a:	d1ed      	bne.n	5e58 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    5e7c:	609c      	str	r4, [r3, #8]
}
    5e7e:	e7eb      	b.n	5e58 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    5e80:	4604      	mov	r4, r0
    5e82:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e84:	2800      	cmp	r0, #0
    5e86:	d1f2      	bne.n	5e6e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    5e88:	2a00      	cmp	r2, #0
    5e8a:	d1e8      	bne.n	5e5e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    5e8c:	f06f 0015 	mvn.w	r0, #21
}
    5e90:	bd10      	pop	{r4, pc}

00005e92 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & i2c_config) {
    5e92:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    5e94:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    5e96:	d416      	bmi.n	5ec6 <i2c_nrfx_twim_configure+0x34>
	switch (I2C_SPEED_GET(i2c_config)) {
    5e98:	f3c1 0142 	ubfx	r1, r1, #1, #3
    5e9c:	2902      	cmp	r1, #2
    5e9e:	d00a      	beq.n	5eb6 <i2c_nrfx_twim_configure+0x24>
    5ea0:	2903      	cmp	r1, #3
    5ea2:	d00c      	beq.n	5ebe <i2c_nrfx_twim_configure+0x2c>
    5ea4:	2901      	cmp	r1, #1
    5ea6:	d10e      	bne.n	5ec6 <i2c_nrfx_twim_configure+0x34>
    p_reg->FREQUENCY = frequency;
    5ea8:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    5eac:	681b      	ldr	r3, [r3, #0]
	return 0;
    5eae:	2000      	movs	r0, #0
    5eb0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    5eb4:	4770      	bx	lr
    5eb6:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    5eba:	681b      	ldr	r3, [r3, #0]
    5ebc:	e7f7      	b.n	5eae <i2c_nrfx_twim_configure+0x1c>
    5ebe:	f04f 627f 	mov.w	r2, #267386880	; 0xff00000
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    5ec2:	681b      	ldr	r3, [r3, #0]
    5ec4:	e7f3      	b.n	5eae <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(i2c_config)) {
    5ec6:	f06f 0015 	mvn.w	r0, #21
}
    5eca:	4770      	bx	lr

00005ecc <irq_connect1>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    5ecc:	2200      	movs	r2, #0
    5ece:	2101      	movs	r1, #1
    5ed0:	2009      	movs	r0, #9
    5ed2:	f7fb be33 	b.w	1b3c <z_arm_irq_priority_set>

00005ed6 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    5ed6:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
    5ed8:	2100      	movs	r1, #0
    5eda:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    5edc:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    5ede:	f000 f80a 	bl	5ef6 <pinctrl_lookup_state>
	if (ret < 0) {
    5ee2:	2800      	cmp	r0, #0
    5ee4:	db05      	blt.n	5ef2 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
    5ee6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5ee8:	6822      	ldr	r2, [r4, #0]
    5eea:	7919      	ldrb	r1, [r3, #4]
    5eec:	6818      	ldr	r0, [r3, #0]
    5eee:	f7fc fe89 	bl	2c04 <pinctrl_configure_pins>
}
    5ef2:	b002      	add	sp, #8
    5ef4:	bd10      	pop	{r4, pc}

00005ef6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5ef6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    5ef8:	6843      	ldr	r3, [r0, #4]
    5efa:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    5efc:	7a05      	ldrb	r5, [r0, #8]
    5efe:	6844      	ldr	r4, [r0, #4]
    5f00:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    5f04:	42a3      	cmp	r3, r4
    5f06:	d302      	bcc.n	5f0e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    5f08:	f06f 0001 	mvn.w	r0, #1
}
    5f0c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    5f0e:	795c      	ldrb	r4, [r3, #5]
    5f10:	428c      	cmp	r4, r1
    5f12:	d001      	beq.n	5f18 <pinctrl_lookup_state+0x22>
		(*state)++;
    5f14:	3308      	adds	r3, #8
    5f16:	e7f0      	b.n	5efa <pinctrl_lookup_state+0x4>
			return 0;
    5f18:	2000      	movs	r0, #0
    5f1a:	e7f7      	b.n	5f0c <pinctrl_lookup_state+0x16>

00005f1c <uarte_nrfx_config_get>:
{
    5f1c:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    5f1e:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    5f20:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5f24:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5f28:	2000      	movs	r0, #0
    5f2a:	4770      	bx	lr

00005f2c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5f2c:	6843      	ldr	r3, [r0, #4]
    5f2e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5f30:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5f34:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5f38:	4770      	bx	lr

00005f3a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5f3a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    5f3c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5f3e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5f44:	b150      	cbz	r0, 5f5c <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f46:	2000      	movs	r0, #0
	*c = *data->rx_data;
    5f48:	6952      	ldr	r2, [r2, #20]
    5f4a:	7812      	ldrb	r2, [r2, #0]
    5f4c:	700a      	strb	r2, [r1, #0]
    5f4e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5f52:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f56:	2201      	movs	r2, #1
    5f58:	601a      	str	r2, [r3, #0]
	return 0;
    5f5a:	4770      	bx	lr
		return -1;
    5f5c:	f04f 30ff 	mov.w	r0, #4294967295
}
    5f60:	4770      	bx	lr

00005f62 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    5f62:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    5f64:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f66:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5f6a:	b940      	cbnz	r0, 5f7e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5f6c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5f6e:	079b      	lsls	r3, r3, #30
    5f70:	d406      	bmi.n	5f80 <is_tx_ready.isra.0+0x1e>
    5f72:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    5f76:	3800      	subs	r0, #0
    5f78:	bf18      	it	ne
    5f7a:	2001      	movne	r0, #1
    5f7c:	4770      	bx	lr
    5f7e:	2001      	movs	r0, #1
}
    5f80:	4770      	bx	lr

00005f82 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    5f82:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5f84:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5f86:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5f8a:	05c9      	lsls	r1, r1, #23
    5f8c:	d518      	bpl.n	5fc0 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f8e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    5f92:	b1a9      	cbz	r1, 5fc0 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5f94:	f04f 0020 	mov.w	r0, #32
    5f98:	f3ef 8111 	mrs	r1, BASEPRI
    5f9c:	f380 8812 	msr	BASEPRI_MAX, r0
    5fa0:	f3bf 8f6f 	isb	sy
    5fa4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5fa8:	b130      	cbz	r0, 5fb8 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5faa:	2000      	movs	r0, #0
    5fac:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    5fb0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fb4:	2001      	movs	r0, #1
    5fb6:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    5fb8:	f381 8811 	msr	BASEPRI, r1
    5fbc:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5fc0:	6852      	ldr	r2, [r2, #4]
    5fc2:	06d2      	lsls	r2, r2, #27
    5fc4:	d515      	bpl.n	5ff2 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    5fc6:	f04f 0120 	mov.w	r1, #32
    5fca:	f3ef 8211 	mrs	r2, BASEPRI
    5fce:	f381 8812 	msr	BASEPRI_MAX, r1
    5fd2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5fd6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5fda:	b111      	cbz	r1, 5fe2 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5fdc:	2100      	movs	r1, #0
    5fde:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5fe2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5fe6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5fea:	f382 8811 	msr	BASEPRI, r2
    5fee:	f3bf 8f6f 	isb	sy
}
    5ff2:	4770      	bx	lr

00005ff4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5ff4:	4770      	bx	lr

00005ff6 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5ff6:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5ff8:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5ffc:	009b      	lsls	r3, r3, #2
    5ffe:	b29b      	uxth	r3, r3
    6000:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6004:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    6008:	601a      	str	r2, [r3, #0]
    600a:	681b      	ldr	r3, [r3, #0]
}
    600c:	4770      	bx	lr

0000600e <sys_clock_cycle_get_32>:
{
    600e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    6010:	f7fd f8a2 	bl	3158 <z_nrf_rtc_timer_read>
}
    6014:	bd08      	pop	{r3, pc}

00006016 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6016:	2000      	movs	r0, #0
{
    6018:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    601a:	f7fb fff7 	bl	200c <sys_arch_reboot>

0000601e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    601e:	f7ff bab5 	b.w	558c <nrf_cc3xx_platform_init_no_rng>

00006022 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    6022:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6024:	f7fb fc30 	bl	1888 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6028:	f7fb fd16 	bl	1a58 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    602c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6030:	f7ff baac 	b.w	558c <nrf_cc3xx_platform_init_no_rng>

00006034 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6034:	4700      	bx	r0

00006036 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6036:	f000 bb83 	b.w	6740 <z_impl_k_busy_wait>

0000603a <clock_stop>:
{
    603a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    603c:	2803      	cmp	r0, #3
    603e:	f200 80a7 	bhi.w	6190 <clock_stop+0x156>
    6042:	e8df f000 	tbb	[pc, r0]
    6046:	1902      	.short	0x1902
    6048:	3527      	.short	0x3527
    604a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    604e:	2202      	movs	r2, #2
    6050:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6054:	2200      	movs	r2, #0
    6056:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    605a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    605e:	2201      	movs	r2, #1
    6060:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6062:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6064:	2301      	movs	r3, #1
    6066:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    606a:	2803      	cmp	r0, #3
    606c:	f200 8090 	bhi.w	6190 <clock_stop+0x156>
    6070:	e8df f000 	tbb	[pc, r0]
    6074:	9a78692c 	.word	0x9a78692c
    p_reg->INTENCLR = mask;
    6078:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    607c:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    607e:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    6080:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6084:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6088:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    608c:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6090:	605a      	str	r2, [r3, #4]
    6092:	e7e7      	b.n	6064 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    6094:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6098:	f44f 7200 	mov.w	r2, #512	; 0x200
    609c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60a0:	2200      	movs	r2, #0
    60a2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    60a6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60aa:	2201      	movs	r2, #1
    60ac:	625a      	str	r2, [r3, #36]	; 0x24
    60ae:	e7d8      	b.n	6062 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    60b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60b4:	f44f 7280 	mov.w	r2, #256	; 0x100
    60b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60bc:	2200      	movs	r2, #0
    60be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    60c2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60c6:	2201      	movs	r2, #1
    60c8:	61da      	str	r2, [r3, #28]
    60ca:	e7ca      	b.n	6062 <clock_stop+0x28>
    switch (domain)
    60cc:	f242 7510 	movw	r5, #10000	; 0x2710
    60d0:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    60d4:	b36c      	cbz	r4, 6132 <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    60d6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    60da:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    60de:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60e0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    60e4:	03d9      	lsls	r1, r3, #15
    60e6:	d553      	bpl.n	6190 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    60e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    60ec:	2801      	cmp	r0, #1
    60ee:	d14f      	bne.n	6190 <clock_stop+0x156>
    60f0:	f7ff ffa1 	bl	6036 <nrfx_busy_wait>
    60f4:	3d01      	subs	r5, #1
    60f6:	d1ed      	bne.n	60d4 <clock_stop+0x9a>
    60f8:	e04a      	b.n	6190 <clock_stop+0x156>
    60fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    60fe:	2801      	cmp	r0, #1
    6100:	d146      	bne.n	6190 <clock_stop+0x156>
    6102:	f7ff ff98 	bl	6036 <nrfx_busy_wait>
    6106:	3d01      	subs	r5, #1
    6108:	d152      	bne.n	61b0 <clock_stop+0x176>
    610a:	e041      	b.n	6190 <clock_stop+0x156>
    610c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6110:	2801      	cmp	r0, #1
    6112:	d13d      	bne.n	6190 <clock_stop+0x156>
    6114:	f7ff ff8f 	bl	6036 <nrfx_busy_wait>
    6118:	3d01      	subs	r5, #1
    611a:	d039      	beq.n	6190 <clock_stop+0x156>
            if (p_clk_src != NULL)
    611c:	b1c4      	cbz	r4, 6150 <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    611e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6122:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6126:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6128:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    612c:	03db      	lsls	r3, r3, #15
    612e:	d52f      	bpl.n	6190 <clock_stop+0x156>
    6130:	e7ec      	b.n	610c <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6132:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6136:	03da      	lsls	r2, r3, #15
    6138:	d52a      	bpl.n	6190 <clock_stop+0x156>
    613a:	2001      	movs	r0, #1
    613c:	f7ff ff7b 	bl	6036 <nrfx_busy_wait>
    6140:	3d01      	subs	r5, #1
    6142:	d1f6      	bne.n	6132 <clock_stop+0xf8>
    6144:	e024      	b.n	6190 <clock_stop+0x156>
    switch (domain)
    6146:	f242 7510 	movw	r5, #10000	; 0x2710
    614a:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    614e:	e7e5      	b.n	611c <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6150:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6154:	03d8      	lsls	r0, r3, #15
    6156:	d51b      	bpl.n	6190 <clock_stop+0x156>
    6158:	2001      	movs	r0, #1
    615a:	f7ff ff6c 	bl	6036 <nrfx_busy_wait>
    615e:	3d01      	subs	r5, #1
    6160:	d1f6      	bne.n	6150 <clock_stop+0x116>
    6162:	e015      	b.n	6190 <clock_stop+0x156>
    switch (domain)
    6164:	f242 7510 	movw	r5, #10000	; 0x2710
    6168:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    616c:	b194      	cbz	r4, 6194 <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    616e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    6172:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6176:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6178:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    617c:	03d9      	lsls	r1, r3, #15
    617e:	d507      	bpl.n	6190 <clock_stop+0x156>
    6180:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6184:	2801      	cmp	r0, #1
    6186:	d103      	bne.n	6190 <clock_stop+0x156>
    6188:	f7ff ff55 	bl	6036 <nrfx_busy_wait>
    618c:	3d01      	subs	r5, #1
    618e:	d1ed      	bne.n	616c <clock_stop+0x132>
}
    6190:	b002      	add	sp, #8
    6192:	bd70      	pop	{r4, r5, r6, pc}
    6194:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    6198:	03da      	lsls	r2, r3, #15
    619a:	d5f9      	bpl.n	6190 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    619c:	2001      	movs	r0, #1
    619e:	f7ff ff4a 	bl	6036 <nrfx_busy_wait>
    61a2:	3d01      	subs	r5, #1
    61a4:	d1f6      	bne.n	6194 <clock_stop+0x15a>
    61a6:	e7f3      	b.n	6190 <clock_stop+0x156>
    switch (domain)
    61a8:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    61ac:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    61b0:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    61b4:	03db      	lsls	r3, r3, #15
    61b6:	d5eb      	bpl.n	6190 <clock_stop+0x156>
    61b8:	2c00      	cmp	r4, #0
    61ba:	d19e      	bne.n	60fa <clock_stop+0xc0>
    61bc:	2001      	movs	r0, #1
    61be:	e7a0      	b.n	6102 <clock_stop+0xc8>

000061c0 <nrfx_clock_enable>:
{
    61c0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    61c2:	2005      	movs	r0, #5
    61c4:	f7fb fcac 	bl	1b20 <arch_irq_is_enabled>
    61c8:	b910      	cbnz	r0, 61d0 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    61ca:	2005      	movs	r0, #5
    61cc:	f7fb fc86 	bl	1adc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    61d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61d4:	2201      	movs	r2, #1
    61d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    61da:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    61de:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    61e2:	bd08      	pop	{r3, pc}

000061e4 <nrfx_clock_start>:
{
    61e4:	b508      	push	{r3, lr}
    switch (domain)
    61e6:	2803      	cmp	r0, #3
    61e8:	d819      	bhi.n	621e <nrfx_clock_start+0x3a>
    61ea:	e8df f000 	tbb	[pc, r0]
    61ee:	3202      	.short	0x3202
    61f0:	4c3e      	.short	0x4c3e
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    61f2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    61f6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    61fa:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    61fe:	03c9      	lsls	r1, r1, #15
    6200:	d40e      	bmi.n	6220 <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6202:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6206:	07db      	lsls	r3, r3, #31
    6208:	d513      	bpl.n	6232 <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    620a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    620e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6212:	3b01      	subs	r3, #1
    6214:	2b01      	cmp	r3, #1
    6216:	d809      	bhi.n	622c <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    6218:	2302      	movs	r3, #2
    621a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    621e:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6220:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6224:	2b02      	cmp	r3, #2
    6226:	d005      	beq.n	6234 <nrfx_clock_start+0x50>
    6228:	2b01      	cmp	r3, #1
    622a:	d002      	beq.n	6232 <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    622c:	2000      	movs	r0, #0
    622e:	f7ff ff04 	bl	603a <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6232:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    6234:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6238:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    623c:	2300      	movs	r3, #0
    623e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6242:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6246:	2302      	movs	r3, #2
    6248:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    624c:	2301      	movs	r3, #1
    624e:	6093      	str	r3, [r2, #8]
}
    6250:	e7e5      	b.n	621e <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6252:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6256:	2200      	movs	r2, #0
    6258:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    625c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6260:	2201      	movs	r2, #1
    6262:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6266:	601a      	str	r2, [r3, #0]
}
    6268:	e7d9      	b.n	621e <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    626a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    626e:	2200      	movs	r2, #0
    6270:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6274:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    6278:	f44f 7200 	mov.w	r2, #512	; 0x200
    627c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6280:	2201      	movs	r2, #1
    6282:	621a      	str	r2, [r3, #32]
}
    6284:	e7cb      	b.n	621e <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6286:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    628a:	2200      	movs	r2, #0
    628c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6290:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    6294:	f44f 7280 	mov.w	r2, #256	; 0x100
    6298:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    629c:	2201      	movs	r2, #1
    629e:	619a      	str	r2, [r3, #24]
}
    62a0:	e7bd      	b.n	621e <nrfx_clock_start+0x3a>

000062a2 <nrfx_clock_stop>:
    clock_stop(domain);
    62a2:	f7ff beca 	b.w	603a <clock_stop>

000062a6 <nrf_gpio_reconfigure>:
{
    62a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    62a8:	4616      	mov	r6, r2
    62aa:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    62ae:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    62b0:	a801      	add	r0, sp, #4
{
    62b2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    62b4:	f7fd fa98 	bl	37e8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    62b8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    62ba:	f1b6 0c00 	subs.w	ip, r6, #0
    62be:	bf18      	it	ne
    62c0:	f04f 0c01 	movne.w	ip, #1
    62c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    62c8:	1e0b      	subs	r3, r1, #0
    62ca:	bf18      	it	ne
    62cc:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    62ce:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    62d0:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    62d4:	bf14      	ite	ne
    62d6:	f04f 0c0c 	movne.w	ip, #12
    62da:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    62de:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    62e0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    62e4:	bf14      	ite	ne
    62e6:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    62ea:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    62ee:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    62f0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    62f4:	bf14      	ite	ne
    62f6:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    62fa:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    62fe:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6302:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    6306:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    630a:	b101      	cbz	r1, 630e <nrf_gpio_reconfigure+0x68>
    630c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    630e:	b10e      	cbz	r6, 6314 <nrf_gpio_reconfigure+0x6e>
    6310:	7836      	ldrb	r6, [r6, #0]
    6312:	0076      	lsls	r6, r6, #1
    6314:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6316:	b10d      	cbz	r5, 631c <nrf_gpio_reconfigure+0x76>
    6318:	782d      	ldrb	r5, [r5, #0]
    631a:	00ad      	lsls	r5, r5, #2
    631c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    631e:	b10c      	cbz	r4, 6324 <nrf_gpio_reconfigure+0x7e>
    6320:	7824      	ldrb	r4, [r4, #0]
    6322:	0224      	lsls	r4, r4, #8
    6324:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    6326:	b10f      	cbz	r7, 632c <nrf_gpio_reconfigure+0x86>
    6328:	783f      	ldrb	r7, [r7, #0]
    632a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    632c:	430c      	orrs	r4, r1
    632e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    6330:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    6334:	b003      	add	sp, #12
    6336:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006338 <nrf_gpio_cfg_sense_set>:
{
    6338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    633a:	f10d 030f 	add.w	r3, sp, #15
    633e:	9301      	str	r3, [sp, #4]
    6340:	2300      	movs	r3, #0
{
    6342:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6346:	461a      	mov	r2, r3
    6348:	4619      	mov	r1, r3
    634a:	9300      	str	r3, [sp, #0]
    634c:	f7ff ffab 	bl	62a6 <nrf_gpio_reconfigure>
}
    6350:	b005      	add	sp, #20
    6352:	f85d fb04 	ldr.w	pc, [sp], #4

00006356 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    6356:	7b0a      	ldrb	r2, [r1, #12]
{
    6358:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    635a:	2a03      	cmp	r2, #3
    635c:	d829      	bhi.n	63b2 <xfer_completeness_check+0x5c>
    635e:	e8df f002 	tbb	[pc, r2]
    6362:	2521      	.short	0x2521
    6364:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    6366:	688a      	ldr	r2, [r1, #8]
    6368:	0350      	lsls	r0, r2, #13
    636a:	d504      	bpl.n	6376 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    636c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    6370:	6908      	ldr	r0, [r1, #16]
    6372:	4290      	cmp	r0, r2
    6374:	d107      	bne.n	6386 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    6376:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    6378:	0352      	lsls	r2, r2, #13
    637a:	d41a      	bmi.n	63b2 <xfer_completeness_check+0x5c>
    637c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    6380:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    6382:	4291      	cmp	r1, r2
    6384:	d015      	beq.n	63b2 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    6386:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    6388:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    638a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    638e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    6392:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    6394:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    6398:	6908      	ldr	r0, [r1, #16]
    639a:	4290      	cmp	r0, r2
    639c:	d1f3      	bne.n	6386 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    639e:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    63a2:	e7ed      	b.n	6380 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    63a4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    63a8:	6909      	ldr	r1, [r1, #16]
    63aa:	e7ea      	b.n	6382 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    63ac:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    63b0:	e7fa      	b.n	63a8 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    63b2:	2001      	movs	r0, #1
}
    63b4:	4770      	bx	lr

000063b6 <nrf_gpio_pin_set>:
{
    63b6:	b507      	push	{r0, r1, r2, lr}
    63b8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    63ba:	a801      	add	r0, sp, #4
    63bc:	f7fe f896 	bl	44ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    63c0:	2301      	movs	r3, #1
    63c2:	9a01      	ldr	r2, [sp, #4]
    63c4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    63c6:	6083      	str	r3, [r0, #8]
}
    63c8:	b003      	add	sp, #12
    63ca:	f85d fb04 	ldr.w	pc, [sp], #4

000063ce <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    63ce:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    63d0:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    63d2:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    63d4:	bf9c      	itt	ls
    63d6:	6881      	ldrls	r1, [r0, #8]
    63d8:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    63da:	3b01      	subs	r3, #1
    63dc:	1a98      	subs	r0, r3, r2
}
    63de:	4770      	bx	lr

000063e0 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    63e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63e4:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    63e6:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    63ea:	6840      	ldr	r0, [r0, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
    63ec:	eba8 0604 	sub.w	r6, r8, r4
  if (Rem > NumBytes) {
    63f0:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    63f2:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    63f4:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    63f6:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    63f8:	d906      	bls.n	6408 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    63fa:	f7ff fc49 	bl	5c90 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    63fe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    6402:	60ec      	str	r4, [r5, #12]
}
    6404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    6408:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    640a:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    640e:	f7ff fc3f 	bl	5c90 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    6412:	4622      	mov	r2, r4
    6414:	6868      	ldr	r0, [r5, #4]
    6416:	19b9      	adds	r1, r7, r6
    6418:	e7ef      	b.n	63fa <_WriteNoCheck+0x1a>

0000641a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    641a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    641e:	4606      	mov	r6, r0
    6420:	4689      	mov	r9, r1
    6422:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    6424:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
    6428:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    642a:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    642c:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
    642e:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6430:	bf28      	it	cs
    6432:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    6434:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    6436:	42bc      	cmp	r4, r7
    6438:	bf28      	it	cs
    643a:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    643c:	3b01      	subs	r3, #1
    643e:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    6440:	429c      	cmp	r4, r3
    6442:	bf28      	it	cs
    6444:	461c      	movcs	r4, r3
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6446:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    6448:	4649      	mov	r1, r9
    644a:	4622      	mov	r2, r4
    644c:	4428      	add	r0, r5
    644e:	f7ff fc1f 	bl	5c90 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    6452:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    6454:	4425      	add	r5, r4
      WrOff = 0u;
    6456:	42ab      	cmp	r3, r5
    6458:	bf08      	it	eq
    645a:	2500      	moveq	r5, #0
    NumBytesWritten += NumBytesToWrite;
    645c:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    645e:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    6460:	1b3f      	subs	r7, r7, r4
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    6462:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    6466:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    6468:	2f00      	cmp	r7, #0
    646a:	d1de      	bne.n	642a <_WriteBlocking+0x10>
}
    646c:	4640      	mov	r0, r8
    646e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006472 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6472:	f7fe b8b5 	b.w	45e0 <_DoInit>

00006476 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    6476:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    6478:	f7ff fffb 	bl	6472 <SEGGER_RTT_Init>

	return 0;
}
    647c:	2000      	movs	r0, #0
    647e:	bd08      	pop	{r3, pc}

00006480 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    6480:	4770      	bx	lr

00006482 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6482:	b140      	cbz	r0, 6496 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6484:	68c3      	ldr	r3, [r0, #12]
    6486:	7858      	ldrb	r0, [r3, #1]
    6488:	f010 0001 	ands.w	r0, r0, #1
    648c:	bf1e      	ittt	ne
    648e:	7818      	ldrbne	r0, [r3, #0]
    6490:	fab0 f080 	clzne	r0, r0
    6494:	0940      	lsrne	r0, r0, #5
}
    6496:	4770      	bx	lr

00006498 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    649a:	4605      	mov	r5, r0
    649c:	460e      	mov	r6, r1
	__asm__ volatile(
    649e:	f04f 0320 	mov.w	r3, #32
    64a2:	f3ef 8711 	mrs	r7, BASEPRI
    64a6:	f383 8812 	msr	BASEPRI_MAX, r3
    64aa:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    64ae:	f7fe fea7 	bl	5200 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    64b2:	4631      	mov	r1, r6
    64b4:	4604      	mov	r4, r0
    64b6:	4628      	mov	r0, r5
    64b8:	f7ff fdad 	bl	6016 <k_sys_fatal_error_handler>
	__asm__ volatile(
    64bc:	f387 8811 	msr	BASEPRI, r7
    64c0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    64c4:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    64c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    64ca:	f7fb bde9 	b.w	20a0 <z_impl_k_thread_abort>

000064ce <z_early_memset>:
	(void) memset(dst, c, n);
    64ce:	f7ff bbea 	b.w	5ca6 <memset>

000064d2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    64d2:	f7ff bbdd 	b.w	5c90 <memcpy>

000064d6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    64d6:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    64da:	4313      	orrs	r3, r2
    64dc:	f013 0303 	ands.w	r3, r3, #3
    64e0:	d10c      	bne.n	64fc <create_free_list+0x26>
	slab->free_list = NULL;
    64e2:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    64e4:	6881      	ldr	r1, [r0, #8]
    64e6:	4299      	cmp	r1, r3
    64e8:	d801      	bhi.n	64ee <create_free_list+0x18>
	return 0;
    64ea:	2000      	movs	r0, #0
    64ec:	4770      	bx	lr
		*(char **)p = slab->free_list;
    64ee:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    64f0:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    64f2:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    64f4:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    64f6:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    64f8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    64fa:	e7f3      	b.n	64e4 <create_free_list+0xe>
		return -EINVAL;
    64fc:	f06f 0015 	mvn.w	r0, #21
}
    6500:	4770      	bx	lr

00006502 <k_mem_slab_init>:
{
    6502:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    6504:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    6508:	2300      	movs	r3, #0
	slab->buffer = buffer;
    650a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    650c:	6183      	str	r3, [r0, #24]
{
    650e:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    6510:	f7ff ffe1 	bl	64d6 <create_free_list>
	if (rc < 0) {
    6514:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    6516:	bfa8      	it	ge
    6518:	e9c4 4400 	strdge	r4, r4, [r4]
}
    651c:	bd10      	pop	{r4, pc}

0000651e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    651e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6520:	4604      	mov	r4, r0
    6522:	460d      	mov	r5, r1
	__asm__ volatile(
    6524:	f04f 0320 	mov.w	r3, #32
    6528:	f3ef 8611 	mrs	r6, BASEPRI
    652c:	f383 8812 	msr	BASEPRI_MAX, r3
    6530:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6534:	6947      	ldr	r7, [r0, #20]
    6536:	b977      	cbnz	r7, 6556 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6538:	f000 f8a6 	bl	6688 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    653c:	b158      	cbz	r0, 6556 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    653e:	682a      	ldr	r2, [r5, #0]
    6540:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6542:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    6544:	f000 f86a 	bl	661c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6548:	4631      	mov	r1, r6
    654a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    654e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    6552:	f7fe bd1f 	b.w	4f94 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6556:	682b      	ldr	r3, [r5, #0]
    6558:	6962      	ldr	r2, [r4, #20]
    655a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    655c:	682b      	ldr	r3, [r5, #0]
    655e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6560:	69a3      	ldr	r3, [r4, #24]
    6562:	3b01      	subs	r3, #1
    6564:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6566:	f386 8811 	msr	BASEPRI, r6
    656a:	f3bf 8f6f 	isb	sy
}
    656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006570 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6570:	f3ef 8005 	mrs	r0, IPSR
}
    6574:	3800      	subs	r0, #0
    6576:	bf18      	it	ne
    6578:	2001      	movne	r0, #1
    657a:	4770      	bx	lr

0000657c <z_pm_save_idle_exit>:
{
    657c:	b508      	push	{r3, lr}
	pm_system_resume();
    657e:	f7fb f883 	bl	1688 <pm_system_resume>
}
    6582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6586:	f7ff bd35 	b.w	5ff4 <sys_clock_idle_exit>

0000658a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    658a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    658e:	428b      	cmp	r3, r1
    6590:	d001      	beq.n	6596 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6592:	f7fe bcb9 	b.w	4f08 <z_set_prio>
}
    6596:	2000      	movs	r0, #0
    6598:	4770      	bx	lr

0000659a <z_impl_k_mutex_init>:
{
    659a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    659c:	2000      	movs	r0, #0
    659e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    65a2:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    65a6:	4770      	bx	lr

000065a8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    65a8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    65ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    65ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    65b0:	2300      	movs	r3, #0
	node->prev = NULL;
    65b2:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    65b6:	4770      	bx	lr

000065b8 <unpend_thread_no_timeout>:
{
    65b8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    65ba:	f7ff fff5 	bl	65a8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    65be:	7b43      	ldrb	r3, [r0, #13]
    65c0:	f023 0302 	bic.w	r3, r3, #2
    65c4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    65c6:	2300      	movs	r3, #0
    65c8:	6083      	str	r3, [r0, #8]
}
    65ca:	bd08      	pop	{r3, pc}

000065cc <add_to_waitq_locked>:
{
    65cc:	b538      	push	{r3, r4, r5, lr}
    65ce:	4604      	mov	r4, r0
    65d0:	460d      	mov	r5, r1
	unready_thread(thread);
    65d2:	f7fe fc1b 	bl	4e0c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    65d6:	7b63      	ldrb	r3, [r4, #13]
    65d8:	f043 0302 	orr.w	r3, r3, #2
    65dc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    65de:	b1e5      	cbz	r5, 661a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    65e0:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    65e2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65e4:	429d      	cmp	r5, r3
    65e6:	d109      	bne.n	65fc <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    65e8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    65ea:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    65ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
    65f0:	606c      	str	r4, [r5, #4]
}
    65f2:	e012      	b.n	661a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    65f4:	686a      	ldr	r2, [r5, #4]
    65f6:	4293      	cmp	r3, r2
    65f8:	d0f6      	beq.n	65e8 <add_to_waitq_locked+0x1c>
    65fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    65fc:	2b00      	cmp	r3, #0
    65fe:	d0f3      	beq.n	65e8 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    6600:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6604:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    6608:	428a      	cmp	r2, r1
    660a:	d0f3      	beq.n	65f4 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    660c:	4291      	cmp	r1, r2
    660e:	ddf1      	ble.n	65f4 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    6610:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6612:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6616:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6618:	605c      	str	r4, [r3, #4]
}
    661a:	bd38      	pop	{r3, r4, r5, pc}

0000661c <z_ready_thread>:
{
    661c:	b510      	push	{r4, lr}
	__asm__ volatile(
    661e:	f04f 0320 	mov.w	r3, #32
    6622:	f3ef 8411 	mrs	r4, BASEPRI
    6626:	f383 8812 	msr	BASEPRI_MAX, r3
    662a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    662e:	f7fe fbb9 	bl	4da4 <ready_thread>
	__asm__ volatile(
    6632:	f384 8811 	msr	BASEPRI, r4
    6636:	f3bf 8f6f 	isb	sy
}
    663a:	bd10      	pop	{r4, pc}

0000663c <z_sched_wake_thread>:
{
    663c:	b538      	push	{r3, r4, r5, lr}
    663e:	4604      	mov	r4, r0
	__asm__ volatile(
    6640:	f04f 0320 	mov.w	r3, #32
    6644:	f3ef 8511 	mrs	r5, BASEPRI
    6648:	f383 8812 	msr	BASEPRI_MAX, r3
    664c:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6650:	7b43      	ldrb	r3, [r0, #13]
    6652:	f013 0f28 	tst.w	r3, #40	; 0x28
    6656:	d10b      	bne.n	6670 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    6658:	6883      	ldr	r3, [r0, #8]
    665a:	b10b      	cbz	r3, 6660 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    665c:	f7ff ffac 	bl	65b8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6660:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    6662:	b951      	cbnz	r1, 667a <z_sched_wake_thread+0x3e>
    6664:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    6668:	4620      	mov	r0, r4
    666a:	7363      	strb	r3, [r4, #13]
    666c:	f7fe fb9a 	bl	4da4 <ready_thread>
	__asm__ volatile(
    6670:	f385 8811 	msr	BASEPRI, r5
    6674:	f3bf 8f6f 	isb	sy
}
    6678:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    667a:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    667e:	e7f3      	b.n	6668 <z_sched_wake_thread+0x2c>

00006680 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    6680:	2101      	movs	r1, #1
    6682:	3818      	subs	r0, #24
    6684:	f7ff bfda 	b.w	663c <z_sched_wake_thread>

00006688 <z_unpend_first_thread>:
{
    6688:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    668a:	f04f 0320 	mov.w	r3, #32
    668e:	f3ef 8511 	mrs	r5, BASEPRI
    6692:	f383 8812 	msr	BASEPRI_MAX, r3
    6696:	f3bf 8f6f 	isb	sy
	return list->head == list;
    669a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    669c:	42a0      	cmp	r0, r4
    669e:	d00d      	beq.n	66bc <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    66a0:	b134      	cbz	r4, 66b0 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    66a2:	4620      	mov	r0, r4
    66a4:	f7ff ff88 	bl	65b8 <unpend_thread_no_timeout>
    66a8:	f104 0018 	add.w	r0, r4, #24
    66ac:	f000 f81e 	bl	66ec <z_abort_timeout>
	__asm__ volatile(
    66b0:	f385 8811 	msr	BASEPRI, r5
    66b4:	f3bf 8f6f 	isb	sy
}
    66b8:	4620      	mov	r0, r4
    66ba:	bd38      	pop	{r3, r4, r5, pc}
    66bc:	2400      	movs	r4, #0
    66be:	e7f7      	b.n	66b0 <z_unpend_first_thread+0x28>

000066c0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    66c0:	4603      	mov	r3, r0
    66c2:	b920      	cbnz	r0, 66ce <z_reschedule_irqlock+0xe>
    66c4:	f3ef 8205 	mrs	r2, IPSR
    66c8:	b90a      	cbnz	r2, 66ce <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    66ca:	f7fb ba6d 	b.w	1ba8 <arch_swap>
    66ce:	f383 8811 	msr	BASEPRI, r3
    66d2:	f3bf 8f6f 	isb	sy
}
    66d6:	4770      	bx	lr

000066d8 <z_reschedule_unlocked>:
	__asm__ volatile(
    66d8:	f04f 0320 	mov.w	r3, #32
    66dc:	f3ef 8011 	mrs	r0, BASEPRI
    66e0:	f383 8812 	msr	BASEPRI_MAX, r3
    66e4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    66e8:	f7ff bfea 	b.w	66c0 <z_reschedule_irqlock>

000066ec <z_abort_timeout>:
{
    66ec:	b510      	push	{r4, lr}
    66ee:	f04f 0220 	mov.w	r2, #32
    66f2:	f3ef 8411 	mrs	r4, BASEPRI
    66f6:	f382 8812 	msr	BASEPRI_MAX, r2
    66fa:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    66fe:	6803      	ldr	r3, [r0, #0]
    6700:	b13b      	cbz	r3, 6712 <z_abort_timeout+0x26>
			remove_timeout(to);
    6702:	f7fe fe27 	bl	5354 <remove_timeout>
			ret = 0;
    6706:	2000      	movs	r0, #0
	__asm__ volatile(
    6708:	f384 8811 	msr	BASEPRI, r4
    670c:	f3bf 8f6f 	isb	sy
}
    6710:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6712:	f06f 0015 	mvn.w	r0, #21
    6716:	e7f7      	b.n	6708 <z_abort_timeout+0x1c>

00006718 <z_get_next_timeout_expiry>:
{
    6718:	b510      	push	{r4, lr}
	__asm__ volatile(
    671a:	f04f 0320 	mov.w	r3, #32
    671e:	f3ef 8411 	mrs	r4, BASEPRI
    6722:	f383 8812 	msr	BASEPRI_MAX, r3
    6726:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    672a:	f7fe fdf3 	bl	5314 <next_timeout>
	__asm__ volatile(
    672e:	f384 8811 	msr	BASEPRI, r4
    6732:	f3bf 8f6f 	isb	sy
}
    6736:	bd10      	pop	{r4, pc}

00006738 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6738:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    673a:	f7fe ff07 	bl	554c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    673e:	bd08      	pop	{r3, pc}

00006740 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6740:	b108      	cbz	r0, 6746 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6742:	f7fa bf51 	b.w	15e8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6746:	4770      	bx	lr

00006748 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6748:	4770      	bx	lr
	...
